---
openapi: 3.0.1
info:
  title: Walkinside Web Api
  version: v1
paths:
  "/imports/{id}":
    get:
      tags:
      - Imports
      summary: Get import attempt item by id.
      operationId: Imports_GetByIdAsync
      parameters:
      - name: id
        in: path
        description: The Import attempt id.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Import"
        '303':
          description: Redirect
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Import"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/jobs":
    get:
      tags:
      - Jobs
      summary: Gets all jobs.
      operationId: Jobs_GetAll
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Job"
  "/jobs/{id}":
    get:
      tags:
      - Jobs
      summary: Gets a single job.
      operationId: Jobs_Get
      parameters:
      - name: id
        in: path
        description: Job id.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Job"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/jobs/{id}/actions/cancel":
    post:
      tags:
      - Jobs
      summary: Cancels a given job.
      operationId: Jobs_Cancel
      parameters:
      - name: id
        in: path
        description: A job id.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '202':
          description: Accepted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/projects":
    get:
      tags:
      - Projects
      summary: Get Project(s).
      operationId: Projects_GetAll
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Project"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    post:
      tags:
      - Projects
      summary: Upload a Project.
      operationId: Projects_Create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - uploadFile
              type: object
              properties:
                uploadFile:
                  type: file
                  description: Upload File
                  format: formData
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/projects/{id}":
    delete:
      tags:
      - Projects
      summary: Deletes a Project.
      operationId: Projects_DeleteById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    get:
      tags:
      - Projects
      summary: Gets Upload Attempt by Id.
      operationId: Projects_GetById
      parameters:
      - name: id
        in: path
        description: The Project Id.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    patch:
      tags:
      - Projects
      summary: Upgrades a Project.
      operationId: Projects_UpgradeAsync
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - uploadFile
              type: object
              properties:
                uploadFile:
                  type: file
                  description: Upload File
                  format: formData
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    put:
      tags:
      - Projects
      summary: Update Project Metadata.
      operationId: Projects_UpdateProjectMetadata
      parameters:
      - name: id
        in: path
        description: The Project Id.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The Project Metadata.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectMetadata"
          text/json:
            schema:
              "$ref": "#/components/schemas/ProjectMetadata"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/ProjectMetadata"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/projects/{id}/share":
    delete:
      tags:
      - Projects
      summary: Unshare a project to one or multiple users.
      operationId: Projects_UnshareProject
      parameters:
      - name: id
        in: path
        description: project id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: user ids
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
          text/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
          application/*+json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    put:
      tags:
      - Projects
      summary: Share a project to one or multiple users.
      operationId: Projects_ShareProject
      parameters:
      - name: id
        in: path
        description: project id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: user ids
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
          text/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
          application/*+json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/projects/{projectId}/scenarios":
    get:
      tags:
      - Scenarios
      summary: Gets all scenarios.
      operationId: Scenarios_GetAll
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Scenario"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/projects/{projectId}/scenarios/{scenarioId}":
    get:
      tags:
      - Scenarios
      summary: Get a scenario by project id and scenario id.
      operationId: Scenarios_GetScenarioByIdAsync
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: scenarioId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Scenario"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/projects/{projectId}/viewpoints":
    get:
      tags:
      - Viewpoints
      summary: Gets all viewpoints.
      operationId: Viewpoints_GetAll
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Viewpoint"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    post:
      tags:
      - Viewpoints
      summary: Creates a viewpoint.
      operationId: Viewpoints_Create
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateViewpoint"
          text/json:
            schema:
              "$ref": "#/components/schemas/CreateViewpoint"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/CreateViewpoint"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Viewpoint"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/projects/{projectId}/viewpoints/{id}":
    delete:
      tags:
      - Viewpoints
      summary: Deletes a viewpoint.
      operationId: Viewpoints_DeleteById
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Viewpoint"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    put:
      tags:
      - Viewpoints
      summary: Updates a viewpoint.
      operationId: Viewpoints_Update
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateViewpoint"
          text/json:
            schema:
              "$ref": "#/components/schemas/UpdateViewpoint"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/UpdateViewpoint"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Viewpoint"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '410':
          description: Gone
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/usergroups":
    get:
      tags:
      - UserGroups
      summary: Gets all the user groups.
      operationId: UserGroups_GetAll
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserGroup"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/users":
    get:
      tags:
      - Users
      summary: Gets all Users Information.
      operationId: Users_GetAll
      parameters:
      - name: loginname
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserInfo"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    post:
      tags:
      - Users
      summary: Creates a User
      operationId: Users_CreateUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUser"
          text/json:
            schema:
              "$ref": "#/components/schemas/CreateUser"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/CreateUser"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfo"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/users/{id}":
    delete:
      tags:
      - Users
      summary: Deletes a User.
      operationId: Users_DeleteById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfo"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    get:
      tags:
      - Users
      summary: Gets user information using its identifier.
      operationId: Users_GetById
      parameters:
      - name: id
        in: path
        description: User id.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfo"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
    put:
      tags:
      - Users
      summary: Updates user information.
      operationId: Users_UpdateUser
      parameters:
      - name: id
        in: path
        description: The user if of target user.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: New user information.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUser"
          text/json:
            schema:
              "$ref": "#/components/schemas/UpdateUser"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/UpdateUser"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfo"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/users/me":
    get:
      tags:
      - Users
      summary: Gets User Information.
      operationId: Users_GetUserInfo
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfo"
    put:
      tags:
      - Users
      summary: Updates user information.
      operationId: Users_UpdateMe
      requestBody:
        description: New user information.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUser"
          text/json:
            schema:
              "$ref": "#/components/schemas/UpdateUser"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/UpdateUser"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfo"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  "/users/token":
    post:
      tags:
      - Users
      summary: Gets a Jwt token for current user.
      operationId: Users_RequestToken
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
components:
  schemas:
    Action:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Action name.
      additionalProperties: false
      description: Represents scenario action.
    CreateUser:
      required:
      - loginName
      - usergroup
      type: object
      properties:
        loginName:
          maxLength: 400
          minLength: 3
          type: string
          description: The user login name.
        displayName:
          type: string
          description: The user display name.
          nullable: true
        usergroup:
          maxLength: 20
          minLength: 0
          type: string
          description: The user's usergroup.
      additionalProperties: false
      description: Represents information regarding create user contract.
    CreateViewpoint:
      required:
      - direction
      - name
      - position
      type: object
      properties:
        name:
          type: string
          description: The viewpoint name.
        position:
          "$ref": "#/components/schemas/Point3d"
        direction:
          "$ref": "#/components/schemas/Vector3d"
        thumbnail:
          type: string
          description: The thumbnail.
          nullable: true
      additionalProperties: false
      description: Represents create viewpoint contract.
    Import:
      type: object
      properties:
        id:
          type: string
          description: The import Id.
          format: uuid
        status:
          "$ref": "#/components/schemas/ImportStatus"
        creationDateTimeUtc:
          type: string
          description: The import creation date time in UTC.
          format: date-time
      additionalProperties: false
      description: Represents import project contract.
    ImportStatus:
      enum:
      - 0
      - 1
      - -1
      type: integer
      description: Represents import project status.
      format: int32
    Job:
      required:
      - creationDateTimeUtc
      - creatorId
      - description
      - id
      type: object
      properties:
        id:
          type: string
          description: Job's identifier.
          format: uuid
        creatorId:
          type: string
          description: Job's creator identifier.
          format: uuid
        creationDateTimeUtc:
          type: string
          description: Creation date.
          format: date-time
        startDateTimeUtc:
          type: string
          description: Start date.
          format: date-time
          nullable: true
        endDateTimeUtc:
          type: string
          description: End date.
          format: date-time
          nullable: true
        description:
          type: string
          description: Job's description.
        status:
          "$ref": "#/components/schemas/JobStatus"
        failureReason:
          type: string
          description: Failure reason if the job execution failed.
          nullable: true
        result:
          type: string
          description: Result uri if any.
          format: uri
          nullable: true
      additionalProperties: false
      description: Represents a job contract.
    JobStatus:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      type: integer
      description: Job status.
      format: int32
    Point3d:
      type: object
      properties:
        x:
          type: number
          description: The x-axis value.
          format: double
        "y":
          type: number
          description: The y-axis value.
          format: double
        z:
          type: number
          description: The z-axis value.
          format: double
      additionalProperties: false
      description: Represents point 3d.
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    Project:
      type: object
      properties:
        id:
          type: string
          description: The project id.
          format: uuid
        status:
          "$ref": "#/components/schemas/ProjectStatus"
        displayName:
          type: string
          description: The display name.
          nullable: true
        description:
          type: string
          description: The description.
          nullable: true
        creationDateTimeUtc:
          type: string
          description: The creation date.
          format: date-time
        createdBy:
          type: string
          description: The created by user id.
          format: uuid
        reservedUrl:
          type: string
          description: The reserved url.
          nullable: true
        sharedWithUsers:
          type: array
          items:
            "$ref": "#/components/schemas/SharedWithUserInfo"
          description: The shared user information list.
          nullable: true
      additionalProperties: false
      description: Represents project contract.
    ProjectMetadata:
      required:
      - displayName
      type: object
      properties:
        displayName:
          maxLength: 20
          minLength: 1
          type: string
          description: The project display name.
        description:
          maxLength: 1000
          minLength: 0
          type: string
          description: The project description.
          nullable: true
      additionalProperties: false
      description: Represents project meta data contract.
    ProjectStatus:
      enum:
      - 1000
      - 1002
      type: integer
      description: Represents published project status.
      format: int32
    Scenario:
      required:
      - actions
      - name
      type: object
      properties:
        id:
          type: integer
          description: Scenario id.
          format: int64
        name:
          type: string
          description: Scenario name.
        actions:
          type: array
          items:
            "$ref": "#/components/schemas/Action"
          description: Scenario action list.
      additionalProperties: false
      description: Represents scenario.
    SharedWithUserInfo:
      type: object
      properties:
        id:
          type: string
          description: The user id.
          format: uuid
        displayName:
          type: string
          description: The display name.
          nullable: true
        group:
          type: string
          description: The user group.
          nullable: true
      additionalProperties: false
      description: Represents user info with whom the project is shared contract.
    UpdateUser:
      type: object
      properties:
        displayName:
          maxLength: 50
          minLength: 0
          type: string
          description: The display name.
          nullable: true
        group:
          type: string
          description: The user group.
          nullable: true
      additionalProperties: false
      description: Represents update user contract.
    UpdateViewpoint:
      type: object
      properties:
        name:
          type: string
          description: The viewpoint name.
          nullable: true
        position:
          "$ref": "#/components/schemas/Point3d"
        direction:
          "$ref": "#/components/schemas/Vector3d"
        thumbnail:
          type: string
          description: The thumbnail.
          nullable: true
      additionalProperties: false
      description: Represents update viewpoint contract.
    UserGroup:
      type: object
      properties:
        id:
          type: integer
          description: User group id.
          format: int32
        name:
          type: string
          description: User group name.
          nullable: true
      additionalProperties: false
      description: Represents User group contract.
    UserInfo:
      type: object
      properties:
        displayName:
          type: string
          description: The display name.
          nullable: true
        group:
          "$ref": "#/components/schemas/UserGroup"
        id:
          type: string
          description: The user id.
          format: uuid
      additionalProperties: false
      description: Represents user information contract.
    Vector3d:
      type: object
      properties:
        x:
          type: number
          description: The x-axis value.
          format: double
        "y":
          type: number
          description: The y-axis value.
          format: double
        z:
          type: number
          description: The z-axis value.
          format: double
      additionalProperties: false
      description: Represents vector3d.
    Viewpoint:
      required:
      - creatorId
      type: object
      properties:
        id:
          type: integer
          description: The viewpoint id.
          format: int64
        name:
          type: string
          description: The name.
          nullable: true
        position:
          "$ref": "#/components/schemas/Point3d"
        direction:
          "$ref": "#/components/schemas/Vector3d"
        thumbnail:
          type: string
          description: The thumbnail.
          nullable: true
        creatorId:
          type: string
          description: Viewpoint creator id.
          format: uuid
      additionalProperties: false
      description: Represents viewpoint.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
