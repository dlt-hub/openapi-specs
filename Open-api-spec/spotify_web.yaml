#%RAML 0.8
title: Spotify Web API
version: v1
baseUri: https://api.spotify.com/{version}
mediaType: application/json
documentation:
  - title: Spotify Web API Docs
    content: |
      Welcome to the _Spotify Web API_ specification. For more information about
      how to use the API, check out [Spotify's developer site](https://developer.spotify.com/web-api/).
schemas:
  - Playlist: !include schemas/playlist.json
resourceTypes:
  - base:
      get?: &common
        headers:
          Accept:
            description: Is used to set specified media type.
            type: string
        responses:
          429:
            description: |
              API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.
      post?: *common
  - item:
      type: base
      get?:
  - collection:
      type: base
      get?:
securitySchemes:
  - oauth_2_0:
      description: |
          Spotify supports OAuth 2.0 for authenticating all API requests.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: |
              Used to send a valid OAuth 2 access token.
            type: string
        responses:
          401:
            description: |
              Bad or expired token. This can happen if the user revoked a token or
              the access token has expired. You should re-authenticate the user.
          403:
            description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
      settings:
        authorizationUri: https://accounts.spotify.com/authorize
        accessTokenUri: https://accounts.spotify.com/api/token
        authorizationGrants: [ code, token ]
        scopes:
          - "playlist-read-private"
          - "playlist-read-collaborative"
          - "playlist-modify-public"
          - "playlist-modify-private"
          - "user-library-read"
          - "user-library-modify"
          - "user-read-private"
          - "user-read-birthdate"
          - "user-read-email"
          - "user-follow-read"
          - "user-follow-modify"
          - "user-top-read"
traits:
  - filterable:
      queryParameters:
        fields:
          description: A comma-separated list of fields to filter query
          type: string
          example: items(added_by.id,track(name,href,album(name,href)))
          displayName: Fields
  - paged:
      queryParameters:
        limit:
          displayName: Limit
          description: The maximum number of track objects to return
          type: integer
          example: 10
          minimum: 0
          default: 20
          maximum: 50
          required: false
        offset:
          displayName: Offset
          description: The index of the first track to return
          type: integer
          example: 5
          default: 0
          required: false
/albums:
  displayName: several-albums
  get:
    description: |
      [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/)
    securedBy: [ null, oauth_2_0: { scopes: []}]
    queryParameters:
      ids:
        displayName: Spotify Album IDs
        type: string
        description: A comma-separated list of IDs
        required: true
        example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
      market:
        displayName: Market
        description: The market (an ISO 3166-1 alpha-2 country code)
        type: string
        example: ES
        required: false
  /{id}:
    displayName: album
    uriParameters:
      id:
        displayName: Spotify Album ID
        type: string
        description: The Spotify ID for the album
        example: 4aawyAB9vmqN3uQ7FjRGTy
    get:
      description: |
        [Get an Album](https://developer.spotify.com/web-api/get-album/)
      securedBy: [ null, oauth_2_0: { scopes: []}]
      queryParameters:
        market:
          displayName: Market
          description: The market (an ISO 3166-1 alpha-2 country code)
          type: string
          example: ES
          required: false
    /tracks:
      displayName: album-tracks
      get:
        is: [ paged ]
        description: |
          [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/)
        securedBy: [ null, oauth_2_0: { scopes: []}]
        queryParameters:
          market:
            displayName: Market
            description: The market (an ISO 3166-1 alpha-2 country code)
            type: string
            example: ES
            required: false
/artists:
  displayName: several-artists
  get:
    description: |
      [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/)
    securedBy: [ null, oauth_2_0: { scopes: []}]
    queryParameters:
      ids:
        displayName: Spotify Artist IDs
        type: string
        description: A comma-separated list of IDs
        required: true
        example: '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'
  /{id}:
    displayName: artist
    uriParameters:
      id:
        displayName: Spotify Artist ID
        type: string
        description: The Spotify ID for the artist
        example: 0TnOYISbd1XYRBk9myaseg
        required: true
    get:
      description: |
        [Get an Artist](https://developer.spotify.com/web-api/get-artist/)
      securedBy: [ null, oauth_2_0: { scopes: []}]
    /top-tracks:
      displayName: artist-top-tracks
      get:
        description: |
          [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/)
        securedBy: [ null, oauth_2_0: { scopes: []}]
        queryParameters:
          country:
            displayName: Country
            description: The country (an ISO 3166-1 alpha-2 country code)
            type: string
            example: ES
            required: true
    /related-artists:
      displayName: artist-related-artists
      get:
        description: |
          [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/)
        securedBy: [ null, oauth_2_0: { scopes: []}]
    /albums:
      displayName: artist-albums
      get:
        is: [ paged ]
        description: |
          [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/)
        securedBy: [ null, oauth_2_0: { scopes: []}]
        queryParameters:
          album_type:
            displayName: Album Type (single, album, appears_on, compilation)
            description: Filter by album types
            type: string
            required: false
            example: single,album
          market:
            displayName: Market
            description: The market (an ISO 3166-1 alpha-2 country code)
            type: string
            example: ES
            required: false
/tracks:
  displayName: several-tracks
  get:
    description: |
      [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/)
    securedBy: [ null, oauth_2_0: { scopes: []}]
    queryParameters:
      ids:
        displayName: Spotify Track IDs
        type: string
        description: A comma-separated list of IDs
        required: true
        example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
      market:
        displayName: Market
        description: The market (an ISO 3166-1 alpha-2 country code)
        type: string
        example: ES
        required: false
  /{id}:
    displayName: track
    uriParameters:
      id:
        type: string
        displayName: Spotify Track ID
        example: 1zHlj4dQ8ZAtrayhuDDmkY
    get:
      description: |
        [Get a Track](https://developer.spotify.com/web-api/get-track/)
      securedBy: [ null, oauth_2_0: { scopes: []}]
      queryParameters:
        market:
          displayName: Market
          description: The market (an ISO 3166-1 alpha-2 country code)
          type: string
          example: ES
          required: false
/search:
  displayName: search-item
  get:
    is: [ paged ]
    description: |
      [Search for an Item](https://developer.spotify.com/web-api/search-item/)
    securedBy: [ null, oauth_2_0: { scopes: []}]
    queryParameters:
      q:
        displayName: Query
        type: string
        description: "The search query's keywords (and optional field filters). The search is not case-sensitive: 'roadhouse' will match 'Roadhouse', 'roadHouse', etc. Keywords will be matched in any order unless surrounded by quotes, thus q=roadhouse&20blues will match both 'Blues Roadhouse' and 'Roadhouse of the Blues'. Quotation marks can be used to limit the match to a phrase: q=roadhouse&20blues will match 'My Roadhouse Blues' but not 'Roadhouse of the Blues'. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q=album:gold%20artist:abba&type=album will search for albums with the text 'gold' in the album name and the text 'abba' in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q=damian%20genre:reggae-pop&type=artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist's name and/or description."
        example: Muse
        required: true
      type:
        displayName: Item Type (album, artist, track, playlist)
        description: A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q=name:abacab&type=album,track will return both albums and tracks with "abacab" in their name.
        type: string
        example: track,artist
        required: true
      market:
        displayName: Market
        type: string
        description: The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.
        example: 'US'
/me:
  displayName: current-user
  securedBy: [ oauth_2_0: {scopes: ['user-read-private', 'user-read-birthdate', 'user-read-email']} ]
  get:
    description: |
      [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/)
  /playlists:
    displayName: current-user-playlists
    type: collection
    get:
      is: [ paged ]
      description: |
        [Get a List of Current User's Playlists](https://developer.spotify.com/web-api/get-a-list-of-current-users-playlists/)
      securedBy: [ oauth_2_0: {scopes: ['playlist-read-private']}]
      responses:
        200:
          body:
            application/json:
              schema: |
                {
                  "$schema": "http://json-schema.org/draft-03/schema",
                  "type": "array",
                  "items": {
                    "$ref": "schemas/playlist.json"
                  }
                }
  /albums:
    displayName: current-user-saved-albums
    type: collection
    get:
      is: [ paged ]
      description: |
        [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-read']}]
    put:
      description: |
        [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-modify']}]
      queryParameters:
        ids:
          displayName: Spotify Album IDs
          type: string
          description: A comma-separated list of IDs
          required: true
          example: '07bYtmE3bPsLB6ZbmmFi8d,48JYNjh7GMie6NjqYHMmtT,27cZdqrQiKt3IT00338dws'
    delete:
      description: |
        [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-modify']}]
      queryParameters:
        ids:
          displayName: Spotify Album IDs
          type: string
          description: A comma-separated list of IDs
          required: true
          example: '07bYtmE3bPsLB6ZbmmFi8d,48JYNjh7GMie6NjqYHMmtT,27cZdqrQiKt3IT00338dws'
    /contains:
      displayName: current-user-contains-saved-albums
      get:
        description: |
          [Check Current User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/)
        securedBy: [ oauth_2_0: {scopes: ['user-library-read']}]
        queryParameters:
          ids:
            displayName: Spotify Album IDs
            type: string
            description: A comma-separated list of IDs
            required: true
            example: '07bYtmE3bPsLB6ZbmmFi8d,48JYNjh7GMie6NjqYHMmtT,27cZdqrQiKt3IT00338dws'
  /tracks:
    displayName: current-user-saved-tracks
    type: collection
    get:
      is: [ paged ]
      description: |
        [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-read']}]
      queryParameters:
        market:
          displayName: Market
          description: The market (an ISO 3166-1 alpha-2 country code)
          type: string
          example: ES
          required: false
    put:
      description: |
        [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-modify']}]
      queryParameters:
        ids:
          displayName: Spotify Track IDs
          type: string
          description: A comma-separated list of IDs
          required: true
          example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
    delete:
      description: |
        [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-modify']}]
      queryParameters:
        ids:
          displayName: Spotify Track IDs
          type: string
          description: A comma-separated list of IDs
          required: true
          example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
    /contains:
      displayName: current-user-contains-saved-tracks
      get:
        description: |
          [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/)
        securedBy: [ oauth_2_0: {scopes: ['user-library-read']}]
        queryParameters:
          ids:
            displayName: Spotify Track IDs
            type: string
            description: A comma-separated list of IDs
            required: true
            example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
  /top/{type}:
    displayName: current-user-top-artists-and-tracks
    uriParameters:
      type:
        displayName: Type
        type: string
        description: The type of item.  "artists" or "tracks"
        example: artists
    get:
      is: [paged]
      description: |
        [Get User's Top Artists and Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/)
      securedBy: [ oauth_2_0: {scopes: ['user-top-read']}]
      queryParameters:
        time_range:
          displayName: Time Range
          type: string
          description: Over what timeframe are the affinities computed. "long-term", "medium-term" or "short-term"
          required: false
          default: medium-term
/users/{user_id}:
  displayName: users-profile
  uriParameters:
    user_id:
      displayName: User ID
      type: string
      description: The user's Spotify user ID.
      example: smedjan
  get:
    description: |
      [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/)
    securedBy: [ null, oauth_2_0: { scopes: []}]
/users/{user_id}/playlists:
  type: collection
  uriParameters:
    user_id:
      displayName: Owner ID
      type: string
      description: The user's Spotify user ID.
      example: jmperezperez
  displayName: playlists
  get:
    is: [ paged ]
    description: |
      [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/)
    securedBy: [ oauth_2_0: {scopes: ['playlist-read-private', 'playlist-read-collaborative']}]
    responses:
      200:
        body:
          application/json:
            schema: |
              {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "array",
                "items": {
                  "$ref": "schemas/playlist.json"
                }
              }
  post:
    description: |
      [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/)
    securedBy: [ oauth_2_0: {scopes: ['playlist-modify-public', 'playlist-modify-private']}]
    body:
      application/json:
        schema: !include schemas/post-playlist.json
        example: !include examples/post-playlist.json
    responses:
      201:
        body:
          application/json:
            schema: Playlist
  /{playlist_id}:
    type: item
    displayName: playlist
    uriParameters:
      playlist_id:
        displayName: Playlist ID
        description: The Spotify playlist ID.
        example: 3cEYpjA9oz9GiPac4AsH4n
        type: string
        required: true
    get:
      description: |
        [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/)
      securedBy: [ oauth_2_0: { scopes: []}]
      is: [ filterable ]
      queryParameters:
        market:
          displayName: Market
          description: The market (an ISO 3166-1 alpha-2 country code)
          type: string
          example: ES
          required: false
      responses:
        200:
          body:
            application/json:
              schema: Playlist
    put:
      description: |
        [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/)
      securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
      body:
        application/json:
          schema: !include schemas/put-playlist.json
          example: !include examples/put-playlist.json
    /tracks:
      type: collection
      displayName: playlist-tracks
      get:
        description: |
          [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/)
        securedBy: [ oauth_2_0: { scopes: []}]
        is: [ filterable, paged ]
        queryParameters:
          market:
            displayName: Market
            description: The market (an ISO 3166-1 alpha-2 country code)
            type: string
            example: ES
            required: false
      post:
        description: |
          [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
        queryParameters:
          position:
            displayName: Position (append by default)
            description: The position to insert the tracks, a zero-based index
            example: 0
            type: integer
            required: false
          uris:
            displayName: Spotify Track URIs
            description: A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.
            type: string
            required: true
            example: 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M'
      put:
        description: |
          [Reorder or replace a Playlist's Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
        body:
          application/json:
            schema: !include schemas/put-playlist-tracks.json
            example: !include examples/put-playlist-tracks.json
      delete:
        description: |
          [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
        body:
          application/json:
            schema: !include schemas/delete-playlist-tracks.json
            example: !include examples/delete-playlist-tracks.json
    /followers:
      displayName: playlist-followers
      put:
        description: |
          [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
        body:
          application/json:
            schema: |
              {
                "type": "object",
                "$schema": "http://json-schema.org/draft-03/schema",
                "id": "http://jsonschema.net",
                "required": false,
                "properties": {
                  "public": {
                    "type": "boolean",
                    "required": false
                  }
                }
              }
            example: !include examples/put-playlist-followers.json
      delete:
        description: |
          [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
      /contains:
        displayName: playlist-followers-contains
        get:
          description: |
            [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/)
          securedBy: [ oauth_2_0: { scopes: []}]
          queryParameters:
            ids:
              displayName: Spotify user IDs
              type: string
              description: A comma-separated list of users ids
              required: true
              example: 'jmperezperez,thelinmichael,wizzler'

/browse/new-releases:
  displayName: new-releases
  type: collection
  get:
    is: [ paged ]
    description: |
      [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/)
    securedBy: [ oauth_2_0: {scopes: []} ]
    queryParameters:
      country:
        displayName: Country
        description: The country (an ISO 3166-1 alpha-2 country code)
        type: string
        example: SE
        required: false
/browse/featured-playlists:
  displayName: featured-playlists
  type: collection
  get:
    is: [ paged ]
    description: |
      [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/)
    securedBy: [ oauth_2_0: {scopes: []} ]
    queryParameters:
      country:
        displayName: Country
        description: The country (an ISO 3166-1 alpha-2 country code)
        type: string
        example: SE
        required: false
      locale:
        displayName: Locale
        description: |
          The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
        type: string
        example: sv_SE
        required: false
      timestamp:
        displayName: Timestamp
        description: |
          A timestamp in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss) with the user's local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: "2014-10-23T09:00:00" for a user whose local time is 9AM.
        type: string
        example: '2014-10-23T09:00:00'
        required: false
/browse/categories:
  displayName: browse-categories
  type: collection
  get:
    description: |
      [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/)
    securedBy: [ oauth_2_0: {scopes: []} ]
    queryParameters:
      country:
        displayName: Country
        description: The country (an ISO 3166-1 alpha-2 country code)
        type: string
        example: SE
        required: false
      locale:
        displayName: Locale
        description: |
          The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
        type: string
        example: sv_SE
        required: false
      limit:
        displayName: Limit
        description: The maximum number of category objects to return
        type: integer
        example: 10
        minimum: 0
        default: 20
        maximum: 50
        required: false
      offset:
        displayName: Offset
        description: The index of the first category to return
        type: integer
        example: 5
        default: 0
        required: false
  /{category_id}:
    displayName: browse-category
    type: item
    uriParameters:
      category_id:
        displayName: Category ID
        type: string
        description: The Spotify ID of the category you wish to fetch.
        example: dinner
    get:
      description: |
        [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/)
      securedBy: [ oauth_2_0: {scopes: []} ]
      queryParameters:
        country:
          displayName: Country
          description: The country (an ISO 3166-1 alpha-2 country code)
          type: string
          example: SE
          required: false
        locale:
          displayName: Locale
          description: |
            The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
          type: string
          example: sv_SE
          required: false
    /playlists:
      displayName: category-playlists
      type: collection
      get:
        description: |
          [Get a Category's playlists](https://developer.spotify.com/web-api/get-categorys-playlists/)
        securedBy: [ oauth_2_0: {scopes: []} ]
        queryParameters:
          country:
            displayName: Country
            description: The country (an ISO 3166-1 alpha-2 country code)
            type: string
            example: SE
            required: false
          limit:
            displayName: Limit
            description: The maximum number of playlist objects to return
            type: integer
            example: 10
            minimum: 0
            default: 20
            maximum: 50
            required: false
          offset:
            displayName: Offset
            description: The index of the first playlist to return
            type: integer
            example: 5
            default: 0
            required: false
/me/following:
  displayName: following
  get:
    description: |
      [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed/)
    securedBy: [ oauth_2_0: {scopes: ['user-follow-read']} ]
    queryParameters:
      type:
        displayName: Item Type
        description: The type to unfollow (only artist is supported so far).
        type: string
        example: artist
        enum: ["artist"]
        required: true
      after:
        displayName: After
        description: The last artist ID retrieved from the previous request.
        type: string
        example: '0I2XqVXqHScXjHhk6AYYRe'
        required: false
      limit:
        displayName: Limit
        description: The maximum number of track objects to return
        type: integer
        example: 10
        minimum: 0
        default: 20
        maximum: 50
        required: false
  put:
    description: |
      [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/)
    securedBy: [ oauth_2_0: {scopes: ['user-follow-modify']} ]
    queryParameters:
      type:
        displayName: Item Type
        description: The type to follow.
        type: string
        example: artist
        enum: ["artist", "user"]
        required: true
      ids:
        displayName: Spotify IDs
        type: string
        description: A comma-separated list of the artists or users ids
        required: true
        example: '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'
  delete:
    description: |
      [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/)
    securedBy: [ oauth_2_0: {scopes: ['user-follow-modify']} ]
    queryParameters:
      type:
        displayName: Item Type
        description: The type to unfollow.
        type: string
        example: artist
        enum: ["artist", "user"]
        required: true
      ids:
        displayName: Spotify IDs
        type: string
        description: A comma-separated list of the artists or users ids
        required: true
        example: '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'
  /contains:
    displayName: following-contains
    get:
      description: |
        [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/)
      securedBy: [ oauth_2_0: {scopes: ['user-follow-read']} ]
      queryParameters:
        type:
          displayName: Item Type
          description: The type to follow.
          type: string
          example: artist
          enum: ["artist", "user"]
          required: true
        ids:
          displayName: Spotify IDs
          description: A comma-separated string of the artists or users ids.
          type: string
          example: '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'
          required: true
/audio-features:
  displayName: audio-features-several-tracks
  get:
    description: |
      [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/)
    securedBy: [ oauth_2_0: { scopes: []}]
    queryParameters:
      ids:
        displayName: Spotify Track IDs
        type: string
        description: A comma-separated list of IDs
        required: true
        example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
  /{id}:
    displayName: audio-features-track
    uriParameters:
      id:
        type: string
        displayName: Spotify Track ID
        example: 1zHlj4dQ8ZAtrayhuDDmkY
    get:
      description: |
        [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/)
      securedBy: [ oauth_2_0: { scopes: []}]
/audio-analysis/{id}:
  displayName: audio-analysis-track
  uriParameters:
      id:
        type: string
        displayName: Spotify Track ID
        example: 1zHlj4dQ8ZAtrayhuDDmkY
  get:
    description: |
      [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/)
    securedBy: [ oauth_2_0: { scopes: []}]
/recommendations:
  displayName: recommendations
  get:
    description: |
      [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/)
    securedBy: [ oauth_2_0: { scopes: []}]
    queryParameters:
      limit:
        type: integer
        example: 10
        minimum: 1
        default: 20
        maximum: 100
        required: false
        displayName: Limit
        description: The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response.
      market:
        displayName: Market
        description: The market (an ISO 3166-1 alpha-2 country code). Because min_*, max_* and target_* are applied to pools before relinking, the generated results may not precisely match the filters applied. Original, non-relinked tracks are available via the linked_from attribute of the relinked track response.
        type: string
        example: ES
        required: false
      seed_artists:
        displayName: Spotify Artist ID Seeds
        type: string
        description: A comma-separated list of Spotify Artist IDs
        required: false
        example: '4NHQUGzhtTLFvgF5SZesLK'
      seed_genres:
        displayName: Genres Seeds
        type: string
        description: A comma separated list of genres. See the endpoint for fetching the list of genres.
        required: false
        example: 'classical,country'
      seed_tracks:
        displayName: Spotify Track ID Seeds
        type: string
        description: A comma-separated list of Spotify Track IDs
        required: false
        example: '0c6xIDDpzE81m2q797ordA'
      min_acousticness:
        displayName: Min. Acousticness
        type: number
        description: Minimum acousticness
        required: false
        minimum: 0
        maximum: 1
      max_acousticness:
        displayName: Max. Acousticness
        type: number
        description: Maximum acousticness
        required: false
        minimum: 0
        maximum: 1
      target_acousticness:
        displayName: Target Acousticness
        type: number
        description: Target acousticness
        required: false
        minimum: 0
        maximum: 1
      min_danceability:
        displayName: Min. Danceability
        type: number
        description: Minimum danceability
        required: false
        minimum: 0
        maximum: 1
      max_danceability:
        displayName: Max. Danceability
        type: number
        description: Maximum danceability
        required: false
        minimum: 0
        maximum: 1
      target_danceability:
        displayName: Target Danceability
        type: number
        description: Target danceability
        required: false
        minimum: 0
        maximum: 1
      min_duration_ms:
        displayName: Min. Duration (ms)
        type: integer
        description: Minimum duration of the track (ms)
        required: false
      max_duration_ms:
        displayName: Max. Duration (ms)
        type: integer
        description: Maximum duration of the track (ms)
        required: false
      target_duration_ms:
        displayName: Target Duration (ms)
        type: integer
        description: Target duration of the track (ms)
        required: false
      min_energy:
        displayName: Min. Energy
        type: number
        description: Minimum energy
        required: false
        minimum: 0
        maximum: 1
      max_energy:
        displayName: Max. Energy
        type: number
        description: Maximum energy
        required: false
        minimum: 0
        maximum: 1
      target_energy:
        displayName: Target Energy
        type: number
        description: Target energy
        required: false
        minimum: 0
        maximum: 1
      min_instrumentalness:
        displayName: Min. Instrumentalness
        type: number
        description: Minimum instrumentalness
        required: false
        minimum: 0
        maximum: 1
      max_instrumentalness:
        displayName: Max. Instrumentalness
        type: number
        description: Maximum instrumentalness
        required: false
        minimum: 0
        maximum: 1
      target_instrumentalness:
        displayName: Target Instrumentalness
        type: number
        description: Target instrumentalness
        required: false
        minimum: 0
        maximum: 1
      min_key:
        displayName: Min. Key
        type: integer
        description: Minimum key
        required: false
        minimum: 0
        maximum: 11
      max_key:
        displayName: Max. Key
        type: integer
        description: Maximum key
        required: false
        minimum: 0
        maximum: 11
      target_key:
        displayName: Target Key
        type: integer
        description: Target key
        required: false
        minimum: 0
        maximum: 11
      min_liveness:
        displayName: Min. Liveness
        type: number
        description: Minimum liveness
        required: false
        minimum: 0
        maximum: 1
      max_liveness:
        displayName: Max. Liveness
        type: number
        description: Maximum liveness
        required: false
        minimum: 0
        maximum: 1
      target_liveness:
        displayName: Target Liveness
        type: number
        description: Target liveness
        required: false
        minimum: 0
        maximum: 1
      min_loudness:
        displayName: Min. Loudness
        type: number
        description: Minimum loudness
        required: false
      max_loudness:
        displayName: Max. Loudness
        type: number
        description: Maximum loudness
        required: false
      target_loudness:
        displayName: Target Loudness
        type: number
        description: Target loudness
        required: false
      min_mode:
        displayName: Min. Mode
        type: integer
        description: Minimum mode (Major is represented by 1 and minor is 0)
        required: false
        minimum: 0
        maximum: 1
      max_mode:
        displayName: Max. Mode
        type: integer
        description: Maximum mode (Major is represented by 1 and minor is 0)
        required: false
        minimum: 0
        maximum: 1
      target_mode:
        displayName: Target Mode
        type: integer
        description: Target mode (Major is represented by 1 and minor is 0)
        required: false
        minimum: 0
        maximum: 1
      min_popularity:
        displayName: Min. Popularity
        type: integer
        description: Minimum popularity
        required: false
        minimum: 0
        maximum: 100
      max_popularity:
        displayName: Max. Popularity
        type: integer
        description: Maximum popularity
        required: false
        minimum: 0
        maximum: 100
      target_popularity:
        displayName: Target Popularity
        type: integer
        description: Target popularity
        required: false
        minimum: 0
        maximum: 100
      min_speechiness:
        displayName: Min. Speechiness
        type: number
        description: Minimum speechiness
        required: false
        minimum: 0
        maximum: 1
      max_speechiness:
        displayName: Max. Speechiness
        type: number
        description: Maximum speechiness
        required: false
        minimum: 0
        maximum: 1
      target_speechiness:
        displayName: Target Speechiness
        type: number
        description: Target speechiness
        required: false
        minimum: 0
        maximum: 1
      min_tempo:
        displayName: Min. Tempo
        type: number
        description: Minimum tempo (BPM)
        required: false
      max_tempo:
        displayName: Max. Tempo
        type: number
        description: Maximum tempo (BPM)
        required: false
      target_tempo:
        displayName: Target Tempo
        type: number
        description: Target tempo (BPM)
        required: false
      min_time_signature:
        displayName: Min. Time Signature
        type: integer
        description: Minimum time signature
        required: false
        maximum: 11
      max_time_signature:
        displayName: Max. Time Signature
        type: integer
        description: Maximum time signature
        required: false
      target_time_signature:
        displayName: Target Time Signature
        type: integer
        description: Target time signature
        required: false
      min_valence:
        displayName: Min. Valence
        type: number
        description: Minimum valence
        required: false
        minimum: 0
        maximum: 1
      max_valence:
        displayName: Max. Valence
        type: number
        description: Maximum valence
        required: false
        minimum: 0
        maximum: 1
      target_valence:
        displayName: Target Valence
        type: number
        description: Target valence
        required: false
        minimum: 0
        maximum: 1
  /available-genre-seeds:
    displayName: available-genre-seeds
    get:
      description: |
        [Get Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds)
      securedBy: [ oauth_2_0: { scopes: []}]