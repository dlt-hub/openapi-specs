---
openapi: 3.0.0
info:
  description: |
    <br/>
    <strong>CryptAPI.io is a cryptocurrency payment API</strong>

    It is designed with the intent to allow you to integrate multiple coin payments in your service with the least effort possible.

    There are no sign-ups, lengthy implementations or API keys required, it is as easy as a simple CURL request to create a new payment address.

    The only thing required is that you implement the logic on your server to handle the <a href="#tag/Callbacks"><code>callbacks</code></a> sent to your server when the transaction from the client is confirmed.
  version: v3.3.7
  title: CryptAPI.io - Payment API Documentation
  contact:
    email: info@cryptapi.io
  x-logo:
    url: https://cryptapi.io/static/assets/images/300_logo_ca.png
servers:
- url: https://api.cryptapi.io
tags:
- name: Receive a Payment
  description: 'These endpoints provide a convenient way to generate unique payment
    addresses for every transaction. By using these endpoints, you can easily keep
    track of and manage your payments in a more efficient manner.

    '
- name: Utils
  description: 'Utilities that give useful information.

    '
- name: Callbacks
  description: "These callbacks are dispatched by our API to your platform when a
    user sends a payment to the address generated by our system. \nYour platform should
    be ready to handle these callbacks which are requests made to the URL provided
    in the <a href=\"https://docs.cryptapi.io/#operation/create!in=query&path=callback&t=request\">```callback```</a>
    parameter.\n\nEach callback is sent with an additional header, `x-ca-signature`.
    \nThis is a base64-encoded 1024-bit RSA-SHA256 signature of the callback. \nThe
    specific data signed depends on the type of callback you're receiving. \nFor callbacks
    sent via GET, the entire request URL to your system (including all GET parameters)
    is signed. \nIf the callback is sent via POST, then the entire body of the request
    is signed. \nThe `Public Key` for verification can be retrieved from this <a href=\"https://api.cryptapi.io/pubkey/\"
    target=\"_blank\">this endpoint</a>.\n\n**<a href=\"https://support.cryptapi.io/article/how-to-verify-the-callback-signature\"
    target=\"_blank\">Check our knowledge base to learn how to verify the callback
    with code samples.</a>**\n\nCryptAPI will stop sending callbacks under one of
    these two circumstances:\n  * If the your system responds with an `*ok*` message
    or an HTTP 200 status code, indicating that the callback has been **successfully
    received and processed**.\n  * In case your system **fails to response successfully**
    to the callback, our API will retry sending the callback in a specific timing.
    Regarding the timing of these callbacks, we employ an exponential backoff strategy.
    Initially, the system waits for 6 minutes before making the first retry attempt.
    With each subsequent attempt, this wait time doubles, hence increasing the time
    between attempts in an exponential manner until the transaction is older than
    3 days.\n\nEvery time funds are received in a generated address, callbacks are
    sent. If you are experiencing difficulties receiving our callbacks, it could be
    attributed to the following reasons:\n  * Incorrect Token Sent: It is possible
    that you sent the wrong token to the address. For instance, if you created a USDt
    transaction but mistakenly sent TRX to the address, our system would disregard
    the transaction.\n  * Unreachable Callback URL: The callback URL you provided
    in the <code>callback</code> parameter may not be accessible online. It is essential
    to ensure that the URL is reachable and functional.\n  * Security System Interference:
    Your platform might have a security system, such as Cloudflare protection, in
    place. This security system could be preventing our callbacks from reaching your
    platform. \n\n**Note:** To avoid any issues with the callbacks, we strongly recommend
    whitelisting our server IPs. The IPs that should be whitelisted are: `145.239.119.223`
    and `135.125.112.47`\n"
paths:
  "/{ticker}/create/":
    get:
      tags:
      - Receive a Payment
      summary: Create New Address
      description: |
        This method is used to generate a new address to give your clients, where they can send payments.

        **Please make sure when sending a transaction you <a href="https://cryptapi.io/cryptocurrencies/" target="_blank">consult the minimum transfer value</a> for the crypto/token you wish to use. If the value you send is bellow our minimums, CryptAPI will ignore the transaction.**

        Before delving into the documentation, why not check if the <a href="https://cryptapi.io/libraries/" target="_blank">libraries</a> already have the functionality you need? It could save you time and effort in the long run!

        **Notice:** The length of this request can't surpass the ```8192``` characters!
      operationId: create
      parameters:
      - in: path
        name: ticker
        description: |
          <br/>
          The <code>ticker</code> parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain.

          For instance, the ticker for Bitcoin is <code>btc</code>, and the ticker for USDT over TRC-20 is <code>trc20/usdt</code>. With this in mind, a request for USDT over TRC-20 would look like this: <code>api.cryptapi.io/trc20/usdt/create/</code>

          **Notes:**
            * Currently supported cryptocurrencies/tokens can be checked on the **<a href="https://cryptapi.io/cryptocurrencies/" target="_blank">cryptocurrencies</a> page**.
        required: true
        example: btc
        schema:
          type: string
      - in: query
        name: callback
        description: "<br/>\nThe URL where the callbacks will be sent to. Must be
          a valid URL.\n\n **Notes:** \n  * The callback URL is a unique identifier
          that is used to generate a new <a href=\"#operation/create!c=200&path=address_in&t=response\">`address_in`</a>.
          You can make your callback URL unique by adding `GET` parameters, such as
          `?user_id=1234`. These will also be returned in the <a href=\"#tag/Callbacks\">callbacks</a>.\n
          \ * You can reuse callback URLs if you want to create a reusable deposit
          <a href=\"#operation/create!c=200&path=address_in&t=response\">`address_in`</a>.
          However, if you change the <a href=\"#operation/create!in=query&path=address&t=request\"><code>address</code></a>,
          CryptAPI systems will not change the `address_out`. You will need to change
          your callback URL to generate a new <a href=\"#operation/create!c=200&path=address_in&t=response\">`address_in`</a>.\n
          \ * We advise you to URL encode the callback URL so that the `GET` parameters
          are not lost.\n  * `GET` parameters that you add to the callback URL will
          be sent as `GET`, even if you enable the <a href=\"#operation/create!in=query&path=post&t=request\">`post`</a>
          parameter.\n  * It is advisable to store the callback URL when creating
          a new payment <a href=\"#operation/create!c=200&path=address_in&t=response\">`address_in`</a>
          if you want to use the <a href=\"#operation/logs\">logs</a> endpoint later.\n
          \ * For more information on callbacks, please refer to our <a href=\"#tag/Callbacks\">callback</a>
          documentation.\n"
        required: true
        schema:
          type: string
      - in: query
        name: address
        required: true
        description: "<br/>\nAddress(es) where the payment will be forwarded to.\n\nIf
          using multiple addresses (you may use up to <code>20</code> addresses),
          you must use the following format `percentage_1@address_1|percentage_2@address_2`.
          Percentages are set from 0.0001 (0.01%) to 1.0 (100%) and must add up to
          1.00 (100%).\n\nAddresses must be valid for the ticker you are using. Otherwise,
          the API will reject the payment. For example, if you try to use a Bitcoin
          address while requesting a USDT TRC-20 address, <strong>the API will throw
          an error</strong>.\n\n**Notes:** \n  * For multiple addresses the minimum
          value per transaction (**<a href='https://cryptapi.io/cryptocurrencies/'
          target='blank'>see cryptocurrencies page</a>**) is multiplied by the following
          formula: `1 + (N - 1) / 3`, where **N** is the number of output addresses.\n
          \ * Check our <a href=\"https://support.cryptapi.io/article/multi-address-minimums\"
          target=\"_blank\">knowledge base</a> for more information about **multi-address
          minimums**.\n"
        example: bc1qhfn0lw2kdu6umgf08x54y0ha7wclsj3g5sp6t3
        schema:
          type: string
      - in: query
        name: pending
        description: "<br/>\nSet the parameter to<code>pending=1</code> to enable
          this feature. When enabled you will be notified of pending transactions
          (were sent by the customer but not yet confirmed by the blockchain).\n\n**Notes:**
          \n  * To avoid receiving multiple callback requests, please ensure that
          the response to the callback request is a plain text response with the message
          <code>*ok*</code>.\n  * For a comprehensive list of fields sent by CryptAPI,
          please refer to our <a href=\"#operation/pendingcallbackget\">pending callback</a>
          documentation.\n"
        required: false
        example: 1
        schema:
          type: integer
          default: 0
      - in: query
        name: confirmations
        description: |
          <br/>
          To determine the number of blockchain confirmations required before receiving the <a href="#operation/confirmedcallbackget">confirmed callback</a>, you need to specify the desired value.<br/>
          Min: <code>1</code>
        required: false
        example: 3
        schema:
          type: integer
          default: 1
      - in: query
        name: email
        description: "<br/>\nE-mail address to receive payment notifications\n\n**Notes:**
          \n  * Before getting e-mail payment notifications, <strong>you must confirm
          your e-mail address</strong> <a href='https://cryptapi.io/confirm_email/'
          target='_blank'>here</a>.\n"
        required: false
        example: info@cryptapi.io
        schema:
          type: string
      - in: query
        name: post
        description: "<br/> \nSet this to <code>post=1</code> to enable this feature.
          When enabled callback will be sent as <code>POST</code>.\n\nWhen disabled,
          will default to <code>GET</code>.\n\n**Notes**:\n  * <code>GET</code> parameters
          you added to the <a href=\"#operation/create!in=query&path=callback&t=request\">```callback```</a>
          URL will still be sent as <code>GET</code>.\n"
        required: false
        example: 1
        schema:
          type: integer
          default: 0
      - in: query
        name: json
        description: "<br/> \nSet this to <code>json=1</code> to enable. If enabled
          the callback body will be sent as <code>JSON</code>.\n\nIf disabled, will
          default to <code>GET</code>.\n\n**Notes**:\n  * <code>GET</code> parameters
          you added to the <a href=\"#operation/create!in=query&path=callback&t=request\"><code>callback</code></a>
          URL will still be sent as <code>GET</code>.\n"
        required: false
        example: 1
        schema:
          type: integer
          default: 0
      - in: query
        name: priority
        description: "<br/>\nProvides you with the ability to specify for forwarding
          funds to the designated <a href=\"#operation/create!in=query&path=address&t=request\"><code>address</code></a>.
          \nIt determines the level of fees paid to the blockchain network and can
          impact the speed at which the transaction is confirmed.             \n\n**Notes:**\n
          \ * This feature is only supported when using Bitcoin, Ethereum/ERC-20,
          and Litecoin. Priorities are different per currency/network.\n  * The priorities
          applicable to each specific blockchain can be found in our <a href=\"https://support.cryptapi.io/article/how-the-priority-parameter-works\"
          target=\"_blank\">knowledge base</a>.\n"
        required: false
        example: fast
        schema:
          type: string
          default: default
      - in: query
        name: multi_token
        description: "<br/>\nThis feature allows customers to make payments using
          any token supported by the CryptAPI, even if the token differs from the
          one initially specified by the user.\n\nHowever, it is important to ensure
          that your Wallet supports the tokens you expect customers to pay with, and
          that your system can handle price conversions. \nFor instance, if a customer
          wants to receive 1000 USDT (or its equivalent), but a client sends 1000
          TRX, your system should be able to handle this scenario.\n\n**Notes:**\n
          \ * Prior to enabling this parameter, make sure that the wallet you are
          using supports all the tokens supported by CryptAPI.\n  * If you are using
          a deposit address from your preferred exchange to receive funds, <strong>it
          is advisable to leave this parameter disabled</strong>. This is because
          deposit addresses may sometimes differ between blockchains and tokens.\n
          \ * By default, this parameter is disabled. To enable it, use the value
          <strong>multi_token=1</strong>.\n  * This feature is only available for
          TRC-20, and EVM-based blockchains.\n  * If this parameter is disabled and
          the customer sends a different token than the one initially specified, CryptAPI
          will ignore those funds.\n  * On unsupported blockchains, if this parameter
          is enabled, <strong>the API will not throw an error</strong>. Instead, it
          will simply ignore it.\n  * For more information about this parameter, please
          refer to our <a href=\"https://support.cryptapi.io/article/how-the-multi_token-parameter-works\"
          target=\"_blank\">knowledge base</a>.\n"
        required: false
        example: 1
        schema:
          type: integer
          default: 0
      - in: query
        name: multi_chain
        example: 1
        description: "<br/>\nThis parameter is specifically designed for Ethereum/ERC-20
          and EVM-Compatible blockchains. Currently, the EVM-Compatible blockchains
          supported by CryptAPI are BSC (BEP-20) and POLYGON.\n\nThis functionality
          is possible because these blockchains share the same address type, such
          as <code>0xA6B78B56ee062185E405a1DDDD18cE8fcBC4395d</code>. \nWallets like
          Trust Wallet or Exodus Wallet that support these blockchains typically provide
          the same address for each chain. \nThis means that if you receive funds,
          regardless of which blockchain they were sent through (Ethereum/ERC-20 or
          EVM-Compatible), your wallet will be able to handle them.\n\nBy enabling
          this parameter, CryptAPI will process the funds if they are received in
          the designated address on any of these supported blockchains. \nHowever,
          it is important to note that CryptAPI must also support the specified token
          on the respective blockchains. \nFor example, if the token is USDT, which
          is supported on all blockchains, and the customer was supposed to send it
          Ethereum/ERC-20, but sent it on POLYGON, CryptAPI will still process the
          transaction.            \n\nIf you want CryptAPI to process any token sent
          by the customer, you must enable the <a href=\"#operation/create!in=query&path=multi_token&t=request\"><code>multi_token</code></a>.\n\n**Notes:**\n
          \ * Before enabling this parameter, ensure that the wallet you are using
          supports all the tokens and blockchains supported by CryptAPI.\n  * If you
          are using a deposit address from your preferred exchange to receive funds,
          <strong>it is advisable to leave this parameter disabled</strong>. This
          is because deposit addresses may sometimes differ between blockchains and
          tokens.\n  * This parameter is only available for EVM-based blockchains
          (eg. ERC20, BEP20, Polygon).\n  * By default, this parameter is disabled.
          To enable it, use the value <strong>multi_chain=1</strong>.\n  * On unsupported
          blockchains, if this parameter is enabled, <strong>the API will not throw
          an error</strong>. Instead, it will simply ignore it.\n  * For more information
          about this parameter, please refer to our <a href=\"https://support.cryptapi.io/article/how-the-multi_chain-parameter-works\"
          target=\"_blank\">knowledge base</a>.\n"
        required: false
        deprecated: true
        schema:
          type: integer
          default: 0
      - in: query
        name: convert
        description: "<br/>\nWhen enabled, returns the converted value converted to
          FIAT in the callback, \nwith the parameters <a href=\"#operation/confirmedcallbackget!in=query&path=value_coin_convert&t=request\"><code>value_coin_convert</code></a>
          \nand <a href=\"#operation/confirmedcallbackget!in=query&path=value_forwarded_coin_convert&t=request\"><code>value_forwared_coin_convert</code></a>.\n\n**Notes:**\n
          \ * By default, this parameter is disabled. To enable it, use <code>convert=1</code>.\n
          \ * The value of the fields are json-encoded.\n"
        required: false
        example: 1
        schema:
          type: integer
          default: 0
      responses:
        '200':
          description: Address was created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/create"
        '400':
          description: Error creating address
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/{ticker}/logs/":
    get:
      tags:
      - Receive a Payment
      summary: Check Payment Logs
      description: |
        <br/>
        This method provides valuable information and callbacks for addresses that are created through the <a href="#operation/create"><code>create</code></a> endpoint.

        It allows users to retrieve a list of callbacks made at the specified <a href="#operation/logs!c=200&path=callbacks&t=response"><code>callbacks</code></a> parameter, allows to track payment activity and troubleshoot any issues that may arise.
      operationId: logs
      parameters:
      - in: path
        name: ticker
        description: |
          <br/>
          The <code>ticker</code> parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain.

          For instance, the ticker for Bitcoin is <code>btc</code>, and the ticker for USDT over TRC-20 is <code>trc20/usdt</code>. With this in mind, a request for USDT over TRC-20 would look like this: <code>api.cryptapi.io/trc20/usdt/create/</code>

          **Notes:**
            * Currently supported cryptocurrencies/tokens can be checked on the **<a href="https://cryptapi.io/cryptocurrencies/" target="_blank">cryptocurrencies</a> page**.
        required: true
        example: btc
        schema:
          type: string
      - in: query
        name: callback
        description: "<br/>\nThe URL of the callback. Must match the callback URL
          provided during the payment creation process.\n\n**Notes:** \n  * It is
          recommended to store the <code>callback</code> URL when creating a new payment
          address if you plan to use this endpoint later.\n  * It is advisable to
          URL encode the <code>callback</code> URL when making the request. However,
          if you are using one of our libraries, there is no need for URL encoding.\n"
        required: true
        example: https://example.com?user_id=1124
        schema:
          type: string
      responses:
        '200':
          description: List of payments sent to this callback.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/logs"
        '400':
          description: Your request couldn't be processed, please try again later
        '404':
          description: No request or no payment callbacks found
  "/info/":
    get:
      tags:
      - Utils
      summary: Service Information
      description: 'Endpoint that provides information regarding CryptAPI Service
        (e.g supported blockchains, cryptocurrencies and tokens).

        '
      operationId: cryptapiinfo
      parameters:
      - in: query
        name: prices
        description: |
          <br/>
          Enable if you want to receive also the coin prices, by setting <code>prices=1</code>.
        required: false
        example: 1
        schema:
          type: integer
          default: 0
      responses:
        '200':
          description: Info fetched successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/cryptapi-info"
  "/{ticker}/info/":
    get:
      tags:
      - Utils
      summary: Check Coin Information
      description: 'This endpoint is used to fetch information of the cryptocurrency/token
        you provided in the <a href="#operation/info!in=path&path=ticker&t=request"><code>ticker</code></a>
        parameter.

        '
      operationId: info
      parameters:
      - in: path
        name: ticker
        description: |
          <br/>
          The <code>ticker</code> parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain.

          For instance, the ticker for Bitcoin is <code>btc</code>, and the ticker for USDT over TRC-20 is <code>trc20/usdt</code>. With this in mind, a request for USDT over TRC-20 would look like this: <code>api.cryptapi.io/trc20/usdt/create/</code>

          **Notes:**
            * Currently supported cryptocurrencies/tokens can be checked on the **<a href="https://cryptapi.io/cryptocurrencies/" target="_blank">cryptocurrencies</a> page**.
        required: true
        example: btc
        schema:
          type: string
      - in: query
        name: prices
        description: |
          <br/>
          Enable if you want to receive also the coin prices, by setting <code>prices=1</code>.
        required: false
        schema:
          type: integer
          default: 1
      responses:
        '200':
          description: Info fetched successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/info"
        '400':
          description: Error fetching info.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/{ticker}/qrcode/":
    get:
      tags:
      - Utils
      operationId: qrcode
      summary: Generate QR Code
      description: 'This method generates a base64-encoded QR Code image for payments.

        '
      parameters:
      - in: path
        name: ticker
        description: |
          <br/>
          The <code>ticker</code> parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain.

          For instance, the ticker for Bitcoin is <code>btc</code>, and the ticker for USDT over TRC-20 is <code>trc20/usdt</code>. With this in mind, a request for USDT over TRC-20 would look like this: <code>api.cryptapi.io/trc20/usdt/create/</code>

          **Notes:**
            * Currently supported cryptocurrencies/tokens can be checked on the **<a href="https://cryptapi.io/cryptocurrencies/" target="_blank">cryptocurrencies</a> page**.
        required: true
        example: btc
        schema:
          type: string
      - in: query
        name: address
        description: |
          <br/>
          The payment address (<a href="#operation/create!c=200&path=address_in&t=response"><code>address_in</code></a> from our system).
        required: true
        schema:
          type: string
      - in: query
        name: value
        description: "<br/>\nValue to request the user. Not mandatory and can be left
          empty.\n\n**Notes:** \n  * If the value is left empty, the resulting QR
          code will only contain the address.\n  * It's worth noting that the `value`
          parameter might not work in most exchanges and some wallets (works with
          Trust and Exodus wallets). Some user wallets or exchanges will only read
          the address and will not process the value field (usually they paste the
          address and amount in the address field, causing confusion to the customer).
          Therefore, **it is recommended to use the value field at your own discretion**.\n"
        required: false
        schema:
          type: integer
      - in: query
        name: size
        description: |
          <br/>
          Size of the QR Code image in pixels.<br>
          Min: <code>64</code><br>
          Max: <code>1024</code>
        required: false
        example: 300
        schema:
          type: integer
          default: 512
      responses:
        '200':
          description: The QR Code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: |
                      <br/>
                      Status of the request. Should be <code>success</code> if the request didn't fail.
                    example: success
                  qr_code:
                    type: string
                    example: "..."
                    description: "<br/>\nBase64-encoded image of the QR Code. \n\nHere
                      is an example of how to use this:<br/>\n```html\n<img src=\"data:image/png;base64,{qr_code}\"
                      alt=\"Payment QR Code\"/>\n```\n\nYou may use it in every situation
                      where is supported, just don't forget to add <code>data:image/png;base64,</code>
                      before the <code>qr_code</code>.\n"
                  payment_uri:
                    type: string
                    example: "..."
                    description: |
                      <br/>
                      Payment URI useful if you want to make a clickable button.
  "/{ticker}/estimate/":
    get:
      tags:
      - Utils
      operationId: estimate
      summary: Estimate Blockchain Fees
      description: |
        <br/>
        This method allows you to estimate blockchain fees to process a transaction.

        **Notes:**
          * This is an **estimation** only, and might change significantly when the transaction is processed. CryptAPI
          is not responsible if blockchain fees when forwarding the funds differ from this estimation.
          * These not include CryptAPI's fees.
      parameters:
      - in: path
        name: ticker
        description: |
          <br/>
          The <code>ticker</code> parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain.

          For instance, the ticker for Bitcoin is <code>btc</code>, and the ticker for USDT over TRC-20 is <code>trc20/usdt</code>. With this in mind, a request for USDT over TRC-20 would look like this: <code>api.cryptapi.io/trc20/usdt/create/</code>

          **Notes:**
            * Currently supported cryptocurrencies/tokens can be checked on the **<a href="https://cryptapi.io/cryptocurrencies/" target="_blank">cryptocurrencies</a> page**.
        required: true
        example: btc
        schema:
          type: string
      - in: query
        name: addresses
        description: |
          <br/>
          The number of addresses to forward the funds to. Should be the same you set in the <a href="#operation/create!in=query&path=address&t=request"><code>address</code></a> parameter.

          **Notes:**
            * Blockchain fees will increase with the number of addresses.
        required: false
        example: 3
        schema:
          type: integer
          default: 1
      - in: query
        name: priority
        description: "<br/>\nThis parameter enables you to specify the priority for
          forwarding funds to the given <strong>address</strong>. \nIt determines
          the level of fees paid to the blockchain network and can impact the speed
          of transaction confirmation. \nIt's important to note that the priority
          value varies depending on the currency/network.\n\n**Notes:**\n  * You can
          refer to our <a href=\"https://support.cryptapi.io/article/how-the-priority-parameter-works\"
          target=\"_blank\">knowledge base</a> to find the specific priorities to
          use with this endpoint for each blockchain.\n  * This feature is supported
          only when utilizing Bitcoin, Ethereum/ERC-20, and Litecoin.\n"
        required: false
        example: fast
        schema:
          type: string
          default: default
      responses:
        '200':
          description: Estimated cost.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/estimate"
        '400':
          description: Your request couldn't be processed, please try again later
  "/{ticker}/convert/":
    get:
      tags:
      - Utils
      operationId: convert
      summary: Convert Prices
      description: |-
        This method allows for seamless conversion of prices between FIAT currencies and cryptocurrencies, as well as between different cryptocurrencies.
        **Note:**
          * Prices are fetched every 5 minutes from CoinMarketCap.
      parameters:
      - in: path
        name: ticker
        description: |
          <br/>
          The <code>ticker</code> parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain.

          For instance, the ticker for Bitcoin is <code>btc</code>, and the ticker for USDT over TRC-20 is <code>trc20/usdt</code>. With this in mind, a request for USDT over TRC-20 would look like this: <code>api.cryptapi.io/trc20/usdt/create/</code>

          **Notes:**
            * Currently supported cryptocurrencies/tokens can be checked on the **<a href="https://cryptapi.io/cryptocurrencies/" target="_blank">cryptocurrencies</a> page**.
        required: true
        example: btc
        schema:
          type: string
      - in: query
        name: value
        description: |
          <br/>
          The value that you intend to convert, using the cryptocurrency or token associated with the ticker you are utilizing.
        required: true
        example: 10
        schema:
          type: number
      - in: query
        name: from
        description: |
          Specify the type of currency you wish to convert, whether it is a FIATs currency or a cryptocurrency.

          For a complete list of the cryptocurrencies we support, please refer to our **<a href="https://cryptapi.io/cryptocurrencies/" target="_blank">cryptocurrencies</a>** page.

          In case your desired FIAT currency is not included in the list of supported currencies, please don't hesitate to <a href="https://cryptapi.io/contacts/" target="_blank">reach out to us</a> so that we can add it to our service:
            - (USD) United States Dollar
            - (EUR) Euro
            - (GBP) Great Britain Pound
            - (CAD) Canadian Dollar
            - (JPY) Japanese Yen
            - (AED) UAE Dollar
            - (MYR) Malaysian Ringgit
            - (IDR) Indonesian Rupiah
            - (THB) Thai Baht
            - (CHF) Swiss Franc
            - (SGD) Singapore Dollar
            - (RUB) Russian Ruble
            - (ZAR) South African Rand
            - (TRY) Turkish Lira
            - (LKR) Sri Lankan Rupee
            - (RON) Romanian Leu
            - (BGN) Bulgarian Lev
            - (HUF) Hungarian Forint
            - (CZK) Czech Koruna
            - (PHP) Philippine Peso
            - (PLN) Poland Zloti
            - (UGX) Uganda Shillings
            - (MXN) Mexican Peso
            - (INR) Indian Rupee
            - (HKD) Hong Kong Dollar
            - (CNY) Chinese Yuan
            - (BRL) Brazilian Real
            - (DKK) Danish Krone
            - (TWD) New Taiwan Dollar
            - (AUD) Australian Dollar
            - (NGN) Nigerian Naira
            - (SEK) Swedish Krona
            - (NOK) Norwegian Krone
        required: true
        example: usd
        schema:
          type: string
      responses:
        '200':
          description: The value converted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  value_coin:
                    type: number
                    example: '0.01'
                    description: Converted value for the selected currencies.
                  exchange_rate:
                    type: number
                    example: '47000'
                    description: The exchange rate between the 2 currencies.
                  status:
                    type: string
                    description: Status of the request.
                    example: success
        '400':
          description: Your request couldn't be processed, please try again later
x-webhooks:
  pending-callback:
    get:
      tags:
      - Callbacks
      operationId: pendingcallbackget
      summary: Pending Callback
      description: "Callback issued when a client's transaction is pending confirmation.\n\n**Notes:**
        \n  * Only issued if you have requested to be notified of pending transactions.
        Only sent when <code>post</code> parameter is set to <code>1</code>, when
        creating a new address.\n  * Sent via <code>POST</code> if <a href=\"#operation/create!in=query&path=post&t=request\"><code>post=1</code></a>
        parameter set, else sent via <code>GET</code>.\n"
      parameters:
      - in: query
        name: uuid
        description: |
          <br/>
          This is an unique identifier to each payment your clients have made, so you can easily track any duplicate callbacks sent, in the case our system doesn't mark the callback as successful
        example: dbfcb40e-5a6b-4305-9fa2-b0fbda6e3ff2
        schema:
          type: string
      - in: query
        name: address_in
        description: |
          <br/>
          Address generated by CryptAPI, where your customer sent the payment.
        example: 14PqCsA7KMgseZMPwg6mJy754MtQkrgszu
        schema:
          type: string
      - in: query
        name: address_out
        description: |
          <br/>
          Address(es) where CryptAPI forwarded the payment.
        example: |
          1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP (single address)<br/>
          {1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP: 0.70, 1PE5U4temq1rFzseHHGE2L8smwHCyRbkx3: 0.30} (multiple addresses)
        schema:
          type: string
      - in: query
        name: txid_in
        description: |
          <br/>
          Transaction hash of your customer's payment.
        example: a2174ffd39289100709f2a07b129cdbba69df2e22e5be1830221dab1fd4e332c
        schema:
          type: string
      - in: query
        name: confirmations
        description: |
          <br/>
          Number of confirmations of the current transaction.
        example: 1
        schema:
          type: integer
      - in: query
        name: value
        description: |
          <br/>
          Value of the payment in integer.

          **Notes**
            * For some stable coins (e.g USDT or BUSD), this field always come rounded to 'cents' (two decimals), meaning you must always divide it by 100. Example: If `value=1054`, 1054/100=10.54.
            * It's recommended to use the <a href="#operation/pendingcallbackget!in=query&path=value_coin&t=request"><code>value_coin</code></a> field instead.
            * Field meant to help with precise calculations on some programming languages.
        example: 50000
        deprecated: true
        schema:
          type: integer
      - in: query
        name: value_coin
        description: |
          <br/>
          This is the payment amount sent by your customer prior to deducting any fees.

          **Note:**
            * To get the amount after fees you should use this parameter: <a href="#operation/confirmedcallbackget!in=query&path=value_forwarded_coin&t=request"><code>value_forwarded_coin</code></a>
        example: 0.05
        schema:
          type: number
      - in: query
        name: value_coin_convert
        description: "<br/>\nConverted value to various FIAT currencies of the <a
          href=\"#operation/pendingcallbackget!in=query&path=value_coin&t=request\"><code>value_coin</code></a>.\n\n**Notes:**
          \n  * This parameter will only be shown if added the <code>convert=1</code>
          parameter in the <a href=\"#operation/create\">/create/</a> endpoint.\n
          \ * Response is json-encoded.\n"
        example: '{"USD": "3.20", "EUR": "3.05", "GBP": "2.62", "CAD": "4.16", "JPY":
          "431.90", "AED": "11.77", "DKK": "22.67", "BRL": "16.52", "CNY": "21.43",
          "HKD": "25.16", "INR": "249.97", "MXN": "64.95", "UGX": "11975.46", "PLN":
          "14.25", "PHP": "173.14", "CZK": "75.37", "HUF": "1220.10", "BGN": "5.94",
          "RON": "15.02", "LKR": "1153.30", "TRY": "55.54", "ZAR": "51.36", "RUB":
          "181.24"}'
        schema:
          type: string
      - in: query
        name: coin
        description: |
          <br/>
          Ticker of the coin used for the payment: ['btc', 'bch', 'ltc'', 'eth', 'trx']

          For ERC-20 (ETH) Tokens, this parameter will be `erc20_` + the ticker of the token, e.g `erc20_usdt`

          For TRC-20 (Tron) Tokens, this parameter will be `trc20_` + the ticker of the token, e.g `trc20_usdt`

          For BEP-20 (BSC) Tokens, this parameter will be `bep20_` + the ticker of the token, e.g `bep20_usdt`

          For Polygon Tokens, this parameter will be `polygon_` + the ticker of the token, e.g `polygon_usdt`
        example: btc
        schema:
          type: string
      - in: query
        name: price
        description: |
          <br/>
          Coin price in USD at the time of the callback.
        example: 55.59
        schema:
          type: number
      - in: query
        name: pending
        description: |
          <br/>
          Being the pending callback, this value should be <code>1</code>.
        example: 1
        schema:
          type: integer
      responses:
        '200':
          description: Expected response from your server.
          content:
            text/plain:
              example: "*ok*"
              schema:
                type: string
  confirmed-callback:
    get:
      tags:
      - Callbacks
      operationId: confirmedcallbackget
      summary: Confirmed Callback
      description: 'Callback issued when a client''s transaction has been confirmed
        by the network.

        '
      parameters:
      - in: query
        name: uuid
        description: |
          <br/>
          This is an unique identifier to each payment your clients have made, so you can easily track any duplicate callbacks sent, in the case our system doesn't mark the callback as successful.
        example: dbfcb40e-5a6b-4305-9fa2-b0fbda6e3ff2
        schema:
          type: string
      - in: query
        name: address_in
        description: |
          <br/>
          Address generated by CryptAPI, where your customer sent the payment.
        example: 14PqCsA7KMgseZMPwg6mJy754MtQkrgszu
        schema:
          type: string
      - in: query
        name: address_out
        description: |
          <br/>
          Address(es) where CryptAPI forwarded the payment.
        example: |
          1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP (single address)<br/>
          {1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP: 0.70, 1PE5U4temq1rFzseHHGE2L8smwHCyRbkx3: 0.30} (multiple addresses)
        schema:
          type: string
      - in: query
        name: txid_in
        description: |
          <br/>
          Transaction hash of your customer's payment.
        example: a2174ffd39289100709f2a07b129cdbba69df2e22e5be1830221dab1fd4e332c
        schema:
          type: string
      - in: query
        name: txid_out
        description: |
          <br/>
          Transaction hash of the payment forwarded to your address(es) by CryptAPI.
        example: a2174ffd39289100709f2a07b129cdbba69df2e22e5be1830221dab1fd4e332c
        schema:
          type: string
      - in: query
        name: confirmations
        description: |
          <br/>
          Number of blockchain confirmations of the current transaction.

          **Notes:**
            * This parameter will only appear in the confirmed callback.
        example: 1
        schema:
          type: integer
      - in: query
        name: fee
        description: |
          CryptAPI fee in integer. Field meant to help with precise calculations on some platforms.

          **Notes:**
            * Field meant to help with precise calculations on some programming languages.
        example: 500
        deprecated: true
        schema:
          type: integer
      - in: query
        name: value
        description: |
          Value of the payment in integer.

          **Notes**
            * Field meant to help with precise calculations on some programming languages.
            * It's recommended to use the <a href="#operation/confirmedcallbackget!in=query&path=value_coin&t=request"><code>value_coin</code></a> field instead.
        example: 50000
        deprecated: true
        schema:
          type: integer
      - in: query
        name: value_coin
        description: |
          <br/>
          This is the payment amount sent by your customer prior to deducting any fees.

          **Note:**
            * To get the amount after fees you should use this parameter: <a href="#operation/confirmedcallbackget!in=query&path=value_forwarded_coin&t=request"><code>value_forwarded_coin</code></a>
        example: 0.05
        schema:
          type: number
      - in: query
        name: value_coin_convert
        description: "<br/>\nConverted value to various FIAT currencies of the <a
          href=\"#operation/confirmedcallbackget!in=query&path=value_coin&t=request\"><code>value_coin</code></a>.\n\n**Notes:**
          \n  * This parameter will only be shown if added the <code>convert=1</code>
          parameter in the <a href=\"#operation/create\">/create/</a> endpoint.\n
          \ * Response is json-encoded.\n"
        example: '{"USD": "3.20", "EUR": "3.05", "GBP": "2.62", "CAD": "4.16", "JPY":
          "431.90", "AED": "11.77", "DKK": "22.67", "BRL": "16.52", "CNY": "21.43",
          "HKD": "25.16", "INR": "249.97", "MXN": "64.95", "UGX": "11975.46", "PLN":
          "14.25", "PHP": "173.14", "CZK": "75.37", "HUF": "1220.10", "BGN": "5.94",
          "RON": "15.02", "LKR": "1153.30", "TRY": "55.54", "ZAR": "51.36", "RUB":
          "181.24"}'
        schema:
          type: string
      - in: query
        name: value_forwarded
        description: |
          <br/>
          Value forwarded to you, after fees in integer. Field meant to help with precise calculations on some programming languages.
        example: 50000
        deprecated: true
        schema:
          type: integer
      - in: query
        name: value_forwarded_coin
        description: |
          <br/>
          Value forwarded to you, after fees deducted.
        example: 0.05
        schema:
          type: number
      - in: query
        name: value_forwarded_coin_convert
        description: "<br/>\nConverted value to various FIAT currencies of the <a
          href=\"#operation/confirmedcallbackget!in=query&path=value_forwarded_coin&t=request\"><code>value_forwarded_coin</code></a>.\n\n**Notes:**
          \n  * This parameter will only be shown if added the <code>convert=1</code>
          parameter in the <a href=\"#operation/create\">/create/</a> endpoint.\n
          \ * Response is json-encoded.\n"
        example: '{"USD": "3.17", "EUR": "3.01", "GBP": "2.59", "CAD": "4.12", "JPY":
          "427.16", "AED": "11.64", "DKK": "22.41", "BRL": "16.33", "CNY": "21.20",
          "HKD": "24.88", "INR": "247.19", "MXN": "64.25", "UGX": "11855.29", "PLN":
          "14.08", "PHP": "171.25", "CZK": "74.50", "HUF": "1206.19", "BGN": "5.88",
          "RON": "14.86", "LKR": "1140.51", "TRY": "54.93", "ZAR": "50.82", "RUB":
          "179.22"}'
        schema:
          type: string
      - in: query
        name: fee_coin
        description: |
          <br/>
          Fee paid to CryptAPI, deducted from <a href="#operation/confirmedcallbackget!in=query&path=value_coin&t=request"><code>value_coin</code></a> amount.
        example: 0.02
        schema:
          type: number
      - in: query
        name: coin
        description: |
          <br/>
          Ticker of the coin used for the payment: ['btc', 'bch', 'ltc'', 'eth', 'trx']

          For ERC-20 (ETH) Tokens, this parameter will be `erc20_` + the ticker of the token, e.g `erc20_usdt`

          For TRC-20 (Tron) Tokens, this parameter will be `trc20_` + the ticker of the token, e.g `trc20_usdt`

          For BEP-20 (BSC) Tokens, this parameter will be `bep20_` + the ticker of the token, e.g `bep20_usdt`

          For Polygon Tokens, this parameter will be `polygon_` + the ticker of the token, e.g `polygon_usdt`
        example: btc
        schema:
          type: string
      - in: query
        name: price
        description: |
          <br/>
          Coin price in USD at the time of the callback.
        example: 55.59
        schema:
          type: number
      - in: query
        name: pending
        description: |
          <br/>
          Being the confirmed callback, this value should be <code>0</code>.

          Payment was confirmed by the blockchain.
        example: '0'
        schema:
          type: integer
      responses:
        '200':
          description: |
            Expected response from your server.

            The callback will be marked as successful when it receives the following response from your server.
          content:
            text/plain:
              example: "*ok*"
              schema:
                type: string
components:
  schemas:
    cryptapi-info:
      type: object
      properties:
        btc:
          type: object
          properties:
            coin:
              type: string
              example: Bitcoin
              description: |
                <br/>
                Human readable name of the currency.
            ticker:
              type: string
              example: btc
              description: |
                <br/>
                Ticker of the currency.
            minimum_transaction:
              type: integer
              example: 8000
              description: |
                <br/>
                Minimum transaction value for this currency in integer (meant to help with precise calculations in some programming languages), values below this value are disregarded by CryptAPI.
              deprecated: true
            minimum_transaction_coin:
              type: string
              example: '0.00008000'
              description: |
                <br/>
                Minimum transaction value for this currency, values below this value are disregarded by CryptAPI.
            minimum_fee:
              type: integer
              example: '200'
              description: |
                <br/>
                CryptAPI currently doesn't charge a minimum fee.<br/>
                On Bitcoin and Bitcoin Cash there's a minimum transaction fee of 546 Satoshis due to dust threshold. For Litecoin it's 5460 Litoshis.

                **Notes:**
                  * Value in integer meant to help with precise calculations on some programming languages.
              deprecated: true
            minimum_fee_coin:
              type: string
              example: '0.00000546'
              description: |
                <br/>
                CryptAPI currently doesn't charge a minimum fee.<br/>
                On Bitcoin and Bitcoin Cash there's a minimum transaction fee of 546 Satoshis due to dust threshold. For Litecoin it's 5460 Litoshis.
            fee_percent:
              type: number
              description: |
                <br/>
                Fee percentage for this currency.
              example: '1.00'
            network_fee_estimation:
              type: string
              description: |
                <br/>
                Estimation of the blockchain fee for this cryptocurrency/token.

                **Notes:**
                  * This value is informative. To obtain a blockchain fee estimation use the <a href="#operation/estimate">estimate endpoint</a> instead.
              example: '0.006548837643539048'
            prices:
              type: object
              description: |
                <br/>
                Object with the exchange rate of this currency in various FIAT currencies.

                Keys are the names of the currencies, values are the exchange rates.

                Updated every 5 minutes.
              example: "{'DKK': '56281.94', 'CAD': '10985.14', 'AED': '30517.01',
                'BRL': '34243.36', 'USD': '8308.47', 'MXN': '160193.26', 'CNY': '58740.88',
                'INR': '591471.72', 'JPY': '899719.16', 'HKD': '65173.93', 'GBP':
                '6616.08', 'EUR': '7535.35'}"
            prices_updated:
              type: string
              description: |
                <br/>
                Datetime of the last price update.
              example: '2019-10-14T13:00:09.585Z'
        trc20:
          type: object
          properties:
            usdt:
              type: object
              properties:
                coin:
                  type: string
                  example: USDT
                  description: |
                    <br/>
                    Human readable name of the currency.
                ticker:
                  type: string
                  example: usdt
                  description: |
                    <br/>
                    Ticker of the currency.
                minimum_transaction:
                  type: integer
                  example: 300
                  description: |
                    <br/>
                    Minimum transaction value for this currency in integer (meant to help with precise calculations in some programming languages), values below this value are disregarded by CryptAPI.
                  deprecated: true
                minimum_transaction_coin:
                  type: string
                  example: '3.00000000'
                  description: |
                    <br/>
                    Minimum transaction value for this currency, values below this value are disregarded by CryptAPI.
                minimum_fee:
                  type: integer
                  example: '200'
                  description: |
                    <br/>
                    CryptAPI currently doesn't charge a minimum fee.<br/>
                    On Bitcoin and Bitcoin Cash there's a minimum transaction fee of 546 Satoshis due to dust threshold. For Litecoin it's 5460 Litoshis.

                    **Notes:**
                      * Value in integer meant to help with precise calculations on some programming languages.
                  deprecated: true
                minimum_fee_coin:
                  type: string
                  example: '0.00000546'
                  description: |
                    <br/>
                    CryptAPI currently doesn't charge a minimum fee.<br/>
                    On Bitcoin and Bitcoin Cash there's a minimum transaction fee of 546 Satoshis due to dust threshold. For Litecoin it's 5460 Litoshis.
                fee_percent:
                  type: number
                  description: |
                    <br/>
                    Fee percentage for this currency.
                  example: '1.00'
                network_fee_estimation:
                  type: string
                  description: |
                    <br/>
                    Estimation of the blockchain fee for this cryptocurrency/token.

                    **Notes:**
                      * This value is informative. To obtain a blockchain fee estimation use the <a href="#operation/estimate">estimate endpoint</a> instead.
                  example: '31.89800000'
                prices:
                  type: object
                  description: |
                    <br/>
                    Object with the exchange rate of this currency in various FIAT currencies.<br>

                    Keys are the names of the currencies, values are the exchange rates.<br>

                    Updated every 5 minutes.
                  example: "{'DKK': '56281.94', 'CAD': '10985.14', 'AED': '30517.01',
                    'BRL': '34243.36', 'USD': '8308.47', 'MXN': '160193.26', 'CNY':
                    '58740.88', 'INR': '591471.72', 'JPY': '899719.16', 'HKD': '65173.93',
                    'GBP': '6616.08', 'EUR': '7535.35'}"
                prices_updated:
                  type: string
                  description: |
                    <br/>
                    Datetime of the last price update.
                  example: '2019-10-14T13:00:09.585Z'
    info:
      type: object
      properties:
        coin:
          type: string
          example: Bitcoin
          description: |
            <br/>
            Human readable name of the currency.
        minimum_transaction:
          type: integer
          example: '20000'
          description: |
            <br/>
            Minimum transaction value for this currency in integer (meant to help with precise calculations in some programming languages), values below this value are disregarded by CryptAPI.
          deprecated: true
        minimum_fee:
          type: integer
          example: '200'
          description: |
            <br/>
            CryptAPI currently doesn't charge a minimum fee.<br/>
            On Bitcoin and Bitcoin Cash there's a minimum transaction fee of 546 Satoshis due to dust threshold. For Litecoin it's 5460 Litoshis.

            **Notes:**
              * Value in integer meant to help with precise calculations on some programming languages.
          deprecated: true
        fee_percent:
          type: number
          description: |
            <br/>
            Fee percentage for this currency.
          example: '1.00'
        prices_updated:
          type: string
          description: |
            <br/>
            Datetime of the last price update.
          example: '2019-10-14T13:00:09.585Z'
        status:
          type: string
          description: |
            <br/>
            Status of the request.
          example: success
        prices:
          type: object
          description: |
            <br/>
            Object with the exchange rate of this currency in various FIAT currencies.<br>

            Keys are the names of the currencies, values are the exchange rates.<br>

            Updated every 5 minutes.
          example: "{'DKK': '56281.94', 'CAD': '10985.14', 'AED': '30517.01', 'BRL':
            '34243.36', 'USD': '8308.47', 'MXN': '160193.26', 'CNY': '58740.88', 'INR':
            '591471.72', 'JPY': '899719.16', 'HKD': '65173.93', 'GBP': '6616.08',
            'EUR': '7535.35'}"
    estimate:
      type: object
      properties:
        status:
          type: string
          description: |
            <br/>
            Status of the request.
          example: success
        estimated_cost:
          type: integer
          description: |
            <br/>
            Estimated cost in the coin.
          example: '0.00001'
        estimated_cost_currency:
          type: object
          description: |
            <br/>
            Object with the estimated cost in various FIAT currencies.

            Keys are the names of the currencies, values are the estimated costs.
          example: "{'USD': '0.09', 'EUR': '0.08', 'GBP': '0.07', 'CAD': '0.11', 'JPY':
            '10.21', 'AED': '0.33', 'DKK': '0.58', 'BRL': '0.46', 'CNY': '0.56', 'HKD':
            '0.69', 'INR': '6.67', 'MXN': '1.81', 'UGX': '310.74', 'PLN': '0.35',
            'PHP': '4.56', 'CZK': '1.91', 'HUF': '27.95', 'BGN': '0.15', 'RON': '0.39',
            'LKR': '18.02'}"
    create:
      type: object
      properties:
        address_in:
          type: string
          example: 14PqCsA7KMgseZMPwg6mJy754MtQkrgszu
          description: |
            <br/>
            Address generated by  CryptAPI. You must provide it to your customer in order to receive payments.
        address_out:
          type: string
          example: |
            1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP (single address)

            {1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP: 0.70, 1PE5U4temq1rFzseHHGE2L8smwHCyRbkx3: 0.30} (multiple addresses)
          description: |
            <br/>
            Your address(es), where the payment will be forwarded to, should be the same address(es) you provided.
        callback_url:
          type: string
          example: https://example.com/invoice/1234?payment_id=5678
          description: |
            <br/>
            The callback URL you provided.
        priority:
          type: string
          example: default
          description: |
            <br/>
            The confirmation priority you requested.
        status:
          type: string
          description: |
            Status of the request.
            <br/>
          example: success
    error:
      type: object
      properties:
        status:
          type: string
          description: Status
          example: error
        error:
          type: string
          example: You must provide a valid address and a callback
          description: Only shown in case there's an error, with the error description
    logs:
      type: object
      properties:
        address_in:
          type: string
          example: 14PqCsA7KMgseZMPwg6mJy754MtQkrgszu
          description: |
            <br/>
            Generated address for the callback URL provided.
        address_out:
          type: string
          example: 1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP
          description: |
            <br/>
            Your address(es), where the payment will be forwarded to, should be the same address(es) you provided.

            **Notes:**
              * Response will be <code>{1H6ZZpRmMnrw8ytepV3BYwMjYYnEkWDqVP: 0.70, 1PE5U4temq1rFzseHHGE2L8smwHCyRbkx3: 0.30}</code> (multiple addresses)
        callback_url:
          type: string
          example: example.com/invoice/1234?payment_id=5678
          description: |
            <br/>
            The callback URL you provided.
        status:
          type: string
          description: |
            <br/>
            Status of the request. Should be `success` if the request didn't fail.
          example: success
        notify_pending:
          type: boolean
          description: |
            <br/>
            Shows if you enabled the <a href="#operation/pendingcallbackget">pending callback</a> when creating the address.
          example: true
        notify_confirmations:
          type: integer
          description: 'Number of confirmations required before sending the <a href="#operation/confirmedcallbackget">confirmed
            callback</a>.

            '
          example: 1
        priority:
          type: string
          description: |
            <br/>
            The confirmation priority you requested.
          example: default
        callbacks:
          type: array
          description: |
            <br/>
            List of payments made to this address, together with the logs of the callbacks to your system.
          items:
            "$ref": "#/components/schemas/log_items"
    log_items:
      type: object
      properties:
        txid_in:
          type: string
          example: 33f11611f863d7475eb10daada2f225f0877561cf58cdfff175e99635dfd9120
          description: |
            <br/>
            Hash of the transaction received from the client.
        txid_out:
          type: string
          example: 5ea53d5e728bfdb56b54c0b945990b69ae1e66cec56ab24679c9a622c4695276
          description: |
            <br/>
            Hash of the transaction of the payment to you.
        value:
          type: integer
          example: 100000
          description: |
            <br/>
            Value paid by the client in integer.

            **Notes:**
              * Value in integer meant to help with precise calculations on some programming languages.
          deprecated: true
        value_coin:
          type: number
          example: 0.1
          description: |
            <br/>
            Value sent by your customer to the created address.
        value_forwarded:
          type: integer
          example: 100000
          deprecated: true
          description: |
            <br/>
            Value forwarded to your wallet address, after fees.

            **Notes:**
              * Value in integer meant to help with precise calculations on some programming languages.
        value_forwarded_coin:
          type: number
          example: 0.1
          description: |
            <br/>
            Value forwarded to your wallet address, after fees.
        confirmations:
          type: integer
          description: |
            <br/>
            Number of blockchain confirmations of the current transaction.
          example: 13
        last_update:
          type: string
          description: |
            <br/>
            Time and date when this callback was last updated (UTC-0).
          example: 14/10/2022 12:47:18
        result:
          type: string
          description: "<br/>\nResult status of this callback.\n\nIt can be one of
            the following options: \n  * pending (transaction from user is not confirmed
            yet)\n  * received (received payment from user)\n  * sent (forwarded payment
            to you)\n  * done (callback sent to your URL and received valid response
            `[*ok*]`)\n"
          example: done
        fee_percent:
          type: number
          description: |
            <br/>
            Percentage of the fee charged by CryptAPI.
          example: 1
        fee:
          type: number
          description: |
            <br/>
            Fee deducted by our system, in Satoshi.

            **Notes:**
              * Value in integer meant to help with precise calculations on some programming languages.
          example: 2000
          deprecated: true
        fee_coin:
          type: number
          example: 0.02
          description: |
            <br/>
            Value of CryptAPI Fee deducted from <a href="#operation/logs!c=200&path=callbacks/value_coin&t=response"><code>value_coin</code></a>.
        prices:
          type: number
          example: 55.59
          description: Coin price in USD at the time of receiving
        logs:
          type: array
          description: |
            <br/>
            Last 10 requests to your server, ordered by timestamp descending.
          items:
            "$ref": "#/components/schemas/logs_logs"
    logs_logs:
      type: object
      properties:
        request_url:
          type: string
          example: http://your.site/callback.php?order_id=423&nonce=KRnrAtVbbPrA21TR4yQDESnTV5xxV4jR&uuid=883d30bc-d53b-46e4-9f4d-425001a6a45d&address_in=0x672FF17DDD6f2F6b1CA8c2A9cC8D25f0950AbCc5&address_out=0xA6B78B56ee062185E405a1DDDD18cE8fcBC4395d&confirmations=84484&txid_in=0x4ac6d4f5df0803f91d5fb34d566400bb4417e98d5a515be087a9447d1f22cbbc&txid_out=0x711e26fec256b9945cee5195636772266104adc293d9013caa27752433a7effd&fee=1&value=200&value_coin=2.00011&value_forwarded=184&value_forwarded_coin=1.844926267290333679&coin=bep20_usdt&result=sent&pending=0
          description: |
            <br/>
            URL that CryptAPI tried to call with the GET parameters included.

            **Notes:**
              * If was set to `POST` while creating the address the only `GET` parameters provided in the URL,
              will be the ones provided by you in the <a href="#operation/create!in=query&path=callback&t=request"><code>callback</code></a> parameter, while the CryptAPI parameters will be in `POST`.
        responses:
          type: string
          example: "*ok*"
          description: |
            <br/>
            Response given by your systems to our callback.
        response_status:
          type: string
          example: '200'
          description: |
            <br/>
            HTTP Status code provided by your system to our callback.
        next_try:
          type: string
          example: 14/10/2022 12:47:18
          description: |
            <br/>
            Datetime in UTC-0 when callback will be retried (if not `done`).
        pending:
          type: boolean
          example: false
          description: |
            <br/>
            Will be `1` if it is the <a href="#operation/pendingcallbackget">pending callback</a>.
        confirmed:
          type: boolean
          example: true
          description: |
            <br/>
            Will be `1` if it is the <a href="#operation/confirmedcallbackget">confirmed callback</a>
