openapi: 3.1.0
info:
  title: Maxio Advanced Billing
  version: "1.0"
  contact:
    email: support@chargify.com
  description: |-
    ## Introduction

    ### API Integration

    Maxio Advanced Billing (formerly Chargify API) can be integrated with many environments and programming languages via our REST API. Some of our users have contributed their API wrappers in various programming languages. Check out the [API Code Overview](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDI2-api-code-samples) doc for an introduction to the wrappers and available code samples.

    ### Testing Guide

    Maxio Advanced Billing has compiled a [testing guide](https://chargify.zendesk.com/hc/en-us/articles/4407904658587) that covers a list of important factors to consider while in the testing phase. Here's a high-level overiew of what's covered in our testing guide:

    + Test credit card basics
    + Test site limits
    + Live mode versus test mode

    We strongly suggest reading over the testing guide, as well as the entire set of application-based documentation to aid in your discovery of the product.

    ### Engage Support

    We always enjoy (and appreciate) hearing about larger integrations ahead of time. If you’re planning on importing a large amount of data into Maxio via our API, we suggest sending a “heads up” to “support@chargify.com” so we can coordinate with you to ensure your import process goes smoothly.

    Our API, while considered stable, is continually being improved and polished. Please feel free to contact support if you experience issues when integrating with the Maxio Advanced Billing API.

    If you have any additional questions regarding our documentation please don't hesitate in reaching out.

    ### Support Access

    Access to our Technical Specialist team for API support is currently limited to purchasers of our larger Maxio support plans.

    But don’t worry! There are quite a few options to help you get the answers you need:

    - [Read our documentation for developers](https://developers.chargify.com/docs/developer-docs/ZG9jOjM0NjA3MQ-overview)
    - Explore the endpoints of our API Documentation
    - [Watch our videos and tutorials](https://chargify.com/tutorials)
    - [Check out the Chargify tag on Stack Overflow](http://stackoverflow.com/questions/tagged/chargify)

    ## API Overview

    The Chargify API allows you to interact with our system programmatically from your own application. Using the API you interact with Resources such as:

    - Products
    - Subscriptions
    - Customers
    - etc.

    The API attempts to conform to the [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) design principles.
    You interact with the resources exposed via the API by accessing resource collection and element URIs using the HTTP verbs (GET, POST, PUT, and DELETE).
    Chargify accepts and returns both JSON and XML data via the API.

    You’ll likely need access to a web developer or programmer (if you’re not one) to get the most use out of the API.

    ### Available Formats: JSON and XML

    JSON is the primary and recommended format for use with the Chargify API.  XML is also provided as a backwards compatible option for Merchants who require it.

    ### Authentication

    Authentication is implemented as HTTP Basic Authentication over TLS >= 1.2 (HTTPS), as described in [API Authentication](https://developers.chargify.com/docs/developer-docs/ZG9jOjE1NTUxNQ-authentication)

    ### URL

    The URL for API requests includes the subdomain of the Site you are working with:

    `https://<subdomain>.chargify.com/<resource URI>`

    ### Response Data

    Response data is sent as either XML or JSON, depending on the type of data requested (`HTTP Content-Type` header) or the type specified as being accepted (HTTP `Accept` header).

    GETs for individual statements & invoices may also be requested as PDF using `application/pdf` or appending `.pdf` to the resource URI.

    Response codes are sent via the normal HTTP Response Code, and are documented separately for each resource.

    For boolean fields, please note that a value of `null` may be considered as false. However, this is not true across all cases. Please excercise good judgement here, or contact support with any questions.

    For example:

    + `null` can define that there's no data available for that attribute

    ### Pagination

    When an endpoint returns a list of items, it will be paginated.  Usually, 20 items will be returned by default, and you may request up to a maximum of 200 at a time.  Pagination is done with query string parameters, for example: `?page=5&per_page=200`

    ### Response Time Zones

    API responses from Chargify are sent with the timezone of current Chargify site.

    Alternately, webhooks sent from Chargify globally utilize EST as the timezone for all content in the body of the payload.

    ### Request Data

    POST and PUT request data may be formatted as either XML (`application/xml`) or JSON (`application/json`). For best results, you should set your HTTP `Content-Type` request header accordingly, although you may also specify your format by appending `.xml` or `.json` extensions on to the resource URI.

    Note that Chargify does not accept PUT or POST data sent as query params or form encoded data – data must be sent as either XML or JSON. If you fail to set your `Content-Type` to either `application/xml` or `application/json`, your request may fail due to triggering of forgery protection mechanisms.

    #### About Decimal Numbers

    In order to prevent losing precision, we serialize decimal numbers as strings instead of as JSON numbers.

    We recommend parsing these strings into their decimal equivalent using a decimal number library in your programming language (i.e. `BigDecimal` in Ruby) instead of relying on floating point values or arithmetic.

    #### About Amount Fields

    Fields holding amount values are given as a string representing a decimal whole currency amount.

    For example, `"1.23"` in currency `"USD"` would equate to `$1.23`.

    Not all fields will be rounded to the smallest currency denomination.  Intermediate results, such as those that derive from line-level tax calculations, may hold precision up to 8 decimal places.  However, the top-level totals we provide (e.g. `total_amount`) will be rounded to the smallest currency denomination.

    It is up to API consumers to parse the string into a decimal number representation and do any rounding necessary for your application.

    ### Debugging

    If you’re having difficulty executing a request via our API, try the simplest thing and attempt your request via the curl command-line tool, as shown in the below example. Add the `--verbose` flag to your request to receive even more debugging information.

    Another handy tool is [Beeceptor](https://beeceptor.com/). You can use this to intercept your request to see exactly what is being sent.

    If you are unable to connect at all, check that you are using TLS 1.2 or better.

    If you see a "Could not resolve host" error, double check that the url is correct, including your subdomain. For example: `mysite.chargify.com`.  This error means your DNS server could not find an IP address for the domain you are trying to connect to.

    ### Backwards Compatibility

    We consider the following changes to be backwards compatible and may make them without advance notice:

    + Adding new API endpoints, or adding new attributes in the responses of existing endpoints
    + Adding new optional parameters to be sent to existing API endpoints
    + Adding new fields to exported data
    + Changing the type or length of any of the ID attributes
      + For example, most IDs are currently integers, but you should not assume that this will always be the case.

    In addition, you should not depend on the order of attributes within the API response as this may change.

    Chargify does not provide notifications for additions that are clearly defined as backwards compatible.

    ### Examples

    The following examples use the curl command-line tool to execute API requests.

    #### Subscription Listing

    **Request**

        curl -u <api_key>:x -H Accept:application/json -H Content-Type:application/json https://acme.chargify.com/subscriptions.json


    ## API Access Limitations

    There are a few scenarios that may end up in causing an API request to be blocked even with correct credentials.
    **Please note:** All relevant API requests will be blocked if any of the below conditions are true. These limitations also apply to [Chargify Direct](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDE3-introduction).

    Those scenarios are as follows:

    - Your Chargify subscription is canceled.
    - Your Chargify trial has reached an end.
    - The site you're making a request for is in the process of ["clearing site data"](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405428327309)
      - _Note: any API request for another site that is in a good state will NOT be blocked_
    - The site you're making a request for has been deleted.
      - _Note: any API request for another site that is in a good state will NOT be blocked_

    Read more about your Chargify subscription [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405430043149-Advanced-Billing-Subscription#advanced-billing-subscription-0-0)

    ### What happens when an API request is blocked

    The request will fail with a `422` http status code. The response will also include a message explaining the reason for the request being blocked. For example:

    - If your Chargify subscription is canceled:

    ```json
    {
      "errors" => [
        [0] "Your Chargify account has been canceled. Please contact support@chargify.com to reactivate."
      ]
    }
    ```

    - If your Chargify trial has reached and end and you attempted to make an API request, the response body will look like:

    ```json
    {
      "errors" => [
        [0] "Your trial has ended, please contact sales."
      ]
    }
    ```

    - If the site you're making a request for is in the process of ["clearing site data"](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405428327309):

    ```json
    {
      "errors" => [
        [0] "Site data clearing is in progress. Please try later."
      ]
    }
    ```

    - If the site you're making a request for has been deleted:

    ```json
    {
      "errors" => [
        [0] "This site has been deleted."
      ]
    }
    ```

    ## Secure Applications

    Please note that it is NOT possible to make API requests directly from the customer's browser or device.  Doing so would expose your API key on the client side, and anyone who has that key has full access to all of your Chargify data.

    Instead you will need to take care to tokenize sensitive information by using [Chargify.js](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDI0-overview) or a similar JavaScript library provided by your gateway, and then post the token and other information to your own server, from which you can make the API call to Chargify.

    #### Troubleshooting

    If you attempt to make a Chargify API request directly from the customer's browser, you may see an error such as:

    ```
    Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.
    ```

    or

    ```
    Origin 'https://example.com' is therefore not allowed access.` `The response had HTTP status code 404.
    ```

    This is an error message indicating that Cross-Origin Resource Sharing (CORS) is not enabled on the Chargify server.

    ## Relationship Invoicing

    ### API Compatibility for Relationship Invoicing

    This section describes the API for the new, [Relationship Invoicing](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405078794253) style of invoices introduced in January 2018.

    If you are an existing customer from prior to January 2018 or have not otherwise explicitly opted into this new style of invoices, you are probably looking for the legacy "Invoices" section that describes [invoice-billing legacy-style invoices](./b3A6MTQxMDgzNjQ-read-invoice).

    These new invoices provide a single representation of all of your Chargify billing, whether you collect automatically or via remittance.

    ### About Decimal Numbers

    In order to prevent losing precision, we serialize decimal numbers as strings instead of as JSON numbers.

    We recommend parsing these strings into their decimal equivalent using a decimal number library in your programming language (i.e. `BigDecimal` in Ruby) instead of relying on floating point values or arithmetic.

    ### About Amount Fields

    Fields holding amount values are given as a string representing a decimal whole currency amount.

    For example, `"1.23"` in currency `"USD"` would equate to `$1.23`.

    Not all fields will be rounded to the smallest currency denomination. Intermediate results, such as those that derive from line-level tax calculations, may hold precision up to 8 decimal places.  However, the top-level totals we provide (e.g. `total_amount`) will be rounded to the smallest currency denomination.

    It is up to API consumers to parse the string into a decimal number representation and do any rounding necessary for your application.

    #### Relationship Invoicing Summary

    + If your site **is** using relationship invoicing, you may only use the methods described in this section for working with invoices.

    + If your site is **not** using relationship invoicing, please use the legacy invoice methods:

      + [Invoices](./b3A6MTQxMTA0MTA-read-invoice)
      + [Invoices: Payments](./b3A6MTQxMTA0MTI-create-invoice-payment)
      + [Invoices: Charges](./b3A6MTQxMTA0MTM-create-charge)
      + [Invoices: Credits](./b3A6MTQxMTA0MTQ-create-invoice-credit)
tags:
  - name: API Exports
  - name: Advance Invoice
  - name: Billing Portal
  - name: Coupons
  - name: Components
  - name: Customers
  - name: Custom Fields
  - name: Events
  - name: "Events-Based Billing: Segments"
  - name: Insights
  - name: Invoices
  - name: Offers
  - name: Payment Profiles
  - name: Product Families
  - name: Products
  - name: "Product: Price Points"
  - name: Proforma Invoices
  - name: Reason Codes
  - name: Referral Codes
  - name: Sales Commissions
  - name: Sites
  - name: Subscriptions
  - name: Subscription Components
  - name: Subscription Groups
  - name: Subscription Group Invoice Account
  - name: Subscription Group Status
  - name: Subscription Invoice Account
  - name: Subscription Notes
  - name: Subscription Products
  - name: Subscription Status
  - name: Webhooks
paths:
  /webhooks.json:
    get:
      summary: List Webhooks
      tags:
        - Webhooks
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Webhook-Response.yaml"
              examples:
                Example:
                  value:
                    - webhook:
                        event: statement_settled
                        id: 141765032
                        created_at: "2016-11-08T16:22:26-05:00"
                        last_error: 404 Resource Not Found (retry 5 of 5)
                        last_error_at: "2016-11-08T16:43:54-05:00"
                        accepted_at: null
                        last_sent_at: "2016-11-08T16:43:54-05:00"
                        last_sent_url: "http://requestb.in/11u45x71"
                        successful: false
                        body: "id=141765032&event=statement_settled&payload[site][id]=31615&payload[site][subdomain]=general-goods&payload[subscription][id]=15100141&payload[subscription][state]=active&payload[subscription][balance_in_cents]=0&payload[customer][id]=14585695&payload[customer][first_name]=Pookie&payload[customer][last_name]=Test&payload[customer][reference]=&payload[customer][organization]=&payload[customer][address]=&payload[customer][address_2]=&payload[customer][city]=&payload[customer][state]=&payload[customer][zip]=&payload[customer][country]=&payload[customer][email]=pookie999%40example.com&payload[customer][phone]=&payload[statement][closed_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][id]=80168049&payload[statement][opened_at]=2016-11-07%2016%3A22%3A15%20-0500&payload[statement][settled_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][subscription_id]=15100141&payload[statement][updated_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][starting_balance_in_cents]=0&payload[statement][ending_balance_in_cents]=0&payload[statement][total_in_cents]=6400&payload[statement][memo]=We%20thank%20you%20for%20your%20continued%20business!&payload[statement][events][0][id]=346956565&payload[statement][events][0][key]=renewal_success&payload[statement][events][0][message]=Successful%20renewal%20for%20Pookie%20Test's%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][events][1][id]=346956579&payload[statement][events][1][key]=payment_success&payload[statement][events][1][message]=Successful%20payment%20of%20%2464.00%20for%20Pookie%20Test's%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][events][2][id]=347299359&payload[statement][events][2][key]=renewal_success&payload[statement][events][2][message]=Successful%20renewal%20for%20Pookie%20Test's%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][transactions][0][id]=161537343&payload[statement][transactions][0][subscription_id]=15100141&payload[statement][transactions][0][type]=Charge&payload[statement][transactions][0][kind]=baseline&payload[statement][transactions][0][transaction_type]=charge&payload[statement][transactions][0][success]=true&payload[statement][transactions][0][amount_in_cents]=1000&payload[statement][transactions][0][memo]=%2410%20Basic%20Plan%20(11%2F08%2F2016%20-%2011%2F09%2F2016)&payload[statement][transactions][0][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][transactions][0][starting_balance_in_cents]=0&payload[statement][transactions][0][ending_balance_in_cents]=1000&payload[statement][transactions][0][gateway_used]=&payload[statement][transactions][0][gateway_transaction_id]=&payload[statement][transactions][0][gateway_order_id]=&payload[statement][transactions][0][payment_id]=161537369&payload[statement][transactions][0][product_id]=3792003&payload[statement][transactions][0][tax_id]=&payload[statement][transactions][0][component_id]=&payload[statement][transactions][0][statement_id]=80168049&payload[statement][transactions][0][customer_id]=14585695&payload[statement][transactions][0][original_amount_in_cents]=&payload[statement][transactions][0][discount_amount_in_cents]=&payload[statement][transactions][0][taxable_amount_in_cents]=&payload[statement][transactions][1][id]=161537344&payload[statement][transactions][1][subscription_id]=15100141&payload[statement][transactions][1][type]=Charge&payload[statement][transactions][1][kind]=quantity_based_component&payload[statement][transactions][1][transaction_type]=charge&payload[statement][transactions][1][success]=true&payload[statement][transactions][1][amount_in_cents]=5400&payload[statement][transactions][1][memo]=Timesheet%20Users%3A%2018%20Timesheet%20Users&payload[statement][transactions][1][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][transactions][1][starting_balance_in_cents]=1000&payload[statement][transactions][1][ending_balance_in_cents]=6400&payload[statement][transactions][1][gateway_used]=&payload[statement][transactions][1][gateway_transaction_id]=&payload[statement][transactions][1][gateway_order_id]=&payload[statement][transactions][1][payment_id]=161537369&payload[statement][transactions][1][product_id]=3792003&payload[statement][transactions][1][tax_id]=&payload[statement][transactions][1][component_id]=277221&payload[statement][transactions][1][statement_id]=80168049&payload[statement][transactions][1][customer_id]=14585695&payload[statement][transactions][1][original_amount_in_cents]=&payload[statement][transactions][1][discount_amount_in_cents]=&payload[statement][transactions][1][taxable_amount_in_cents]=&payload[statement][transactions][2][id]=161537369&payload[statement][transactions][2][subscription_id]=15100141&payload[statement][transactions][2][type]=Payment&payload[statement][transactions][2][kind]=&payload[statement][transactions][2][transaction_type]=payment&payload[statement][transactions][2][success]=true&payload[statement][transactions][2][amount_in_cents]=6400&payload[statement][transactions][2][memo]=Pookie%20Test%20-%20%2410%20Basic%20Plan%3A%20Renewal%20payment&payload[statement][transactions][2][created_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][transactions][2][starting_balance_in_cents]=6400&payload[statement][transactions][2][ending_balance_in_cents]=0&payload[statement][transactions][2][gateway_used]=bogus&payload[statement][transactions][2][gateway_transaction_id]=53433&payload[statement][transactions][2][gateway_order_id]=&payload[statement][transactions][2][payment_id]=&payload[statement][transactions][2][product_id]=3792003&payload[statement][transactions][2][tax_id]=&payload[statement][transactions][2][component_id]=&payload[statement][transactions][2][statement_id]=80168049&payload[statement][transactions][2][customer_id]=14585695&payload[statement][transactions][2][card_number]=XXXX-XXXX-XXXX-1&payload[statement][transactions][2][card_expiration]=10%2F2020&payload[statement][transactions][2][card_type]=bogus&payload[statement][transactions][2][refunded_amount_in_cents]=0&payload[product][id]=3792003&payload[product][name]=%2410%20Basic%20Plan&payload[product_family][id]=527890&payload[product_family][name]=Acme%20Projects&payload[payment_profile][id]=10102821&payload[payment_profile][first_name]=Pookie&payload[payment_profile][last_name]=Test&payload[payment_profile][billing_address]=&payload[payment_profile][billing_address_2]=&payload[payment_profile][billing_city]=&payload[payment_profile][billing_country]=&payload[payment_profile][billing_state]=&payload[payment_profile][billing_zip]=&payload[event_id]=347299384"
                        signature: 7c606ec4628ce75ec46e284097ce163a
                        signature_hmac_sha_256: 40f25e83dd324508bb2149e3e525821922fb210535ebfbfa81e7ab951996b41d
                    - webhook:
                        event: payment_success
                        id: 141765008
                        created_at: "2016-11-08T16:22:25-05:00"
                        last_error: 404 Resource Not Found (retry 5 of 5)
                        last_error_at: "2016-11-08T16:43:54-05:00"
                        accepted_at: null
                        last_sent_at: "2016-11-08T16:43:54-05:00"
                        last_sent_url: "http://requestb.in/11u45x71"
                        successful: false
                        body: "id=141765008&event=payment_success&payload[site][id]=31615&payload[site][subdomain]=general-goods&payload[subscription][id]=15100141&payload[subscription][state]=active&payload[subscription][trial_started_at]=&payload[subscription][trial_ended_at]=&payload[subscription][activated_at]=2016-11-04%2017%3A06%3A43%20-0400&payload[subscription][created_at]=2016-11-04%2017%3A06%3A42%20-0400&payload[subscription][updated_at]=2016-11-08%2016%3A22%3A22%20-0500&payload[subscription][expires_at]=&payload[subscription][balance_in_cents]=0&payload[subscription][current_period_ends_at]=2016-11-09%2016%3A06%3A42%20-0500&payload[subscription][next_assessment_at]=2016-11-09%2016%3A06%3A42%20-0500&payload[subscription][canceled_at]=&payload[subscription][cancellation_message]=&payload[subscription][next_product_id]=&payload[subscription][cancel_at_end_of_period]=false&payload[subscription][payment_collection_method]=automatic&payload[subscription][snap_day]=&payload[subscription][cancellation_method]=&payload[subscription][current_period_started_at]=2016-11-08%2016%3A06%3A42%20-0500&payload[subscription][previous_state]=active&payload[subscription][signup_payment_id]=161034048&payload[subscription][signup_revenue]=64.00&payload[subscription][delayed_cancel_at]=&payload[subscription][coupon_code]=&payload[subscription][total_revenue_in_cents]=32000&payload[subscription][product_price_in_cents]=1000&payload[subscription][product_version_number]=7&payload[subscription][payment_type]=credit_card&payload[subscription][referral_code]=pggn84&payload[subscription][coupon_use_count]=&payload[subscription][coupon_uses_allowed]=&payload[subscription][customer][id]=14585695&payload[subscription][customer][first_name]=Test&payload[subscription][customer][last_name]=Test&payload[subscription][customer][organization]=&payload[subscription][customer][email]=pookie999%40example.com&payload[subscription][customer][created_at]=2016-11-04%2017%3A06%3A42%20-0400&payload[subscription][customer][updated_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription][customer][reference]=&payload[subscription][customer][address]=&payload[subscription][customer][address_2]=&payload[subscription][customer][city]=&payload[subscription][customer][state]=&payload[subscription][customer][zip]=&payload[subscription][customer][country]=&payload[subscription][customer][phone]=&payload[subscription][customer][portal_invite_last_sent_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription][customer][portal_invite_last_accepted_at]=&payload[subscription][customer][verified]=false&payload[subscription][customer][portal_customer_created_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription][customer][cc_emails]=&payload[subscription][product][id]=3792003&payload[subscription][product][name]=%2410%20Basic%20Plan&payload[subscription][product][handle]=basic&payload[subscription][product][description]=lorem%20ipsum&payload[subscription][product][accounting_code]=basic&payload[subscription][product][request_credit_card]=false&payload[subscription][product][expiration_interval]=&payload[subscription][product][expiration_interval_unit]=never&payload[subscription][product][created_at]=2016-03-24%2013%3A38%3A39%20-0400&payload[subscription][product][updated_at]=2016-11-03%2013%3A03%3A05%20-0400&payload[subscription][product][price_in_cents]=1000&payload[subscription][product][interval]=1&payload[subscription][product][interval_unit]=day&payload[subscription][product][initial_charge_in_cents]=&payload[subscription][product][trial_price_in_cents]=&payload[subscription][product][trial_interval]=&payload[subscription][product][trial_interval_unit]=month&payload[subscription][product][archived_at]=&payload[subscription][product][require_credit_card]=false&payload[subscription][product][return_params]=&payload[subscription][product][taxable]=false&payload[subscription][product][update_return_url]=&payload[subscription][product][initial_charge_after_trial]=false&payload[subscription][product][version_number]=7&payload[subscription][product][update_return_params]=&payload[subscription][product][product_family][id]=527890&payload[subscription][product][product_family][name]=Acme%20Projects&payload[subscription][product][product_family][description]=&payload[subscription][product][product_family][handle]=billing-plans&payload[subscription][product][product_family][accounting_code]=&payload[subscription][product][public_signup_pages][id]=281054&payload[subscription][product][public_signup_pages][return_url]=http%3A%2F%2Fwww.example.com%3Fsuccessfulsignup&payload[subscription][product][public_signup_pages][return_params]=&payload[subscription][product][public_signup_pages][url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fkqvmfrbgd89q%2Fbasic&payload[subscription][product][public_signup_pages][id]=281240&payload[subscription][product][public_signup_pages][return_url]=&payload[subscription][product][public_signup_pages][return_params]=&payload[subscription][product][public_signup_pages][url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fdkffht5dxfd8%2Fbasic&payload[subscription][product][public_signup_pages][id]=282694&payload[subscription][product][public_signup_pages][return_url]=&payload[subscription][product][public_signup_pages][return_params]=&payload[subscription][product][public_signup_pages][url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fjwffwgdd95s8%2Fbasic&payload[subscription][credit_card][id]=10102821&payload[subscription][credit_card][first_name]=Pookie&payload[subscription][credit_card][last_name]=Test&payload[subscription][credit_card][masked_card_number]=XXXX-XXXX-XXXX-1&payload[subscription][credit_card][card_type]=bogus&payload[subscription][credit_card][expiration_month]=10&payload[subscription][credit_card][expiration_year]=2020&payload[subscription][credit_card][customer_id]=14585695&payload[subscription][credit_card][current_vault]=bogus&payload[subscription][credit_card][vault_token]=1&payload[subscription][credit_card][billing_address]=&payload[subscription][credit_card][billing_city]=&payload[subscription][credit_card][billing_state]=&payload[subscription][credit_card][billing_zip]=&payload[subscription][credit_card][billing_country]=&payload[subscription][credit_card][customer_vault_token]=&payload[subscription][credit_card][billing_address_2]=&payload[subscription][credit_card][payment_type]=credit_card&payload[subscription][credit_card][site_gateway_setting_id]=&payload[subscription][credit_card][gateway_handle]=&payload[transaction][id]=161537369&payload[transaction][subscription_id]=15100141&payload[transaction][type]=Payment&payload[transaction][kind]=&payload[transaction][transaction_type]=payment&payload[transaction][success]=true&payload[transaction][amount_in_cents]=6400&payload[transaction][memo]=Pookie%20Test%20-%20%2410%20Basic%20Plan%3A%20Renewal%20payment&payload[transaction][created_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[transaction][starting_balance_in_cents]=6400&payload[transaction][ending_balance_in_cents]=0&payload[transaction][gateway_used]=bogus&payload[transaction][gateway_transaction_id]=53433&payload[transaction][gateway_response_code]=&payload[transaction][gateway_order_id]=&payload[transaction][payment_id]=&payload[transaction][product_id]=3792003&payload[transaction][tax_id]=&payload[transaction][component_id]=&payload[transaction][statement_id]=80168049&payload[transaction][customer_id]=14585695&payload[transaction][card_number]=XXXX-XXXX-XXXX-1&payload[transaction][card_expiration]=10%2F2020&payload[transaction][card_type]=bogus&payload[transaction][refunded_amount_in_cents]=0&payload[transaction][invoice_id]=&payload[event_id]=347299364"
                        signature: fbcf2f6be579f9658cff90c4373e0ca2
                        signature_hmac_sha_256: db96654f5456c5460062feb944ac8bb1418f9d181ae04a8ed982fe9ffdca8de1
      operationId: listWebhooks
      description: |-
        ## Webhooks Intro

        The Webhooks API allows you to view a list of all webhooks and to selectively resend individual or groups of webhooks. Webhooks will be sent on endpoints specified by you. Endpoints can be added via API or Web UI. There is also an option to enable / disable webhooks via API request.

        We recommend that you review Chargify's webhook documentation located in our help site. The following resources will help guide you on how to use webhooks in Chargify, in addition to these webhook endpoints:

        + [Adding/editing new webhooks](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404448450317#configure-webhook-url)
        + [Webhooks introduction and delivery information](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405568068365#webhooks-introduction-0-0)
        + [Main webhook overview](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405357509645-Webhooks-Reference#webhooks-reference-0-0)
        + [Available webhooks and payloads](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405357509645-Webhooks-Reference#events)

        ## List Webhooks for a Site

        This method allows you to fetch data about webhooks. You can pass query parameters if you want to filter webhooks.
      parameters:
        - $ref: "../components/parameters/webhook-status.yaml"
        - schema:
            type: string
          in: query
          name: since_date
          description: Format YYYY-MM-DD. Returns Webhooks with the created_at date greater than or equal to the one specified.
        - schema:
            type: string
          in: query
          name: until_date
          description: Format YYYY-MM-DD. Returns Webhooks with the created_at date less than or equal to the one specified.
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - $ref: "../components/parameters/webhook-order.yaml"
        - schema:
            type: integer
          in: query
          name: subscription
          description: The Chargify id of a subscription you'd like to filter for
      x-operation-settings:
        collectParameters: true
  /webhooks/settings.json:
    put:
      summary: Enable Webhooks
      tags:
        - Webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Enable-Webhooks-Response.yaml"
              examples:
                Example:
                  value:
                    webhooks_enabled: true
      operationId: enableWebhooks
      description: This method allows you to enable webhooks via API for your site
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Enable-Webhooks-Request.yaml"
            examples:
              Example:
                value:
                  webhooks_enabled: true
  /webhooks/replay.json:
    post:
      summary: Replay Webhooks
      tags:
        - Webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Replay-Webhooks-Response.yaml"
              examples:
                Example:
                  value:
                    status: ok
      operationId: replayWebhooks
      description: |-
        Posting to the replay endpoint does not immediately resend the webhooks. They are added to a queue and will be sent as soon as possible, depending on available system resources.

        You may submit an array of up to 1000 webhook IDs to replay in the request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Replay-Webhooks-Request.yaml"
            examples:
              Example:
                value:
                  ids:
                    - 123456789
                    - 123456788
  /endpoints.json:
    post:
      summary: Create Endpoint
      tags:
        - Webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Endpoint-Response.yaml"
              examples:
                Example:
                  value:
                    endpoint:
                      id: 1
                      url: "https://your.site/webhooks"
                      site_id: 1
                      status: enabled
                      webhook_subscriptions:
                        - payment_success
                        - payment_failure
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "URL: invalid, only http and https supported"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createEndpoint
      description: |-
        The Chargify API allows you to create an endpoint and assign a list of webhooks subscriptions (events) to it.

        You can check available events here.
        [Event keys](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405357509645-Webhooks-Reference#example-payloads)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-or-Update-Endpoint-Request.yaml"
            examples:
              Example:
                value:
                  endpoint:
                    url: "https://your.site/webhooks"
                    webhook_subscriptions:
                      - payment_success
                      - payment_failure
    get:
      summary: List Endpoints
      tags:
        - Webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Endpoint.yaml"
              examples:
                Example:
                  value:
                    - id: 11
                      url: "https://foobar.com/webhooks"
                      site_id: 1
                      status: enabled
                      webhook_subscriptions:
                        - payment_success
                        - payment_failure
                    - id: 12
                      url: "https:/example.com/webhooks"
                      site_id: 1
                      status: enabled
                      webhook_subscriptions:
                        - payment_success
                        - payment_failure
                        - refund_failure
      operationId: listEndpoints
      description: This method returns created endpoints for site.
  "/endpoints/{endpoint_id}.json":
    parameters:
      - schema:
          type: integer
        name: endpoint_id
        in: path
        required: true
        description: The Chargify id for the endpoint that should be updated
    put:
      summary: Update Endpoint
      tags:
        - Webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Endpoint-Response.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Event key is not valid - foobar
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateEndpoint
      description: |-
        You can update an Endpoint via the API with a PUT request to the resource endpoint.

        You can change the `url` of your endpoint which consumes webhooks or list of `webhook_subscriptions`.
        Check available [Event keys](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404448450317-Webhooks#configure-webhook-url).

        Always send a complete list of events which you want subscribe/watch.
        Sending an PUT request for existing endpoint with empty list of `webhook_subscriptions` will end with unsubscribe from all events.

        If you want unsubscribe from specific event, just send a list of `webhook_subscriptions` without the specific event key.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-or-Update-Endpoint-Request.yaml"
            examples:
              Example:
                value:
                  endpoint:
                    url: "https://yout.site/webhooks/1/json."
                    webhook_subscriptions:
                      - payment_failure
                      - payment_success
                      - refund_failure
  /site.json:
    get:
      summary: Read Site
      tags:
        - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Site-Response.yaml"
              examples:
                Example:
                  value:
                    site:
                      id: 0
                      name: string
                      subdomain: string
                      currency: string
                      seller_id: 0
                      non_primary_currencies:
                        - string
                      relationship_invoicing_enabled: true
                      customer_hierarchy_enabled: true
                      whopays_enabled: true
                      whopays_default_payer: string
                      default_payment_collection_method: string
                      organization_address:
                        street: null
                        line2: null
                        city: null
                        state: null
                        zip: null
                        country: null
                        name: string
                        phone: string
                      tax_configuration:
                        kind: custom
                        fully_configured: true
                        destination_address: shipping_then_billing
                      net_terms:
                        default_net_terms: 0
                        automatic_net_terms: 0
                        remittance_net_terms: 0
                        net_terms_on_remittance_signups_enabled: false
                        custom_net_terms_enabled: false
                      test: true
                      allocation_settings:
                        upgrade_charge: prorated
                        downgrade_credit: none
                        accrue_charge: "true"
      operationId: readSite
      description: |-
        This endpoint allows you to fetch some site data.

        Full documentation on Sites in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407870738587).

        Specifically, the [Clearing Site Data](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405428327309) section is extremely relevant to this endpoint documentation.

        #### Relationship invoicing enabled
        If site has RI enabled then you will see more settings like:

            "customer_hierarchy_enabled": true,
            "whopays_enabled": true,
            "whopays_default_payer": "self"
        You can read more about these settings here:
         [Who Pays & Customer Hierarchy](https://chargify.zendesk.com/hc/en-us/articles/4407746683291)
  /sites/clear_data.json:
    post:
      summary: Clear Site Data
      tags:
        - Sites
      operationId: clearSite
      description: |
        This call is asynchronous and there may be a delay before the site data is fully deleted. If you are clearing site data for an automated test, you will need to build in a delay and/or check that there are no products, etc., in the site before proceeding.

        **This functionality will only work on sites in TEST mode. Attempts to perform this on sites in “live” mode will result in a response of 403 FORBIDDEN.**
      parameters:
        - $ref: "../components/parameters/cleanup-scope.yaml"
      responses:
        "200":
          description: OK
  "/subscriptions/{subscription_id}/notes.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Create Subscription Note
      operationId: createSubscriptionNote
      tags:
        - Subscription Notes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Note-Response.yaml"
      description: |-
        Use the following method to create a note for a subscription.

        ## How to Use Subscription Notes

        Notes allow you to record information about a particular Subscription in a free text format.

        If you have structured data such as birth date, color, etc., consider using Metadata instead.

        Full documentation on how to use Notes in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404434903181-Subscription-Summary#notes).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Subscription-Note-Request.yaml"
            examples:
              Example:
                value:
                  note:
                    body: New test note.
                    sticky: true
    get:
      summary: List Subscription Notes
      tags:
        - Subscription Notes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Subscription-Note-Response.yaml"
              examples:
                Example:
                  value:
                    - note:
                        body: Test note.
                        created_at: "2015-06-15T13:26:47-04:00"
                        id: 5
                        sticky: false
                        subscription_id: 100046
                        updated_at: "2015-06-15T13:28:12-04:00"
                    - note:
                        body: Another test note.
                        created_at: "2015-06-15T12:04:46-04:00"
                        id: 4
                        sticky: false
                        subscription_id: 100046
                        updated_at: "2015-06-15T13:26:33-04:00"
      operationId: listSubscriptionNotes
      description: Use this method to retrieve a list of Notes associated with a Subscription. The response will be an array of Notes.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
  "/subscriptions/{subscription_id}/notes/{note_id}.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - schema:
          type: integer
        name: note_id
        in: path
        required: true
        description: The Chargify id of the note
    get:
      summary: Read Subscription Note
      tags:
        - Subscription Notes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Note-Response.yaml"
              examples:
                Example:
                  value:
                    note:
                      body: Test note.
                      created_at: "2015-06-15T13:26:47-04:00"
                      id: 5
                      sticky: false
                      subscription_id: 100046
                      updated_at: "2015-06-15T13:28:12-04:00"
      operationId: readSubscriptionNote
      description: "Once you have obtained the ID of the note you wish to read, use this method to show a particular note attached to a subscription."
    put:
      summary: Update Subscription Note
      tags:
        - Subscription Notes
      operationId: updateSubscriptionNote
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Note-Response.yaml"
      description: Use the following method to update a note for a Subscription.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Subscription-Note-Request.yaml"
            examples:
              Example:
                value:
                  note:
                    body: Modified test note.
                    sticky: true
    delete:
      summary: Delete Subscription Note
      operationId: deleteSubscriptionNote
      tags:
        - Subscription Notes
      responses:
        "200":
          description: OK
      description: Use the following method to delete a note for a Subscription.
  /customers.json:
    post:
      summary: Create Customer
      tags:
        - Customers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: ../components/schemas/Customer-Response.yaml
              examples:
                Example:
                  value:
                    customer:
                      first_name: Cathryn
                      last_name: Parisian
                      email: Stella.McLaughlin6@example.net
                      cc_emails: null
                      organization: Greenholt - Oberbrunner
                      reference: null
                      id: 76
                      created_at: "2021-03-29T07:47:00-04:00"
                      updated_at: "2021-03-29T07:47:00-04:00"
                      address: 739 Stephon Bypass
                      address_2: Apt. 386
                      city: Sedrickchester
                      state: KY
                      state_name: Kentucky
                      zip: 46979-7719
                      country: US
                      country_name: United States
                      phone: 230-934-3685
                      verified: false
                      portal_customer_created_at: null
                      portal_invite_last_sent_at: null
                      portal_invite_last_accepted_at: null
                      tax_exempt: false
                      vat_number: null
                      parent_id: null
                      locale: en-US
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Customer-Error-Response.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      customer: can't be blank
                Example-2:
                  value:
                    errors:
                      - "First name: cannot be blank."
                      - "Last name: cannot be blank."
                      - "Email address: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createCustomer
      description: |-
        You may create a new Customer at any time, or you may create a Customer at the same time you create a Subscription. The only validation restriction is that you may only create one customer for a given reference value.

        If provided, the `reference` value must be unique. It represents a unique identifier for the customer from your own app, i.e. the customer’s ID. This allows you to retrieve a given customer via a piece of shared information. Alternatively, you may choose to leave `reference` blank, and store Chargify’s unique ID for the customer, which is in the `id` attribute.

        Full documentation on how to locate, create and edit Customers in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407659914267).

        ## Required Country Format

        Chargify requires that you use the ISO Standard Country codes when formatting country attribute of the customer.

        Countries should be formatted as 2 characters. For more information, please see the following wikipedia article on [ISO_3166-1.](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes)

        ## Required State Format

        Chargify requires that you use the ISO Standard State codes when formatting state attribute of the customer.

        + US States (2 characters): [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2:US)

        + States Outside the US (2-3 characters): To find the correct state codes outside of the US, please go to [ISO_3166-1](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes) and click on the link in the “ISO 3166-2 codes” column next to country you wish to populate.

        ## Locale

        Chargify allows you to attribute a language/region to your customer to deliver invoices in any required language.
        For more: [Customer Locale](https://chargify.zendesk.com/hc/en-us/articles/4407870384283#customer-locale)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Customer-Request.yaml"
            examples:
              Example:
                value:
                  customer:
                    first_name: Martha
                    last_name: Washington
                    email: martha@example.com
                    cc_emails: george@example.com
                    organization: "ABC, Inc."
                    reference: "1234567890"
                    address: 123 Main Street
                    address_2: Unit 10
                    city: Anytown
                    state: MA
                    zip: "02120"
                    country: US
                    phone: 555-555-1212
                    locale: es-MX
    get:
      summary: List or Find Customers
      tags:
        - Customers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../components/schemas/Customer-Response.yaml
              examples:
                Example:
                  value:
                    - customer:
                        first_name: Kayla
                        last_name: Test
                        email: kayla@example.com
                        cc_emails: "john@example.com, sue@example.com"
                        organization: ""
                        reference: null
                        id: 14126091
                        created_at: "2016-10-04T15:22:27-04:00"
                        updated_at: "2016-10-04T15:22:30-04:00"
                        address: ""
                        address_2: ""
                        city: ""
                        state: ""
                        zip: ""
                        country: ""
                        phone: ""
                        verified: null
                        portal_customer_created_at: "2016-10-04T15:22:29-04:00"
                        portal_invite_last_sent_at: "2016-10-04T15:22:30-04:00"
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                    - customer:
                        first_name: "Nick "
                        last_name: Test
                        email: nick@example.com
                        cc_emails: "john@example.com, sue@example.com"
                        organization: ""
                        reference: null
                        id: 14254093
                        created_at: "2016-10-13T16:52:51-04:00"
                        updated_at: "2016-10-13T16:52:54-04:00"
                        address: ""
                        address_2: ""
                        city: ""
                        state: ""
                        zip: ""
                        country: ""
                        phone: ""
                        verified: null
                        portal_customer_created_at: "2016-10-13T16:52:54-04:00"
                        portal_invite_last_sent_at: "2016-10-13T16:52:54-04:00"
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                        parent_id: 123
                    - customer:
                        first_name: Don
                        last_name: Test
                        email: don@example.com
                        cc_emails: "john@example.com, sue@example.com"
                        organization: ""
                        reference: null
                        id: 14332342
                        created_at: "2016-10-19T10:49:13-04:00"
                        updated_at: "2016-10-19T10:49:19-04:00"
                        address: 1737 15th St
                        address_2: ""
                        city: Boulder
                        state: CO
                        zip: "80302"
                        country: US
                        phone: ""
                        verified: null
                        portal_customer_created_at: "2016-10-19T10:49:19-04:00"
                        portal_invite_last_sent_at: "2016-10-19T10:49:19-04:00"
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                        parent_id: null
      operationId: listCustomers
      description: |-
        This request will by default list all customers associated with your Site.

        ## Find Customer

        Use the search feature with the `q` query parameter to retrieve an array of customers that matches the search query.

        Common use cases are:

        + Search by an email
        + Search by a Chargify ID
        + Search by an organization
        + Search by a reference value from your application
        + Search by a first or last name

        To retrieve a single, exact match by reference, please use the [lookup endpoint](https://developers.chargify.com/docs/api-docs/b710d8fbef104-read-customer-by-reference).
      parameters:
        - schema:
            $ref: "../components/schemas/Sort-Direction.yaml"
          in: query
          name: direction
          description: Direction to sort customers by time of creation
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-default-50.yaml"
        - $ref: "../components/parameters/basic-date-field.yaml"
        - schema:
            type: string
          in: query
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns subscriptions with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
          name: start_date
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns subscriptions with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns subscriptions with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: string
          in: query
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns subscriptions with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
          name: end_datetime
        - schema:
            type: string
          in: query
          name: q
          description: "A search query by which to filter customers (can be an email, an ID, a reference, organization)"
      x-operation-settings:
        collectParameters: true
  "/customers/{id}.json":
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: The Chargify id of the customer
    get:
      summary: Read Customer
      tags:
        - Customers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: ../components/schemas/Customer-Response.yaml
      operationId: readCustomer
      description: This method allows to retrieve the Customer properties by Chargify-generated Customer ID.
      parameters: []
    put:
      summary: Update Customer
      tags:
        - Customers
      operationId: updateCustomer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Customer-Response.yaml"
              examples:
                Example:
                  value:
                    customer:
                      first_name: Martha
                      last_name: Washington
                      email: martha.washington@example.com
                      cc_emails: george.washington@example.com
                      organization: null
                      reference: null
                      id: 14967442
                      created_at: "2016-12-05T10:33:07-05:00"
                      updated_at: "2016-12-05T10:38:00-05:00"
                      address: null
                      address_2: null
                      city: null
                      state: null
                      zip: null
                      country: null
                      phone: null
                      verified: false
                      portal_customer_created_at: null
                      portal_invite_last_sent_at: null
                      portal_invite_last_accepted_at: null
                      tax_exempt: false
                      vat_number: "012345678"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Customer-Error-Response.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      customer: can't be blank
                Example-2:
                  value:
                    errors:
                      - "First name: cannot be blank."
                      - "Last name: cannot be blank."
                      - "Email address: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      description: This method allows to update the Customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Customer-Request.yaml"
            examples:
              Example:
                value:
                  customer:
                    first_name: Martha
                    last_name: Washington
                    email: martha.washington@example.com
    delete:
      summary: Delete Customer
      tags:
        - Customers
      operationId: deleteCustomer
      responses:
        "204":
          description: No Content
      description: This method allows you to delete the Customer.
  /customers/lookup.json:
    get:
      summary: Read Customer by Reference
      tags:
        - Customers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Customer-Response.yaml"
      operationId: readCustomerByReference
      description: Use this method to return the customer object if you have the unique **Reference ID (Your App)** value handy. It will return a single match.
      parameters:
        - schema:
            type: string
          in: query
          name: reference
          required: true
          description: Customer reference
      x-internal: false
  "/customers/{customer_id}/subscriptions.json":
    parameters:
      - $ref: "../components/parameters/customer-id-path.yaml"
    get:
      summary: List Customer Subscriptions
      tags:
        - Customers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Subscription-Response.yaml"
      operationId: listCustomerSubscriptions
      description: This method lists all subscriptions that belong to a customer.
  "/portal/customers/{customer_id}/enable.json":
    parameters:
      - $ref: "../components/parameters/customer-id-path.yaml"
    post:
      summary: Enable Billing Portal for Customer
      tags:
        - Billing Portal
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Customer-Response.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Portal is already enabled for this customer.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: enableBillingPortalForCustomer
      description: |-
        ## Billing Portal Documentation

        Full documentation on how the Billing Portal operates within the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407648972443).

        This documentation is focused on how the to configure the Billing Portal Settings, as well as Subscriber Interaction and Merchant Management of the Billing Portal.

        You can use this endpoint to enable Billing Portal access for a Customer, with the option of sending the Customer an Invitation email at the same time.

        ## Billing Portal Security

        If your customer has been invited to the Billing Portal, then they will receive a link to manage their subscription (the “Management URL”) automatically at the bottom of their statements, invoices, and receipts. **This link changes periodically for security and is only valid for 65 days.**

        If you need to provide your customer their Management URL through other means, you can retrieve it via the API. Because the URL is cryptographically signed with a timestamp, it is not possible for merchants to generate the URL without requesting it from Chargify.

        In order to prevent abuse & overuse, we ask that you request a new URL only when absolutely necessary. Management URLs are good for 65 days, so you should re-use a previously generated one as much as possible. If you use the URL frequently (such as to display on your website), please **do not** make an API request to Chargify every time.
      parameters:
        - schema:
            $ref: "../components/schemas/Auto-Invite.yaml"
          in: query
          name: auto_invite
          description: |-
            When set to 1, an Invitation email will be sent to the Customer.
            When set to 0, or not sent, an email will not be sent.
            Use in query: `auto_invite=1`.
  "/portal/customers/{customer_id}/management_link.json":
    parameters:
      - $ref: "../components/parameters/customer-id-path.yaml"
    get:
      summary: Read Billing Portal Management Link
      tags:
        - Billing Portal
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Portal-Management-Link.yaml"
              examples:
                Example:
                  value:
                    url: "https://www.billingportal.com/manage/19804639/1517596469/bd16498719a7d3e6"
                    fetch_count: 1
                    created_at: "2018-02-02T18:34:29Z"
                    new_link_available_at: "2018-02-17T18:34:29Z"
                    expires_at: "2018-04-08T17:34:29Z"
                    last_invite_sent_at: "2018-02-02T18:34:29Z"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Billing Portal is not enabled for this customer.
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Too-Many-Management-Link-Requests-Error.yaml"
              examples:
                Example:
                  value:
                    errors:
                      error: Too many requests for this customer's management link
                      new_link_available_at: 2023-10-20T10:46:56Z
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
          "429": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: readBillingPortalLink
      description: |-
        This method will provide to the API user the exact URL required for a subscriber to access the Billing Portal.

        ## Rules for Management Link API

        + When retrieving a management URL, multiple requests for the same customer in a short period will return the **same** URL
        + We will not generate a new URL for 15 days
        + You must cache and remember this URL if you are going to need it again within 15 days
        + Only request a new URL after the `new_link_available_at` date
        + You are limited to 15 requests for the same URL. If you make more than 15 requests before `new_link_available_at`, you will be blocked from further Management URL requests (with a response code `429`)
  "/portal/customers/{customer_id}/invitations/invite.json":
    parameters:
      - $ref: "../components/parameters/customer-id-path.yaml"
    post:
      summary: Resend Billing Portal Invitation
      tags:
        - Billing Portal
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Resent-Invitation.yaml"
              examples:
                Example:
                  value:
                    last_sent_at: enim Duis esse dolore
                    last_accepted_at: adipisicing magna do in irure
                    send_invite_link_text: veniam sit
                    uninvited_count: 66254678
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Too many requests for this customer. You can perform 5 requests within 00:30:00."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: resendBillingPortalInvitation
      description: |-
        You can resend a customer's Billing Portal invitation.

        If you attempt to resend an invitation 5 times within 30 minutes, you will receive a `422` response with `error` message in the body.

        If you attempt to resend an invitation when the Billing Portal is already disabled for a Customer, you will receive a `422` error response.

        If you attempt to resend an invitation when the Billing Portal is already disabled for a Customer, you will receive a `422` error response.

        If you attempt to resend an invitation when the Customer does not exist a Customer, you will receive a `404` error response.

        ## Limitations

        This endpoint will only return a JSON response.
  "/portal/customers/{customer_id}/invitations/revoke.json":
    parameters:
      - $ref: "../components/parameters/customer-id-path.yaml"
    delete:
      summary: Revoke Billing Portal Invitation for Customer
      tags:
        - Billing Portal
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Revoked-Invitation.yaml"
              examples:
                Example:
                  value:
                    last_sent_at: Not Invited
                    last_accepted_at: Invite Revoked
                    uninvited_count: 8
      operationId: revokeBillingPortalAccess
      description: |-
        You can revoke a customer's Billing Portal invitation.

        If you attempt to revoke an invitation when the Billing Portal is already disabled for a Customer, you will receive a 422 error response.

        ## Limitations

        This endpoint will only return a JSON response.
  /stats.json:
    get:
      summary: Read Site Stats
      tags:
        - Insights
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Site-Summary.yaml"
              examples:
                Example:
                  value:
                    seller_name: "Acme, Inc."
                    site_name: Production
                    site_id: 12345
                    site_currency: USD
                    stats:
                      total_subscriptions: 120
                      subscriptions_today: 4
                      total_revenue: "$45,978.81"
                      revenue_today: "$1,405.12"
                      revenue_this_month: "$10,000.00"
                      revenue_this_year: "$27,935.24"
      operationId: readSiteStats
      description: |-
        The Stats API is a very basic view of some Site-level stats. This API call only answers with JSON responses. An XML version is not provided.

        ## Stats Documentation

        There currently is not a complimentary matching set of documentation that compliments this endpoint. However, each Site's dashboard will reflect the summary of information provided in the Stats reposnse.

        ```
        https://subdomain.chargify.com/dashboard
        ```
  /referral_codes/validate.json:
    get:
      summary: Validate Referral Code
      tags:
        - Referral Codes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Referral-Validation-Response.yaml"
              examples:
                Example:
                  value:
                    referral_code:
                      id: 1032514
                      site_id: 31615
                      subscription_id: 16254270
                      code: 9b6cdw
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-String-Error-Response.yaml"
              examples:
                Example:
                  value:
                    errors: Referral code is invalid.
      x-operation-settings:
        ErrorTemplates:
          "404": "Invalid referral code."
      operationId: validateReferralCode
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: code
          description: The referral code you are trying to validate
      description: |-
        Use this method to determine if the referral code is valid and applicable within your Site. This method is useful for validating referral codes that are entered by a customer.

        ## Referrals Documentation

        Full documentation on how to use the referrals feature in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407802831643).

        ## Server Response

        If the referral code is valid the status code will be `200` and the referral code will be returned. If the referral code is invalid, a `404` response will be returned.
  /reason_codes.json:
    post:
      summary: Create Reason Code
      tags:
        - Reason Codes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Reason-Code-Response.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Code: cannot be blank."
                      - "Code: This code is already in use."
                      - "Description: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createReasonCode
      description: |-
        # Reason Codes Intro

        ReasonCodes are a way to gain a high level view of why your customers are cancelling the subcription to your product or service.

        Add a set of churn reason codes to be displayed in-app and/or the Chargify Billing Portal. As your subscribers decide to cancel their subscription, learn why they decided to cancel.

        ## Reason Code Documentation

        Full documentation on how Reason Codes operate within Chargify can be located under the following links.

        [Churn Reason Codes](https://chargify.zendesk.com/hc/en-us/articles/4407896775579#churn-reason-codes)

        ## Create Reason Code

        This method gives a merchant the option to create a reason codes for a given Site.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Reason-Code-Request.yaml"
            examples:
              Example:
                value:
                  reason_code:
                    code: NOTHANKYOU
                    description: No thank you!
                    position: 5
    get:
      summary: List Reason Codes
      tags:
        - Reason Codes
      operationId: listReasonCodes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Reason-Code-Response.yaml"
              examples:
                Example:
                  value:
                    - reason_code:
                        id: 2
                        site_id: 2
                        code: LARGE
                        description: This is too complicated
                        position: 1
                        created_at: "2017-02-16T16:49:07-05:00"
                        updated_at: "2017-02-17T16:29:51-05:00"
                    - reason_code:
                        id: 1
                        site_id: 2
                        code: CH1
                        description: This doesnt meet my needs
                        position: 2
                        created_at: "2017-02-16T16:48:45-05:00"
                        updated_at: "2017-02-17T16:29:59-05:00"
                    - reason_code:
                        id: 5
                        site_id: 2
                        code: HAN99
                        description: Hard to setup
                        position: 3
                        created_at: "2017-02-17T16:29:42-05:00"
                        updated_at: "2017-02-17T16:29:59-05:00"
      description: This method gives a merchant the option to retrieve a list of all of the current churn codes for a given site.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
  "/reason_codes/{reason_code_id}.json":
    parameters:
      - schema:
          type: integer
        name: reason_code_id
        in: path
        required: true
        description: The Chargify id of the reason code
    get:
      summary: Read Reason Code
      tags:
        - Reason Codes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Reason-Code-Response.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: readReasonCode
      description: This method gives a merchant the option to retrieve a list of a particular code for a given Site by providing the unique numerical ID of the code.
    put:
      summary: Update Reason Code
      tags:
        - Reason Codes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Reason-Code-Response.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: updateReasonCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Reason-Code-Request.yaml"
      description: This method gives a merchant the option to update an existing reason code for a given site.
    delete:
      summary: Delete Reason Code
      tags:
        - Reason Codes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Ok-Response.yaml"
              examples:
                Example:
                  value:
                    ok: ok
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: deleteReasonCode
      description: This method gives a merchant the option to delete one reason code from the Churn Reason Codes. This code will be immediately removed. This action is not reversable.
  "/{resource_type}/metafields.json":
    parameters:
      - $ref: "../components/parameters/resource-type.yaml"
    post:
      summary: Create Metafields
      tags:
        - Custom Fields
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Metafield.yaml"
              examples:
                Example:
                  value:
                    - name: Color
                      scope:
                        hosted: []
                        csv: "0"
                        statements: "0"
                        invoices: "0"
                        portal: "0"
                      data_count: 0
                      input_type: text
                      enum: null
                    - name: Brand
                      scope:
                        hosted: []
                        csv: "0"
                        statements: "0"
                        invoices: "0"
                        portal: "0"
                      data_count: 0
                      input_type: text
                      enum: null
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
              examples:
                Example:
                  value:
                    error: "'name' must be present to create or update metafields"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createMetafields
      description: |-
        ## Custom Fields: Metafield Intro

        **Chargify refers to Custom Fields in the API documentation as metafields and metadata.** Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata.

        + **Metafield is the custom field**
        + **Metadata is the data populating the custom field.**

        Chargify Metafields are used to add meaningful attributes to subscription and customer resources. Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405332553613-Custom-Fields-Reference). For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404434903181-Subscription-Summary#custom-fields)

        Metafield are the place where you will set up your resource to accept additional data. It is scoped to the site instead of a specific customer or subscription. Think of it as the key, and Metadata as the value on every record.

        ## Create Metafields

        Use this endpoint to create metafields for your Site. Metafields can be populated with metadata after the fact.

        Each site is limited to 100 unique Metafields (i.e. keys, or names) per resource. This means you can have 100 Metafields for Subscription and another 100 for Customer.

        ### Metafields "On-the-Fly"

        It is possible to create Metafields “on the fly” when you create your Metadata – if a non-existant name is passed when creating Metadata, a Metafield for that key will be automatically created. The Metafield API, however, gives you more control over your “keys”.

        ### Metafield Scope Warning

        If configuring metafields in the Admin UI or via the API, be careful sending updates to metafields with the scope attribute – **if a partial update is sent it will overwrite the current configuration**.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Metafields-Request.yaml"
            examples:
              Single-Metafield:
                value:
                  metafields:
                    name: Dropdown field
                    input_type: dropdown
                    enum:
                      - option 1
                      - option 2
                    scope:
                      public_edit: "1"
                      public_show: "1"
              Multiple-Metafields:
                value:
                  metafields:
                    - name: Color
                    - name: Brand
      parameters: []
    get:
      summary: List Metafields
      tags:
        - Custom Fields
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Metafields-Response.yaml"
              examples:
                example-1:
                  value:
                    total_count: 0
                    current_page: 0
                    total_pages: 0
                    per_page: 0
                    metafields:
                      - id: 0
                        name: string
                        scope:
                          csv: "0"
                          statements: "0"
                          invoices: "0"
                          portal: "0"
                          public_show: "0"
                          public_edit: "0"
                        data_count: 0
                        input_type: text
                        enum: null
      operationId: listMetafields
      description: This endpoint lists metafields associated with a site. The metafield description and usage is contained in the response.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: filter by the name of the metafield
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - $ref: "../components/parameters/sort-direction.yaml"
      x-operation-settings:
        collectParameters: true
    put:
      summary: Update Metafield
      tags:
        - Custom Fields
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Metafield.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
              examples:
                Example:
                  value:
                    error: "Metafield name must be unique for the Attachment Type"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateMetafield
      description: Use the following method to update metafields for your Site. Metafields can be populated with metadata after the fact.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Metafields-Request.yaml"
    delete:
      tags:
        - Custom Fields
      summary: Delete Metafield
      operationId: deleteMetafield
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      description: |-
        Use the following method to delete a metafield. This will remove the metafield from the Site.

        Additionally, this will remove the metafield and associated metadata with all Subscriptions on the Site.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: The name of the metafield to be deleted
  "/{resource_type}/{resource_id}/metadata.json":
    parameters:
      - $ref: "../components/parameters/resource-type.yaml"
      - schema:
          type: integer
        name: resource_id
        in: path
        required: true
        description: The Chargify id of the customer or the subscription for which the metadata applies
    post:
      summary: Create Metadata
      tags:
        - Custom Fields
      operationId: createMetadata
      description: |-
        ## Custom Fields: Metadata Intro

        **Chargify refers to Custom Fields in the API documentation as metafields and metadata.** Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata.

        + **Metafield is the custom field**
        + **Metadata is the data populating the custom field.**

        Chargify Metafields are used to add meaningful attributes to subscription and customer resources. Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407659856411). For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://chargify.zendesk.com/hc/en-us/articles/4407884887835#custom-fields)

        Metadata is associated to a customer or subscription, and corresponds to a Metafield. When creating a new metadata object for a given record, **if the metafield is not present it will be created**.

        ## Metadata limits

        Metadata values are limited to 2kB in size. Additonally, there are limits on the number of unique metafields available per resource.

        ## Create Metadata

        This method will create a metafield for the site on the fly if it does not already exist, and populate the metadata value.

        ### Subscription or Customer Resource

        Please pay special attention to the resource you use when creating metadata.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Metadata-Request.yaml"
            examples:
              Example:
                value:
                  metadata:
                    - name: Color
                      value: Blue
                    - name: Something
                      value: Useful
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Metadata.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
              examples:
                Example:
                  value:
                    error: "'name' must be present to create or update metafields"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
    get:
      summary: List Metadata
      tags:
        - Custom Fields
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Paginated-Metadata.yaml"
      operationId: listMetadata
      description: |-
        This request will list all of the metadata belonging to a particular resource (ie. subscription, customer) that is specified.

        ## Metadata Data

        This endpoint will also display the current stats of your metadata to use as a tool for pagination.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
    put:
      summary: Update Metadata
      tags:
        - Custom Fields
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Metadata.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
              examples:
                Example:
                  value:
                    error: "'name' must be present to create or update metafields"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateMetadata
      description: This method allows you to update the existing metadata associated with a subscription or customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Metadata-Request.yaml"
    delete:
      summary: Delete Metadata
      tags:
        - Custom Fields
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: deleteMetadata
      description: |-
        This method removes the metadata from the subscriber/customer cited.

        ## Query String Usage

        For instance if you wanted to delete the metadata for customer 99 named weight you would request:

        ```
        https://acme.chargify.com/customers/99/metadata.json?name=weight
        ```

        If you want to delete multiple metadata fields for a customer 99 named: `weight` and `age` you wrould request:
        ```
        https://acme.chargify.com/customers/99/metadata.json?names[]=weight&names[]=age
        ```

        ## Successful Response

        For a success, there will be a code `200` and the plain text response `true`.

        ## Unsuccessful Response

        When a failed response is encountered, you will receive a `404` response and the plain text response of `true`.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: Name of field to be removed.
        - schema:
            type: array
            items:
              type: string
          in: query
          description: "Names of fields to be removed. Use in query: `names[]=field1&names[]=my-field&names[]=another-field`."
          name: "names[]"
          style: form
          explode: true
  "/{resource_type}/metadata.json":
    parameters:
      - $ref: "../components/parameters/resource-type.yaml"
    get:
      summary: List Metadata for Resource Type
      tags:
        - Custom Fields
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Paginated-Metadata.yaml"
      operationId: listMetadataForResourceType
      description: |-
        This method will provide you information on usage of metadata across your selected resource (ie. subscriptions, customers)

        ## Metadata Data

        This endpoint will also display the current stats of your metadata to use as a tool for pagination.

        ### Metadata for multiple records

        `https://acme.chargify.com/subscriptions/metadata.json?resource_ids[]=1&resource_ids[]=2`

        ## Read Metadata for a Site

        This endpoint will list the number of pages of metadata information that are contained within a site.
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
            format: date
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns metadata with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
            format: date
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns metadata with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
            format: date-time
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns metadata with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: string
            format: date-time
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns metadata with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
        - schema:
            type: boolean
          in: query
          name: with_deleted
          description: "Allow to fetch deleted metadata."
        - schema:
            type: array
            items:
              type: integer
            maxItems: 50
          in: query
          name: "resource_ids[]"
          style: form
          explode: true
          description: "Allow to fetch metadata for multiple records based on provided ids. Use in query: `resource_ids[]=122&resource_ids[]=123&resource_ids[]=124`."
        - $ref: "../components/parameters/sort-direction.yaml"
      x-operation-settings:
        collectParameters: true
  "/product_families/{product_family_id}/coupons.json":
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the coupon belongs
    post:
      summary: Create Coupon
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Response.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Expiration Date cannot be in the past
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createCoupon
      description: |-
        ## Coupons Documentation

        Coupons can be administered in the Chargify application or created via API. Please view our section on [creating coupons](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404742830733) for more information.

        Additionally, for documentation on how to apply a coupon to a subscription within the Chargify UI, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404761012877).

        ## Create Coupon

        This request will create a coupon, based on the provided information.

        When creating a coupon, you must specify a product family using the `product_family_id`. If no `product_family_id` is passed, the first product family available is used. You will also need to formulate your URL to cite the Product Family ID in your request.

        You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
        `{ "<product/component_id>": boolean_value }`
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-or-Update-Coupon.yaml"
            examples:
              Percentage Coupon Example:
                value:
                  coupon:
                    name: "15% off"
                    code: "15OFF"
                    description: "15% off for life"
                    percentage: 15
                    allow_negative_balance: false
                    recurring: false
                    end_date: "2012-08-29T12:00:00-04:00"
                    product_family_id: "2"
                    stackable: true
                    compounding_strategy: compound
                    exclude_mid_period_allocations: true
                    apply_on_cancel_at_end_of_period: true
                  restricted_products:
                    "1": true
                  restricted_components:
                    "1": true
                    "2": false
              Flat Amount Coupon Example:
                value:
                  coupon:
                    name: "$10 off"
                    code: "10OFF"
                    description: "$10 off for life"
                    amount_in_cents: 1000
                    allow_negative_balance: false
                    recurring: false
                    end_date: "2012-08-29T12:00:00-04:00"
                    product_family_id: "2"
                    stackable: true
                    compounding_strategy: compound
                    exclude_mid_period_allocations: true
                    apply_on_cancel_at_end_of_period: true
                  restricted_products:
                    "1": true
                  restricted_components:
                    "1": true
                    "2": false
        description: ""
    get:
      summary: List Coupons for Product Family
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Coupon-Response.yaml"
              examples:
                example:
                  value:
                    - coupon:
                        id: 999999
                        name: "50% coupon"
                        code: "50PERCENT"
                        description: "50 PERCENT OFF"
                        amount_in_cents: null
                        product_family_id: 527890
                        created_at: "2016-10-21T17:02:08-04:00"
                        updated_at: "2016-10-21T17:06:11-04:00"
                        start_date: "2016-10-21T17:02:08-04:00"
                        end_date: null
                        percentage: "50"
                        recurring: true
                        duration_period_count: null
                        duration_interval: 1
                        duration_interval_unit: "day"
                        allow_negative_balance: true
                        archived_at: null
                        conversion_limit: "100"
                        stackable: false
                        compounding_strategy: compound
                        coupon_restrictions: []
                        use_site_exchange_rate: true
                    - coupon:
                        id: 123456
                        name: "100% coupon"
                        code: "100PERCENT"
                        description: "100 PERCENT OFF"
                        amount_in_cents: null
                        product_family_id: 527890
                        created_at: "2016-10-21T17:02:08-04:00"
                        updated_at: "2016-10-21T17:06:11-04:00"
                        start_date: "2016-10-21T17:02:08-04:00"
                        end_date: null
                        percentage: "50"
                        recurring: true
                        duration_period_count: null
                        duration_interval: 1
                        duration_interval_unit: "day"
                        allow_negative_balance: true
                        archived_at: null
                        conversion_limit: "100"
                        stackable: false
                        compounding_strategy: compound
                        coupon_restrictions: []
                        use_site_exchange_rate: true
                    - coupon:
                        id: 888888
                        name: "25% coupon"
                        code: "25PERCENT"
                        description: "25 PERCENT OFF"
                        amount_in_cents: null
                        product_family_id: 527890
                        created_at: "2016-10-21T17:02:08-04:00"
                        updated_at: "2016-10-21T17:06:11-04:00"
                        start_date: "2016-10-21T17:02:08-04:00"
                        end_date: null
                        percentage: "25"
                        recurring: true
                        duration_period_count: null
                        duration_interval: 1
                        duration_interval_unit: "day"
                        allow_negative_balance: true
                        archived_at: null
                        conversion_limit: "100"
                        stackable: false
                        compounding_strategy: compound
                        coupon_restrictions:
                          - id: 37
                            item_type: Component
                            item_id: 519
                            name: "test"
                            handle: null
                        use_site_exchange_rate: true
      operationId: listCouponsForProductFamily
      description: |-
        List coupons for a specific Product Family in a Site.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-default-30.yaml"
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          name: "filter[date_field]"
          description:
            "The type of filter you would like to apply to your search.
            Use in query `filter[date_field]=created_at`."
        - schema:
            type: string
            format: date
            example: "2011-12-15"
          in: query
          name: "filter[end_date]"
          description:
            "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns coupons with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified.
            Use in query `filter[date_field]=2011-12-15`."
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          name: "filter[end_datetime]"
          description:
            "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date.
            Use in query `?filter[end_datetime]=2011-12-1T10:15:30+01:00`."
        - schema:
            type: string
            format: date
            example: "2011-12-17"
          in: query
          name: "filter[start_date]"
          description:
            "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns coupons with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified.
            Use in query `filter[start_date]=2011-12-17`."
        - schema:
            type: string
            format: date-time
            example: "2011-12-19T10:15:30+01:00"
          in: query
          description:
            "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date.
            Use in query `filter[start_datetime]=2011-12-19T10:15:30+01:00`."
          name: "filter[start_datetime]"
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
            minItems: 1
          in: query
          name: "filter[ids]"
          description:
            "Allows fetching coupons with matching id based on provided values.
            Use in query `filter[ids]=1,2,3`."
          style: form
          explode: false
        - schema:
            type: array
            items:
              type: string
            example:
              - free
              - free_trial
          in: query
          name: "filter[codes]"
          description:
            "Allows fetching coupons with matching codes based on provided values.
            Use in query `filter[codes]=free,free_trial`."
          style: form
          explode: false
        - schema:
            type: boolean
            example: true
          in: query
          name: currency_prices
          description:
            "When fetching coupons, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.
            Use in query `currency_prices=true`."
        - schema:
            type: boolean
            example: true
          in: query
          description:
            "Allows fetching coupons with matching use_site_exchange_rate based on provided value.
            Use in query `filter[use_site_exchange_rate]=true`."
          name: "filter[use_site_exchange_rate]"
      x-operation-settings:
        collectParameters: true
  /coupons/find.json:
    get:
      summary: Find Coupon
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Response.yaml"
      operationId: findCoupon
      description: |-
        You can search for a coupon via the API with the find method. By passing a code parameter, the find will attempt to locate a coupon that matches that code. If no coupon is found, a 404 is returned.

        If you have more than one product family and if the coupon you are trying to find does not belong to the default product family in your site, then you will need to specify (either in the url or as a query string param) the product family id.
      parameters:
        - schema:
            type: integer
          in: query
          name: product_family_id
          description: The Chargify id of the product family to which the coupon belongs
        - schema:
            type: string
          in: query
          name: code
          description: The code of the coupon
  "/product_families/{product_family_id}/coupons/{coupon_id}.json":
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the coupon belongs
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    get:
      summary: Read Coupon
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Response.yaml"
              examples:
                Example:
                  value:
                    coupon:
                      id: 67
                      name: Foo Bar
                      code: YEPPER99934
                      description: my cool coupon
                      amount_in_cents: null
                      product_family_id: 4
                      product_family_name: Billing Plans
                      created_at: "2017-11-08T10:01:15-05:00"
                      updated_at: "2017-11-08T10:01:15-05:00"
                      start_date: "2017-11-08T10:01:15-05:00"
                      end_date: null
                      percentage: "33.3333"
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: null
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: compound
                      coupon_restrictions: []
      operationId: readCoupon
      description: |-
        You can retrieve the Coupon via the API with the Show method. You must identify the Coupon in this call by the ID parameter that Chargify assigns.
        If instead you would like to find a Coupon using a Coupon code, see the Coupon Find method.

        When fetching a coupon, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters: []
    put:
      summary: Update Coupon
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Response.yaml"
              examples:
                Example:
                  value:
                    coupon:
                      id: 67
                      name: Foo Bar
                      code: YEPPER99934
                      description: my cool coupon
                      amount_in_cents: 10000
                      product_family_id: 4
                      created_at: "2017-11-08T10:01:15-05:00"
                      updated_at: "2017-11-08T10:01:15-05:00"
                      start_date: "2017-11-08T10:01:15-05:00"
                      end_date: null
                      percentage: null
                      recurring: false
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: null
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: compound
                      coupon_restrictions: []
      operationId: updateCoupon
      description: |-
        ## Update Coupon

        You can update a Coupon via the API with a PUT request to the resource endpoint.

        You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
        `{ "<product/component_id>": boolean_value }`
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-or-Update-Coupon.yaml"
            examples:
              Example:
                value:
                  coupon:
                    name: "15% off"
                    code: "15OFF"
                    description: "15% off for life"
                    percentage: 15
                    allow_negative_balance: false
                    recurring: false
                    end_date: "2012-08-29T12:00:00-04:00"
                    product_family_id: "2"
                    stackable: true
                    compounding_strategy: compound
                  restricted_products:
                    "1": true
                  restricted_components:
                    "1": true
                    "2": false
        description: ""
    delete:
      summary: Archive Coupon
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Response.yaml"
              examples:
                Example:
                  value:
                    coupon:
                      id: 67
                      name: Foo Bar
                      code: YEPPER99934
                      description: my cool coupon
                      amount_in_cents: 10000
                      product_family_id: 4
                      created_at: "2017-11-08T10:01:15-05:00"
                      updated_at: "2017-11-08T10:01:15-05:00"
                      start_date: "2017-11-08T10:01:15-05:00"
                      end_date: null
                      percentage: null
                      recurring: false
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: "2016-12-02T13:09:33-05:00"
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: compound
                      coupon_restrictions: []
      operationId: archiveCoupon
      description: |-
        You can archive a Coupon via the API with the archive method.
        Archiving makes that Coupon unavailable for future use, but allows it to remain attached and functional on existing Subscriptions that are using it.
        The `archived_at` date and time will be assigned.
  /coupons.json:
    get:
      summary: List Coupons
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Coupon-Response.yaml"
              examples:
                example:
                  value:
                    - coupon:
                        id: 0
                        name: string
                        code: string
                        description: string
                        amount: 0
                        amount_in_cents: 0
                        product_family_id: 0
                        product_family_name: string
                        start_date: "2021-05-03T16:00:21-04:00"
                        end_date: "2023-05-05T16:00:21-04:00"
                        percentage: "10"
                        recurring: true
                        recurring_scheme: do_not_recur
                        duration_period_count: 0
                        duration_interval: 0
                        duration_interval_unit: string
                        duration_interval_span: string
                        allow_negative_balance: true
                        archived_at: null
                        conversion_limit: string
                        stackable: true
                        compounding_strategy: compound
                        use_site_exchange_rate: true
                        created_at: "2021-05-05T16:00:21-04:00"
                        updated_at: "2021-05-05T16:00:21-04:00"
                        discount_type: amount
                        exclude_mid_period_allocations: true
                        apply_on_cancel_at_end_of_period: true
                        coupon_restrictions:
                          - id: 0
                            item_type: Component
                            item_id: 0
                            name: string
                            handle: string
      operationId: listCoupons
      description: |-
        You can retrieve a list of coupons.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-default-30.yaml"
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          description: "The field was deprecated: on January 20, 2022. We recommend using filter[date_field] instead to achieve the same result. The type of filter you would like to apply to your search."
          name: date_field
          deprecated: true
        - schema:
            type: string
            format: date
            example: "2011-12-17"
          in: query
          name: start_date
          description: "The field was deprecated: on January 20, 2022. We recommend using filter[start_date] instead to achieve the same result. The start date (format YYYY-MM-DD) with which to filter the date_field. Returns coupons with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
          deprecated: true
        - schema:
            type: string
            format: date
          in: query
          description: "The field was deprecated: on January 20, 2022. We recommend using filter[end_date] instead to achieve the same result. The end date (format YYYY-MM-DD) with which to filter the date_field. Returns coupons with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
          name: end_date
          deprecated: true
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          description: "The field was deprecated: on January 20, 2022. We recommend using filter[start_datetime] instead to achieve the same result. The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
          name: start_datetime
          deprecated: true
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          description: "The field was deprecated: on January 20, 2022. We recommend using filter[end_datetime] instead to achieve the same result. The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
          name: end_datetime
          deprecated: true
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
            minItems: 1
          in: query
          name: "filter[ids]"
          description:
            "Allows fetching coupons with matching id based on provided values.
            Use in query `filter[ids]=1,2,3`."
          style: form
          explode: false
        - schema:
            type: array
            items:
              type: string
            minItems: 1
            example:
              - free
              - free_trial
          in: query
          name: "filter[codes]"
          description:
            "Allows fetching coupons with matching code based on provided values.
            Use in query `filter[ids]=1,2,3`."
          style: form
          explode: false
        - schema:
            type: boolean
            example: true
          in: query
          name: currency_prices
          description:
            "When fetching coupons, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.
            Use in query `currency_prices=true`."
        - schema:
            type: string
            format: date
          in: query
          name: "filter[end_date]"
          description:
            "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns coupons with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified.
            Use in query `filter[end_date]=2011-12-17`."
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          name: "filter[end_datetime]"
          description:
            "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date.
            Use in query `filter[end_datetime]=2011-12-19T10:15:30+01:00`."
        - schema:
            type: string
            format: date
            example: "2011-12-17"
          in: query
          name: "filter[start_date]"
          description:
            "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns coupons with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified.
            Use in query `filter[start_date]=2011-12-19`."
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          name: "filter[start_datetime]"
          description:
            "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date.
            Use in query `filter[start_datetime]=2011-12-19T10:15:30+01:00`."
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          name: "filter[date_field]"
          description:
            "The type of filter you would like to apply to your search.
            Use in query `filter[date_field]=updated_at`."
        - schema:
            type: boolean
            example: true
          in: query
          description:
            "Allows fetching coupons with matching use_site_exchange_rate based on provided value.
            Use in query `filter[use_site_exchange_rate]=true`."
          name: "filter[use_site_exchange_rate]"
      x-operation-settings:
        collectParameters: true
  "/product_families/{product_family_id}/coupons/{coupon_id}/usage.json":
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the coupon belongs
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    get:
      summary: List Coupon Usages
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Coupon-Usage.yaml"
              examples:
                Example:
                  value:
                    - name: No cost product
                      id: 3903594
                      signups: 0
                      savings: 0
                      savings_in_cents: 0
                      revenue: 0
                      revenue_in_cents: 0
                    - name: Product that expires
                      id: 3853680
                      signups: 0
                      savings: 0
                      savings_in_cents: 0
                      revenue: 0
                      revenue_in_cents: 0
                    - name: Trial Product
                      id: 3861800
                      signups: 1
                      savings: 30
                      savings_in_cents: 3000
                      revenue: 20
                      revenue_in_cents: 2000
      operationId: readCouponUsage
      description: "This request will provide details about the coupon usage as an array of data hashes, one per product."
  /coupons/validate.json:
    get:
      summary: Validate Coupon
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Response.yaml"
              examples:
                Example:
                  value:
                    coupon:
                      id: 66
                      name: Foo Bar
                      code: YEPPER9993
                      description: my cool coupon
                      amount_in_cents: 10000
                      product_family_id: 4
                      created_at: "2017-11-07T14:51:52-05:00"
                      updated_at: "2017-11-07T15:14:24-05:00"
                      start_date: "2017-11-07T14:51:52-05:00"
                      end_date: null
                      percentage: null
                      recurring: false
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: null
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: full-price
                      coupon_restrictions: []
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-String-Error-Response.yaml"
              examples:
                Example:
                  value:
                    errors: Coupon code could not be found.
      x-operation-settings:
        errorTemplates:
          "404": "Not Found: '{$response.body}'"
      operationId: validateCoupon
      description: |-
        You can verify if a specific coupon code is valid using the `validate` method. This method is useful for validating coupon codes that are entered by a customer. If the coupon is found and is valid, the coupon will be returned with a 200 status code.

        If the coupon is invalid, the status code will be 404 and the response will say why it is invalid. If the coupon is valid, the status code will be 200 and the coupon will be returned. The following reasons for invalidity are supported:

        + Coupon not found
        + Coupon is invalid
        + Coupon expired

        If you have more than one product family and if the coupon you are validating does not belong to the first product family in your site, then you will need to specify the product family, either in the url or as a query string param. This can be done by supplying the id or the handle in the `handle:my-family` format.

        Eg.

        ```
        https://<subdomain>.chargify.com/product_families/handle:<product_family_handle>/coupons/validate.<format>?code=<coupon_code>
        ```

        Or:

        ```
        https://<subdomain>.chargify.com/coupons/validate.<format>?code=<coupon_code>&product_family_id=<id>
        ```
      parameters:
        - schema:
            type: string
          in: query
          name: code
          required: true
          description: The code of the coupon
        - schema:
            type: integer
          in: query
          name: product_family_id
          description: The Chargify id of the product family to which the coupon belongs
  "/coupons/{coupon_id}/currency_prices.json":
    parameters:
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    put:
      summary: Create / Update Currency Prices
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Currency-Response.yaml"
      operationId: createOrUpdateCouponCurrencyPrices
      description: |-
        This endpoint allows you to create and/or update currency prices for an existing coupon. Multiple prices can be created or updated in a single request but each of the currencies must be defined on the site level already and the coupon must be an amount-based coupon, not percentage.

        Currency pricing for coupons must mirror the setup of the primary coupon pricing - if the primary coupon is percentage based, you will not be able to define pricing in non-primary currencies.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Coupon-Currency-Request.yaml"
            examples:
              Example:
                value:
                  currency_prices:
                    - currency: EUR
                      price: 10
                    - currency: GBP
                      price: 9
  "/coupons/{coupon_id}/codes.json":
    parameters:
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    post:
      summary: Create Coupon Subcodes
      tags:
        - Coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Subcodes-Response.yaml"
              examples:
                Example:
                  value:
                    created_codes:
                      - BALTIMOREFALL
                      - ORLANDOFALL
                      - DETROITFALL
                    duplicate_codes: []
                    invalid_codes: []
      operationId: createCouponSubcodes
      description: |-
        ## Coupon Subcodes Intro

        Coupon Subcodes allow you to create a set of unique codes that allow you to expand the use of one coupon.

        For example:

        Master Coupon Code:

        + SPRING2020

        Coupon Subcodes:

        + SPRING90210
        + DP80302
        + SPRINGBALTIMORE

        Coupon subcodes can be administered in the Admin Interface or via the API.

        When creating a coupon subcode, you must specify a coupon to attach it to using the coupon_id. Valid coupon subcodes are all capital letters, contain only letters and numbers, and do not have any spaces. Lowercase letters will be capitalized before the subcode is created.

        ## Coupon Subcodes Documentation

        Full documentation on how to create coupon subcodes in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407755909531#coupon-codes).

        Additionally, for documentation on how to apply a coupon to a Subscription within the Chargify UI, please see our documentation [here](https://chargify.zendesk.com/hc/en-us/articles/4407884887835#coupon).

        ## Create Coupon Subcode

        This request allows you to create specific subcodes underneath an existing coupon code.

        *Note*: If you are using any of the allowed special characters ("%", "@", "+", "-", "_", and "."), you must encode them for use in the URL.

            % to %25
            @ to %40
            + to %2B
            - to %2D
            _ to %5F
            . to %2E

        So, if the coupon subcode is `20%OFF`, the URL to delete this coupon subcode would be: `https://<subdomain>.chargify.com/coupons/567/codes/20%25OFF.<format>`
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Subcodes.yaml"
            examples:
              Example:
                value:
                  codes:
                    - BALTIMOREFALL
                    - ORLANDOFALL
                    - DETROITFALL
    get:
      summary: List Coupon Subcodes
      tags:
        - Coupons
      operationId: listCouponSubcodes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subcodes.yaml"
              examples:
                Example:
                  value:
                    codes:
                      - 3JU6PR
                      - 9RO6MP
                      - 8OG1VV
                      - 5FL7VV
                      - 2SV8XK
                      - 4LW8LH
                      - 3VL4GZ
                      - 9UI9XO
                      - 0LZ0CC
                      - 8XI9JV
                      - 9UV5YE
                      - 3UI4GX
                      - 6SL5ST
                      - 9WC8IJ
                      - 2KA3PZ
                      - 7WR1VR
                      - 3VY7MN
                      - 6KC3KB
                      - 7DF7YT
                      - 9FH1ED
      description: This request allows you to request the subcodes that are attached to a coupon.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
    put:
      summary: Update Coupon Subcodes
      tags:
        - Coupons
      operationId: updateCouponSubcodes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Coupon-Subcodes-Response.yaml"
      description: |-
        You can update the subcodes for the given Coupon via the API with a PUT request to the resource endpoint.
        Send an array of new coupon subcodes.

        **Note**: All current subcodes for that Coupon will be deleted first, and replaced with the list of subcodes sent to this endpoint.
        The response will contain:

        + The created subcodes,

        + Subcodes that were not created because they already exist,

        + Any subcodes not created because they are invalid.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Subcodes.yaml"
            examples:
              Example:
                value:
                  codes:
                    - AAAA
                    - BBBB
                    - CCCC
  "/coupons/{coupon_id}/codes/{subcode}.json":
    parameters:
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon to which the subcode belongs
      - schema:
          type: string
        name: subcode
        in: path
        required: true
        description: The subcode of the coupon
    delete:
      summary: Delete Coupon Subcode
      tags:
        - Coupons
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: deleteCouponSubcode
      description: |-
        ## Example

        Given a coupon with an ID of 567, and a coupon subcode of 20OFF, the URL to `DELETE` this coupon subcode would be:

        ```
        http://subdomain.chargify.com/coupons/567/codes/20OFF.<format>
        ```

        Note: If you are using any of the allowed special characters (“%”, “@”, “+”, “-”, “_”, and “.”), you must encode them for use in the URL.

        | Special character | Encoding |
        |-------------------|----------|
        | %                 | %25      |
        | @                 | %40      |
        | +                 | %2B      |
        | –                 | %2D      |
        | _                 | %5F      |
        | .                 | %2E      |

        ## Percent Encoding Example

        Or if the coupon subcode is 20%OFF, the URL to delete this coupon subcode would be: @https://<subdomain>.chargify.com/coupons/567/codes/20%25OFF.<format>
  /events.json:
    get:
      summary: List Events
      tags:
        - Events
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ""
                minItems: 1
                uniqueItems: true
                items:
                  $ref: "../components/schemas/Event-Response.yaml"
                x-examples:
                  example-1:
                    - event:
                        id: 343087780
                        key: subscription_state_change
                        message: State changed on Test subscription to Monthly Product from active to past_due
                        subscription_id: 14950962
                        customer_id: 12345678
                        created_at: "2016-10-27T16:42:22-04:00"
                        event_specific_data:
                          previous_subscription_state: active
                          new_subscription_state: past_due
                    - event:
                        id: 343087742
                        key: billing_date_change
                        message: Billing date changed on Test's subscription to Monthly Product from 11/27/2016 to 10/27/2016
                        subscription_id: 14950962
                        customer_id: 12345678
                        created_at: "2016-10-27T16:42:19-04:00"
                        event_specific_data: null
                    - event:
                        id: 343085267
                        key: statement_closed
                        message: Statement 79401838 closed (but not settled) for Test's subscription to ANNUAL product
                        subscription_id: 14950975
                        customer_id: 87654321
                        created_at: "2016-10-27T16:40:40-04:00"
                        event_specific_data: null
              examples:
                Example:
                  value:
                    - event:
                        id: 343087780
                        key: subscription_state_change
                        message: State changed on Test subscription to Monthly Product from active to past_due
                        subscription_id: 14950962
                        customer_id: 12345678
                        created_at: "2016-10-27T16:42:22-04:00"
                        event_specific_data:
                          previous_subscription_state: active
                          new_subscription_state: past_due
                    - event:
                        id: 343087742
                        key: billing_date_change
                        message: Billing date changed on Test's subscription to Monthly Product from 11/27/2016 to 10/27/2016
                        subscription_id: 14950962
                        customer_id: 12345678
                        created_at: "2016-10-27T16:42:19-04:00"
                        event_specific_data: null
                    - event:
                        id: 343085267
                        key: statement_closed
                        message: Statement 79401838 closed (but not settled) for Test's subscription to ANNUAL product
                        subscription_id: 14950975
                        customer_id: 87654321
                        created_at: "2016-10-27T16:40:40-04:00"
                        event_specific_data: null
                    - event:
                        id: 4481
                        key: custom_field_value_change
                        message: Custom field (Extra support included) changed for Subscription 117 from 'Yes' to 'No'.
                        subscription_id: 117
                        customer_id: 22334455
                        created_at: "2022-03-24T07:55:06-04:00"
                        event_specific_data:
                          event_type: updated
                          metafield_name: Extra support included
                          metafield_id: 2
                          old_value: "Yes"
                          new_value: "No"
                          resource_type: Subscription
                          resource_id: 117
            application/xml:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Event-Response.yaml"
            multipart/form-data:
              schema:
                type: array
                items: {}
      operationId: listEvents
      description: |-
        ## Events Intro

        Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.

        Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).

        ## List Events for a Site

        This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.

        ### Legacy Filters

        The following keys are no longer supported.

        + `payment_failure_recreated`
        + `payment_success_recreated`
        + `renewal_failure_recreated`
        + `renewal_success_recreated`
        + `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
        + `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)

        ## Event Specific Data

        Event Specific Data

        Each event type has its own `event_specific_data` specified.

        Here’s an example event for the `subscription_product_change` event:

        ```
        {
            "event": {
                "id": 351,
                "key": "subscription_product_change",
                "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
                "subscription_id": 205,
                "event_specific_data": {
                    "new_product_id": 3,
                    "previous_product_id": 2
                },
                "created_at": "2012-01-30T10:43:31-05:00"
            }
        }
        ```

        Here’s an example event for the `subscription_state_change` event:

        ```
         {
             "event": {
                 "id": 353,
                 "key": "subscription_state_change",
                 "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
                 "subscription_id": 205,
                 "event_specific_data": {
                     "new_subscription_state": "active",
                     "previous_subscription_state": "trialing"
                 },
                 "created_at": "2012-01-30T10:43:33-05:00"
             }
         }
        ```
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: integer
          in: query
          name: since_id
          description: Returns events with an id greater than or equal to the one specified
        - schema:
            type: integer
          in: query
          name: max_id
          description: Returns events with an id less than or equal to the one specified
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: direction
          description: The sort direction of the returned events.
        - $ref: "../components/parameters/event-type-filter.yaml"
        - schema:
            $ref: "../components/schemas/List-Events-Date-Field.yaml"
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: string
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
      x-operation-settings:
        collectParameters: true
  "/subscriptions/{subscription_id}/events.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    get:
      summary: List Events for Subscription
      tags:
        - Events
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Event-Response.yaml"
              examples:
                Example:
                  value:
                    - event:
                        id: 344799837
                        key: statement_settled
                        message: Statement 79702531 settled successfully for Amelia Example's subscription to Basic Plan
                        subscription_id: 14900541
                        customer_id: 77223344
                        created_at: "2016-11-01T12:41:29-04:00"
                        event_specific_data: null
                    - event:
                        id: 344799815
                        key: renewal_success
                        message: Successful renewal for Amelia Example's subscription to Basic Plan
                        subscription_id: 14900541
                        customer_id: 77223344
                        created_at: "2016-11-01T12:41:28-04:00"
                        event_specific_data:
                          product_id: 3792003
                          account_transaction_id: 7590246
                    - event:
                        id: 344799705
                        key: billing_date_change
                        message: Billing date changed on Amelia Example's subscription to Basic Plan from 11/26/2016 to 11/01/2016
                        subscription_id: 14900541
                        customer_id: 77223344
                        created_at: "2016-11-01T12:41:25-04:00"
                        event_specific_data: null
      operationId: listSubscriptionEvents
      description: |-
        The following request will return a list of events for a subscription.

        Each event type has its own `event_specific_data` specified.
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: integer
          in: query
          name: since_id
          description: Returns events with an id greater than or equal to the one specified
        - schema:
            type: integer
          in: query
          name: max_id
          description: Returns events with an id less than or equal to the one specified
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: direction
          description: The sort direction of the returned events.
        - $ref: "../components/parameters/event-type-filter.yaml"
      x-operation-settings:
        collectParameters: true
  /events/count.json:
    get:
      summary: Read Total Event Count
      tags:
        - Events
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Count-Response.yaml"
              examples:
                Example:
                  value:
                    count: 144
      operationId: readEventsCount
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: integer
          in: query
          name: since_id
          description: Returns events with an id greater than or equal to the one specified
        - schema:
            type: integer
          in: query
          name: max_id
          description: Returns events with an id less than or equal to the one specified
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: direction
          description: The sort direction of the returned events.
        - $ref: "../components/parameters/event-type-filter.yaml"
      description: Get a count of all the events for a given site by using this method.
      x-operation-settings:
        collectParameters: true
  /mrr.json:
    get:
      summary: Read MRR
      tags:
        - Insights
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/MRR-Response.yaml"
              examples:
                Example:
                  value:
                    mrr:
                      amount_in_cents: 9915593
                      amount_formatted: "$99,155.93"
                      currency: USD
                      currency_symbol: $
                      at_time: "2021-02-03T14:23:17-05:00"
                      breakouts:
                        plan_amount_in_cents: 9913593
                        plan_amount_formatted: "$99,135.93"
                        usage_amount_in_cents: 2000
                        usage_amount_formatted: $20.00
      operationId: readMrr
      description: "This endpoint returns your site's current MRR, including plan and usage breakouts."
      deprecated: true
      parameters:
        - schema:
            type: string
            format: date-time
          in: query
          name: at_time
          description: submit a timestamp in ISO8601 format to request MRR for a historic time
        - schema:
            type: integer
          in: query
          name: subscription_id
          description: submit the id of a subscription in order to limit results
  "/product_families/{product_family_id}/metered_components.json":
    parameters:
      - $ref: "../components/parameters/product-family-id-path.yaml"
    post:
      summary: Create Metered Component
      tags:
        - Components
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 292609
                      name: Text messages
                      handle: text-messages
                      pricing_scheme: per_unit
                      unit_name: unit
                      unit_price: "10.0"
                      product_family_id: 528484
                      product_family_name: Cloud Compute Servers
                      price_per_unit_in_cents: null
                      kind: metered_component
                      archived: false
                      taxable: false
                      description: null
                      default_price_point_id: 2944263
                      prices:
                        - id: 55423
                          component_id: 30002
                          starting_quantity: 1
                          ending_quantity: null
                          unit_price: "10.0"
                          price_point_id: 2944263
                          formatted_unit_price: "$10.00"
                          segment_id: null
                      price_point_count: 1
                      price_points_url: "https://demo-3238403362.chargify.com/components/30002/price_points"
                      default_price_point_name: Original
                      tax_code: null
                      recurring: false
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2024-01-23T06:08:05-05:00"
                      updated_at: "2024-01-23T06:08:05-05:00"
                      archived_at: null
                      hide_date_range_on_invoice: false
                      allow_fractional_quantities: false
                      use_site_exchange_rate: true
                      item_category: null
                      accounting_code: null
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Name: cannot be blank."
                      - "Unit name: cannot be blank."
                      - "At least 1 price bracket must be defined"
                      - "Pricing scheme: cannot be blank."
                      - "Pricing scheme: is not one of the allowed values."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createMeteredComponent
      description: |-
        This request will create a component definition of kind **metered_component** under the specified product family. Metered component can then be added and “allocated” for a subscription.

        Metered components are used to bill for any type of unit that resets to 0 at the end of the billing period (think daily Google Adwords clicks or monthly cell phone minutes). This is most commonly associated with usage-based billing and many other pricing schemes.

        Note that this is different from recurring quantity-based components, which DO NOT reset to zero at the start of every billing period. If you want to bill for a quantity of something that does not change unless you change it, then you want quantity components, instead.

        For more information on components, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Metered-Component.yaml"
            examples:
              Example:
                value:
                  metered_component:
                    name: Text messages
                    unit_name: text message
                    pricing_scheme: per_unit
                    taxable: false
                    prices:
                      - starting_quantity: 1
                        unit_price: 1.0
  "/product_families/{product_family_id}/quantity_based_components.json":
    parameters:
      - $ref: "../components/parameters/product-family-id-path.yaml"
    post:
      summary: Create Quantity Based Component
      tags:
        - Components
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 292609
                      name: Text messages
                      handle: text-messages
                      pricing_scheme: per_unit
                      unit_name: unit
                      unit_price: "10.0"
                      product_family_id: 528484
                      product_family_name: Cloud Compute Servers
                      price_per_unit_in_cents: null
                      kind: quantity_based_component
                      archived: false
                      taxable: false
                      description: null
                      default_price_point_id: 2944263
                      prices:
                        - id: 55423
                          component_id: 30002
                          starting_quantity: 1
                          ending_quantity: null
                          unit_price: "10.0"
                          price_point_id: 2944263
                          formatted_unit_price: "$10.00"
                          segment_id: null
                      price_point_count: 1
                      price_points_url: "https://demo-3238403362.chargify.com/components/30002/price_points"
                      default_price_point_name: Original
                      tax_code: null
                      recurring: false
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2024-01-23T06:08:05-05:00"
                      updated_at: "2024-01-23T06:08:05-05:00"
                      archived_at: null
                      hide_date_range_on_invoice: false
                      allow_fractional_quantities: false
                      use_site_exchange_rate: true
                      item_category: null
                      accounting_code: null
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Name: cannot be blank."
                      - "Unit name: cannot be blank."
                      - "At least 1 price bracket must be defined"
                      - "Pricing scheme: cannot be blank."
                      - "Pricing scheme: is not one of the allowed values."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createQuantityBasedComponent
      description: |-
        This request will create a component definition of kind **quantity_based_component** under the specified product family. Quantity Based component can then be added and “allocated” for a subscription.

        When defining Quantity Based component, You can choose one of 2 types:
        #### Recurring
        Recurring quantity-based components are used to bill for the number of some unit (think monthly software user licenses or the number of pairs of socks in a box-a-month club). This is most commonly associated with billing for user licenses, number of users, number of employees, etc.

        #### One-time
        One-time quantity-based components are used to create ad hoc usage charges that do not recur. For example, at the time of signup, you might want to charge your customer a one-time fee for onboarding or other services.

        The allocated quantity for one-time quantity-based components immediately gets reset back to zero after the allocation is made.

        For more information on components, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Quantity-Component.yaml"
            examples:
              Quantity Based (per unit):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Component
                    description: Example of JSON per-unit component example
                    pricing_scheme: per_unit
                    unit_price: "10"
                    taxable: true
                    display_on_hosted_page: true
                    allow_fractional_quantities: true
                    public_signup_page_ids:
                      - 323397
              Quantity Based (stairstep):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Quantity Based Component
                    description: Example of JSON stairstep example
                    pricing_scheme: stairstep
                    taxable: true
                    prices:
                      - starting_quantity: "1"
                        ending_quantity: "100"
                        unit_price: "50"
                      - starting_quantity: "101"
                        ending_quantity: "200"
                        unit_price: "10"
                    display_on_hosted_page: true
                    allow_fractional_quantities: true
                    public_signup_page_ids:
                      - 323397
              Quantity Based (volume):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Quantity Based Component
                    description: Example of JSON volume component example
                    pricing_scheme: volume
                    taxable: true
                    prices:
                      - starting_quantity: 1
                        ending_quantity: 10
                        unit_price: 10.0
                      - starting_quantity: 11
                        ending_quantity: 20
                        unit_price: 5
                    display_on_hosted_page: true
                    allow_fractional_quantities: true
                    public_signup_page_ids:
                      - 323397
              Quantity Based (tiered):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Quantity Based Component
                    description: Example of JSON for tiered quantity based component
                    taxable: true
                    pricing_scheme: tiered
                    prices:
                      - starting_quantity: 0
                        ending_quantity: 20
                        unit_price: 50
                      - starting_quantity: 21
                        ending_quantity: 40
                        unit_price: 25
                    display_on_hosted_page: true
                    allow_fractional_quantities: true
                    public_signup_page_ids:
                      - 323397
  "/product_families/{product_family_id}/on_off_components.json":
    parameters:
      - $ref: "../components/parameters/product-family-id-path.yaml"
    post:
      summary: Create On/Off Component
      tags:
        - Components
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 292609
                      name: Test On-Off Component 46124
                      handle: test-on-off-component-4612422802
                      pricing_scheme: null
                      unit_name: on/off
                      unit_price: "10.0"
                      product_family_id: 528484
                      product_family_name: Cloud Compute Servers
                      price_per_unit_in_cents: null
                      kind: on_off_component
                      archived: false
                      taxable: false
                      description: null
                      default_price_point_id: 2944263
                      price_point_count: 1
                      price_points_url: "https://demo-3238403362.chargify.com/components/30002/price_points"
                      default_price_point_name: Original
                      tax_code: null
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2024-01-23T06:08:05-05:00"
                      updated_at: "2024-01-23T06:08:05-05:00"
                      archived_at: null
                      hide_date_range_on_invoice: false
                      allow_fractional_quantities: false
                      use_site_exchange_rate: true
                      item_category: null
                      accounting_code: null
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Name: cannot be blank."
                      - "Unit price: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createOnOffComponent
      description: |-
        This request will create a component definition of kind **on_off_component** under the specified product family. On/Off component can then be added and “allocated” for a subscription.

        On/off components are used for any flat fee, recurring add on (think $99/month for tech support or a flat add on shipping fee).

        For more information on components, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-On-Off-Component.yaml"
            examples:
              On/Off:
                value:
                  on_off_component:
                    name: Annual Support Services
                    description: Prepay for support services
                    taxable: true
                    prices:
                      - unit_price: "100.00"
                        starting_quantity: "0"
                    display_on_hosted_page: true
                    public_signup_page_ids:
                      - 320495
              On/Off with Price Points:
                value:
                  on_off_component:
                    name: Annual Support Services
                    description: Prepay for support services
                    taxable: true
                    prices:
                      - unit_price: "100.00"
                        starting_quantity: 0
                    display_on_hosted_page: true
                    public_signup_page_ids:
                      - 320495
                    price_points:
                      - name: Wholesale
                        handle: wholesale-handle
                        pricing_scheme: per_unit
                        prices:
                          - starting_quantity: 0
                            unit_price: "89.00"
              On/Off with Default Proration Schemes:
                value:
                  on_off_component:
                    name: Annual Support Services
                    description: Prepay for support services
                    taxable: true
                    prices:
                      - unit_price: "100.00"
                        starting_quantity: 0
                    display_on_hosted_page: true
                    public_signup_page_ids:
                      - 320495
                    upgrade_charge: full
                    downgrade_credit: prorated
  "/product_families/{product_family_id}/prepaid_usage_components.json":
    parameters:
      - $ref: "../components/parameters/product-family-id-path.yaml"
    post:
      summary: Create Prepaid Usage Component
      tags:
        - Components
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 292609
                      name: Test Prepaid Component 98505
                      handle: test-prepaid-component-9850584842
                      pricing_scheme: per_unit
                      unit_name: unit
                      unit_price: "10.0"
                      product_family_id: 528484
                      product_family_name: Test Product Family 27791
                      price_per_unit_in_cents: null
                      kind: prepaid_usage_component
                      archived: false
                      taxable: false
                      description: "Description for: Test Prepaid Component 98505"
                      default_price_point_id: 2944263
                      overage_prices:
                        - id: 55964
                          component_id: 30427
                          starting_quantity: 1
                          ending_quantity: null
                          unit_price: "1.0"
                          price_point_id: 2944756
                          formatted_unit_price: "$1.00"
                          segment_id: null
                      prices:
                        - id: 55963
                          component_id: 30427
                          starting_quantity: 1
                          ending_quantity: null
                          unit_price: "1.0"
                          price_point_id: 2944756
                          formatted_unit_price: "$1.00"
                          segment_id: null
                      price_point_count: 1
                      price_points_url: "https://demo-3238403362.chargify.com/components/30002/price_points"
                      default_price_point_name: Original
                      tax_code: null
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2024-01-23T06:08:05-05:00"
                      updated_at: "2024-01-23T06:08:05-05:00"
                      archived_at: null
                      hide_date_range_on_invoice: false
                      allow_fractional_quantities: false
                      use_site_exchange_rate: true
                      item_category: null
                      accounting_code: null
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      - "Handle must be unique within a Site."
                      - "Name: must be unique - that value has been taken."
                Example-2:
                  value:
                    errors:
                      - "Name: cannot be blank."
                      - "Pricing scheme: cannot be blank."
                      - "Pricing scheme: is not one of the allowed values."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createPrepaidUsageComponent
      description: |-
        This request will create a component definition of kind **prepaid_usage_component** under the specified product family. Prepaid component can then be added and “allocated” for a subscription.

        Prepaid components allow customers to pre-purchase units that can be used up over time on their subscription. In a sense, they are the mirror image of metered components; while metered components charge at the end of the period for the amount of units used, prepaid components are charged for at the time of purchase, and we subsequently keep track of the usage against the amount purchased.

        For more information on components, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Prepaid-Component.yaml"
            examples:
              Prepaid Usage:
                value:
                  prepaid_usage_component:
                    name: Minutes
                    unit_name: minutes
                    unit_price: 2
                    pricing_scheme: per_unit
                    rollover_prepaid_remainder: true
                    renew_prepaid_allocation: true
                    expiration_interval: 15
                    expiration_interval_unit: day
                    overage_pricing:
                      pricing_scheme: stairstep
                      prices:
                        - starting_quantity: 1
                          ending_quantity: 100
                          unit_price: 3.0
                        - starting_quantity: 101
                          unit_price: 5.0
  "/product_families/{product_family_id}/event_based_components.json":
    parameters:
      - $ref: "../components/parameters/product-family-id-path.yaml"
    post:
      summary: Create Event Based Component
      tags:
        - Components
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 1489581
                      name: stripeCharges
                      handle: null
                      pricing_scheme: null
                      unit_name: charge
                      unit_price: null
                      product_family_id: 1517093
                      product_family_name: Billing Plans
                      price_per_unit_in_cents: null
                      kind: event_based_component
                      archived: false
                      taxable: false
                      description: null
                      default_price_point_id: null
                      prices: []
                      price_point_count: 0
                      price_points_url: "https://staging.chargify.com/components/1489581/price_points"
                      default_price_point_name: Original
                      tax_code: null
                      recurring: false
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2021-10-12T07:33:24-05:00"
                      updated_at: "2021-10-12T07:33:24-05:00"
                      archived_at: null
                      hide_date_range_on_invoice: false
                      allow_fractional_quantities: false
                      use_site_exchange_rate: null
                      item_category: null
                      accounting_code: null
                      event_based_billing_metric_id: 1163
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Metric: cannot be blank."
                      - "Name: cannot be blank."
                      - "Unit name: cannot be blank."
                      - "Pricing scheme: cannot be blank."
                      - "Pricing scheme: is not one of the allowed values."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createEventBasedComponent
      description: |-
        This request will create a component definition of kind **event_based_component** under the specified product family. Event-based component can then be added and “allocated” for a subscription.

        Event-based components are similar to other component types, in that you define the component parameters (such as name and taxability) and the pricing. A key difference for the event-based component is that it must be attached to a metric. This is because the metric provides the component with the actual quantity used in computing what and how much will be billed each period for each subscription.

        So, instead of reporting usage directly for each component (as you would with metered components), the usage is derived from analysis of your events. 

        For more information on components, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Ebb-Component.yaml"
            examples:
              Event Based Component:
                value:
                  event_based_component:
                    name: Component Name
                    unit_name: string
                    description: string
                    handle: some_handle
                    taxable: true
                    pricing_scheme: per_unit
                    prices:
                      - starting_quantity: 1
                        unit_price: "0.49"
                    event_based_billing_metric_id: 123
  /components/lookup.json:
    get:
      summary: Find Component
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 399853
                      name: Annual Support Services
                      pricing_scheme: null
                      unit_name: on/off
                      unit_price: "100.0"
                      product_family_id: 997233
                      price_per_unit_in_cents: null
                      kind: on_off_component
                      archived: false
                      taxable: true
                      description: Prepay for support services
                      default_price_point_id: 121003
                      price_point_count: 4
                      price_points_url: "https://general-goods.chargify.com/components/399853/price_points"
                      tax_code: D0000000
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2019-08-02T05:54:53-04:00"
                      default_price_point_name: Original
                      product_family_name: Chargify
      operationId: findComponent
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: handle
          description: The handle of the component to find
      description: This request will return information regarding a component having the handle you provide. You can identify your components with a handle so you don't have to save or reference the IDs we generate.
  "/product_families/{product_family_id}/components/{component_id}.json":
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the component belongs
      - schema:
          type: string
          pattern: '/\A(?:\d+|handle:(?:uuid:|[a-z])(?:\w|-)+)\z/'
        name: component_id
        in: path
        required: true
        description: "Either the Chargify id of the component or the handle for the component prefixed with `handle:`"
    get:
      summary: Read Component
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 399853
                      name: Annual Support Services
                      pricing_scheme: null
                      unit_name: on/off
                      unit_price: "100.0"
                      product_family_id: 997233
                      price_per_unit_in_cents: null
                      kind: on_off_component
                      archived: false
                      taxable: true
                      description: Prepay for support services
                      default_price_point_id: 121003
                      price_point_count: 4
                      price_points_url: "https://general-goods.chargify.com/components/399853/price_points"
                      tax_code: D0000000
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2019-08-02T05:54:53-04:00"
                      default_price_point_name: Original
                      product_family_name: Chargify
      operationId: readComponent
      description: |-
        This request will return information regarding a component from a specific product family.

        You may read the component by either the component's id or handle. When using the handle, it must be prefixed with `handle:`.
    put:
      summary: Update Product Family Component
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: ../components/schemas/Component-Response.yaml
              examples:
                Example:
                  value:
                    component:
                      id: 399853
                      name: Annual Support Services
                      pricing_scheme: null
                      unit_name: on/off
                      unit_price: "100.0"
                      product_family_id: 997233
                      price_per_unit_in_cents: null
                      kind: on_off_component
                      archived: false
                      taxable: true
                      description: Prepay for support services
                      default_price_point_id: 121003
                      price_point_count: 4
                      price_points_url: "https://general-goods.chargify.com/components/399853/price_points"
                      tax_code: D0000000
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2019-08-02T05:54:53-04:00"
                      default_price_point_name: Original
                      product_family_name: Chargify
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Name: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateProductFamilyComponent
      description: |-
        This request will update a component from a specific product family.

        You may read the component by either the component's id or handle. When using the handle, it must be prefixed with `handle:`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Component-Request.yaml"
    delete:
      summary: Archive Component
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component.yaml"
              examples:
                Example:
                  value:
                    id: 25407138
                    name: cillum aute
                    pricing_scheme: stairstep
                    unit_name: nulla in
                    unit_price: Excepteur veniam
                    product_family_id: -56705047
                    kind: prepaid_usage_component
                    archived: true
                    taxable: false
                    description: reprehenderit laborum qui fugiat
                    default_price_point_id: -64328176
                    price_point_count: 15252407
                    price_points_url: dolor mollit consequat
                    tax_code: ea nisi
                    recurring: false
                    created_at: "2016-11-08T16:22:26-05:00"
                    default_price_point_name: cupidatat Lorem non aliqua
                    product_family_name: do elit
                    hide_date_range_on_invoice: false
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Component cannot be archived. Please make sure it hasn't already been archived.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: archiveComponent
      description: Sending a DELETE request to this endpoint will archive the component. All current subscribers will be unffected; their subscription/purchase will continue to be charged as usual.
  /components.json:
    get:
      summary: List Components
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    - component:
                        id: 399850
                        name: $1.00 component
                        pricing_scheme: per_unit
                        unit_name: Component
                        unit_price: "1.0"
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: quantity_based_component
                        archived: false
                        taxable: false
                        description: Component
                        default_price_point_id: 121000
                        prices:
                          - id: 630687
                            component_id: 399850
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: "1.0"
                            price_point_id: 121000
                            formatted_unit_price: "$1.00"
                        price_point_count: 2
                        price_points_url: "https://general-goods.chargify.com/components/399850/price_points"
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: "2019-08-01T09:35:38-04:00"
                        default_price_point_name: Original
                        product_family_name: Chargify
                        use_site_exchange_rate: true
                    - component:
                        id: 399853
                        name: Annual Support Services
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: "100.0"
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: true
                        description: Prepay for support services
                        default_price_point_id: 121003
                        price_point_count: 4
                        price_points_url: "https://general-goods.chargify.com/components/399853/price_points"
                        tax_code: D0000000
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: "2019-08-01T09:35:37-04:00"
                        default_price_point_name: Original
                        product_family_name: Chargify
                        use_site_exchange_rate: true
                    - component:
                        id: 386937
                        name: Cancellation fee
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: "35.0"
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: false
                        description: ""
                        default_price_point_id: 108307
                        price_point_count: 1
                        price_points_url: "https://general-goods.chargify.com/components/386937/price_points"
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: "2019-08-01T09:35:38-04:00"
                        default_price_point_name: Original
                        product_family_name: Chargify
                        use_site_exchange_rate: true
      operationId: listComponents
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: string
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date.  optional"
        - schema:
            type: boolean
          in: query
          name: include_archived
          description: Include archived items
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: array
            items:
              type: string
            example:
              - "1"
              - "2"
              - "3"
          in: query
          name: "filter[ids]"
          description:
            "Allows fetching components with matching id based on provided value.
            Use in query `filter[ids]=1,2,3`."
          style: form
          explode: false
        - schema:
            type: boolean
            example: true
          in: query
          name: "filter[use_site_exchange_rate]"
          description:
            "Allows fetching components with matching use_site_exchange_rate based on provided value (refers to default price point).
            Use in query `filter[use_site_exchange_rate]=true`."
      description: This request will return a list of components for a site.
  "/components/{component_id}.json":
    parameters:
      - schema:
          type: string
        name: component_id
        in: path
        required: true
        description: The id or handle of the component
    put:
      summary: Update Component
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: ../components/schemas/Component-Response.yaml
              examples:
                Example:
                  value:
                    component:
                      id: 399853
                      name: Annual Support Services
                      pricing_scheme: null
                      unit_name: on/off
                      unit_price: "100.0"
                      product_family_id: 997233
                      price_per_unit_in_cents: null
                      kind: on_off_component
                      archived: false
                      taxable: true
                      description: Prepay for support services
                      default_price_point_id: 121003
                      price_point_count: 4
                      price_points_url: "https://general-goods.chargify.com/components/399853/price_points"
                      tax_code: D0000000
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: "2019-08-02T05:54:53-04:00"
                      default_price_point_name: Original
                      product_family_name: Chargify
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Name: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateComponent
      description: |-
        This request will update a component.

        You may read the component by either the component's id or handle. When using the handle, it must be prefixed with `handle:`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Component-Request.yaml"
  "/components/{component_id}/price_points/{price_point_id}/default.json":
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    put:
      summary: Promote Price Point to Default
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      id: 292609
                      name: Text messages
                      pricing_scheme: stairstep
                      unit_name: text message
                      unit_price: null
                      product_family_id: 528484
                      price_per_unit_in_cents: null
                      kind: metered_component
                      archived: false
                      taxable: false
                      description: null
                      created_at: "2019-08-02T05:54:53-04:00"
                      prices:
                        - id: 47
                          component_id: 292609
                          starting_quantity: 1
                          ending_quantity: null
                          unit_price: "1.0"
                          price_point_id: 173
                          formatted_unit_price: "$1.00"
                      default_price_point_name: Original
      operationId: promoteComponentPricePointToDefault
      description: |-
        Sets a new default price point for the component. This new default will apply to all new subscriptions going forward - existing subscriptions will remain on their current price point.

        See [Price Points Documentation](https://chargify.zendesk.com/hc/en-us/articles/4407755865883#price-points) for more information on price points and moving subscriptions between price points.

        Note: Custom price points are not able to be set as the default for a component.
  "/product_families/{product_family_id}/components.json":
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family
    get:
      summary: List Components for Product Family
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Component-Response.yaml"
              examples:
                Example:
                  value:
                    - component:
                        id: 399850
                        name: $1.00 component
                        pricing_scheme: per_unit
                        unit_name: Component
                        unit_price: "1.0"
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: quantity_based_component
                        archived: false
                        taxable: false
                        description: Component
                        default_price_point_id: 121000
                        prices:
                          - id: 630687
                            component_id: 399850
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: "1.0"
                            price_point_id: 121000
                            formatted_unit_price: "$1.00"
                        price_point_count: 2
                        price_points_url: "https://general-goods.chargify.com/components/399850/price_points"
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: "2019-08-01T09:35:38-04:00"
                        default_price_point_name: Original
                        product_family_name: Chargify
                        use_site_exchange_rate: true
                    - component:
                        id: 399853
                        name: Annual Support Services
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: "100.0"
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: true
                        description: Prepay for support services
                        default_price_point_id: 121003
                        price_point_count: 4
                        price_points_url: "https://general-goods.chargify.com/components/399853/price_points"
                        tax_code: D0000000
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: "2019-08-01T09:35:37-04:00"
                        default_price_point_name: Original
                        product_family_name: Chargify
                        use_site_exchange_rate: true
                    - component:
                        id: 386937
                        name: Cancellation fee
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: "35.0"
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: false
                        description: ""
                        default_price_point_id: 108307
                        price_point_count: 1
                        price_points_url: "https://general-goods.chargify.com/components/386937/price_points"
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: "2019-08-01T09:35:38-04:00"
                        default_price_point_name: Original
                        product_family_name: Chargify
                        use_site_exchange_rate: true
      operationId: listComponentsForProductFamily
      description: This request will return a list of components for a particular product family.
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            type: boolean
          in: query
          name: include_archived
          description: Include archived items.
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
          style: form
          explode: false
          in: query
          description:
            "Allows fetching components with matching id based on provided value.
            Use in query `filter[ids]=1,2`."
          name: "filter[ids]"
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          name: date_field
          description:
            "The type of filter you would like to apply to your search.
            Use in query `date_field=created_at`."
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date. optional."
        - schema:
            type: string
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: boolean
            example: true
          in: query
          description:
            "Allows fetching components with matching use_site_exchange_rate based on provided value (refers to default price point).
            Use in query `filter[use_site_exchange_rate]=true`."
          name: "filter[use_site_exchange_rate]"
  "/components/{component_id}/price_points.json":
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component
    post:
      summary: Create Component Price Point
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Price-Point-Response.yaml"
      operationId: createComponentPricePoint
      description: This endpoint can be used to create a new price point for an existing component.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Component-Price-Point-Request.yaml"
            examples:
              Example:
                value:
                  price_point:
                    name: Wholesale
                    handle: wholesale-handle
                    pricing_scheme: stairstep
                    use_site_exchange_rate: false
                    prices:
                      - starting_quantity: "1"
                        ending_quantity: "100"
                        unit_price: "5.00"
                      - starting_quantity: "101"
                        ending_quantity: null
                        unit_price: "4.00"
              Prepaid Usage Component:
                value:
                  price_point:
                    name: MSRP
                    handle: msrp
                    pricing_scheme: stairstep
                    renew_prepaid_allocation: false
                    rollover_prepaid_remainder: true
                    expiration_interval: 2
                    expiration_interval_unit: month
                    prices:
                      - starting_quantity: 1
                        ending_quantity: 100
                        unit_price: 5
                      - starting_quantity: 101
                        ending_quantity: null
                        unit_price: 4
                    overage_pricing:
                      pricing_scheme: stairstep
                      prices:
                        - starting_quantity: 1
                          ending_quantity: 100
                          unit_price: 4
              On Off Component:
                value:
                  price_point:
                    name: Special Pricing
                    handle: special
                    pricing_scheme: per_unit
                    prices:
                      - starting_quantity: 1
                        unit_price: 5
    get:
      summary: List Component Price Points
      tags:
        - Components
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Price-Points-Response.yaml"
              examples:
                Example:
                  value:
                    price_points:
                      - id: 80
                        default: false
                        name: Wholesale Two
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: wholesale-two
                        archived_at: null
                        created_at: "2017-07-05T13:55:40-04:00"
                        updated_at: "2017-07-05T13:55:40-04:00"
                        prices:
                          - id: 121
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: "5.0"
                      - id: 81
                        default: false
                        name: MSRP
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: msrp
                        archived_at: null
                        created_at: "2017-07-05T13:55:40-04:00"
                        updated_at: "2017-07-05T13:55:40-04:00"
                        prices:
                          - id: 122
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: "4.0"
      operationId: listComponentPricePoints
      description: |-
        Use this endpoint to read current price points that are associated with a component.

        You may specify the component by using either the numeric id or the `handle:gold` syntax.

        When fetching a component's price points, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the price point is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - schema:
            type: boolean
          in: query
          name: currency_prices
          description: Include an array of currency price data
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - $ref: "../components/parameters/price-point-type-filter.yaml"
      x-operation-settings:
        collectParameters: true
  "/components/{component_id}/price_points/bulk.json":
    parameters:
      - schema:
          type: string
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component for which you want to fetch price points.
    post:
      summary: Bulk Create Component Price Points
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Price-Points-Response.yaml"
              examples:
                Example:
                  value:
                    price_points:
                      - id: 80
                        default: false
                        name: Wholesale Two
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: wholesale-two
                        archived_at: null
                        created_at: "2017-07-05T13:55:40-04:00"
                        updated_at: "2017-07-05T13:55:40-04:00"
                        prices:
                          - id: 121
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: "5.0"
                      - id: 81
                        default: false
                        name: MSRP
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: msrp
                        archived_at: null
                        created_at: "2017-07-05T13:55:40-04:00"
                        updated_at: "2017-07-05T13:55:40-04:00"
                        prices:
                          - id: 122
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: "4.0"
      operationId: bulkCreateComponentPricePoints
      description: Use this endpoint to create multiple component price points in one request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Component-Price-Points-Request.yaml"
            examples:
              Example:
                value:
                  price_points:
                    - name: Wholesale
                      handle: wholesale
                      pricing_scheme: per_unit
                      prices:
                        - starting_quantity: 1
                          unit_price: 5
                    - name: MSRP
                      handle: msrp
                      pricing_scheme: per_unit
                      prices:
                        - starting_quantity: 1
                          unit_price: 4
                    - name: Special Pricing
                      handle: special
                      pricing_scheme: per_unit
                      prices:
                        - starting_quantity: 1
                          unit_price: 5
  "/components/{component_id}/price_points/{price_point_id}.json":
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    put:
      summary: Update Component Price Point
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Price-Point-Response.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Invalid price id:
                  value:
                    errors:
                      base:
                        - all prices must belong to the price point
                Invalid price definition:
                  value:
                    errors:
                      prices:
                        - Successive brackets may not have gaps in quantity (i.e. if one bracket ends at quantity 10, the next must begin at quantity 11)
                Missing price:
                  value:
                    errors:
                      prices:
                        - At least 1 price bracket must be defined
                Overlapping prices:
                  value:
                    errors:
                      prices:
                        - There cannot be any overlapping bracket ranges
                Invalid handle:
                  value:
                    errors:
                      handle:
                        - "Handle: This handle is already in use."
                Invalid quantity:
                  value:
                    errors:
                      prices.ending_quantity:
                        - "Ending quantity: must be greater than the low end bracket quantity, if given"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateComponentPricePoint
      description: |-
        When updating a price point, it's prices can be updated as well by creating new prices or editing / removing existing ones.

        Passing in a price bracket without an `id` will attempt to create a new price.

        Including an `id` will update the corresponding price, and including the `_destroy` flag set to true along with the `id` will remove that price.

        Note: Custom price points cannot be updated directly. They must be edited through the Subscription.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Component-Price-Point-Request.yaml"
            examples:
              Example:
                value:
                  price_point:
                    name: Default
                    prices:
                      - id: 1
                        ending_quantity: 100
                        unit_price: 5
                      - id: 2
                        _destroy: true
                      - starting_quantity: 101
                        unit_price: 4
    delete:
      summary: Archive Component Price Point
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Price-Point-Response.yaml"
              examples:
                Example:
                  value:
                    price_point:
                      id: 79
                      default: false
                      name: Wholesale
                      pricing_scheme: stairstep
                      component_id: 74
                      handle: wholesale-handle
                      archived_at: "2017-07-06T15:04:00-04:00"
                      created_at: "2017-07-05T13:44:30-04:00"
                      updated_at: "2017-07-05T13:44:30-04:00"
                      prices:
                        - id: 119
                          component_id: 74
                          starting_quantity: 1
                          ending_quantity: 100
                          unit_price: "5.0"
                        - id: 120
                          component_id: 74
                          starting_quantity: 101
                          ending_quantity: null
                          unit_price: "4.0"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Price point is already archived."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: archiveComponentPricePoint
      description: A price point can be archived at any time. Subscriptions using a price point that has been archived will continue using it until they're moved to another price point.
  "/components/{component_id}/price_points/{price_point_id}/unarchive.json":
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    put:
      summary: Unarchive Component Price Point
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Price-Point-Response.yaml"
              examples:
                Example:
                  value:
                    price_point:
                      id: 79
                      default: false
                      name: Wholesale
                      pricing_scheme: stairstep
                      component_id: 74
                      handle: wholesale-handle
                      archived_at: null
                      created_at: "2017-07-05T13:44:30-04:00"
                      updated_at: "2017-07-05T13:44:30-04:00"
                      prices:
                        - id: 119
                          component_id: 74
                          starting_quantity: 1
                          ending_quantity: 100
                          unit_price: "5.0"
                        - id: 120
                          component_id: 74
                          starting_quantity: 101
                          ending_quantity: null
                          unit_price: "4.0"
      operationId: unarchiveComponentPricePoint
      description: Use this endpoint to unarchive a component price point.
  "/price_points/{price_point_id}/currency_prices.json":
    parameters:
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    post:
      summary: Create Currency Prices
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Currency-Prices-Response.yaml"
              examples:
                example-1:
                  value:
                    currency_prices:
                      - id: 100
                        currency: EUR
                        price: "123"
                        formatted_price: €123,00
                        price_id: 32669
                        price_point_id: 25554
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      currency_prices[0].currency:
                        - "Currency: cannot be blank."
                        - "Currency: is not one of the allowed values."
      operationId: createCurrencyPrices
      description: |-
        This endpoint allows you to create currency prices for a given currency that has been defined on the site level in your settings.

        When creating currency prices, they need to mirror the structure of your primary pricing. For each price level defined on the component price point, there should be a matching price level created in the given currency.

        Note: Currency Prices are not able to be created for custom price points.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Currency-Prices-Request.yaml"
            examples:
              Example:
                value:
                  currency_prices:
                    - currency: EUR
                      price: 50
                      price_id: 20
                    - currency: EUR
                      price: 40
                      price_id: 21
    put:
      summary: Update Currency Prices
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Component-Currency-Prices-Response.yaml"
              examples:
                example-1:
                  value:
                    currency_prices:
                      - id: 100
                        currency: EUR
                        price: "123"
                        formatted_price: €123,00
                        price_id: 32669
                        price_point_id: 25554
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      currency_prices[0].currency:
                        - "Pricing already exists for this currency."
      operationId: updateCurrencyPrices
      description: |-
        This endpoint allows you to update currency prices for a given currency that has been defined on the site level in your settings.

        Note: Currency Prices are not able to be updated for custom price points.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Currency-Prices-Request.yaml"
            examples:
              Example:
                value:
                  currency_prices:
                    - id: 100
                      price: 51
                    - id: 101
                      price: 41
  /mrr_movements.json:
    get:
      summary: List MRR Movements
      tags:
        - Insights
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-MRR-Response.yaml"
              examples:
                Example:
                  value:
                    mrr:
                      page: 0
                      per_page: 10
                      total_pages: 80
                      total_entries: 791
                      currency: "USD"
                      currency_symbol: "$"
                      movements:
                        - timestamp: "2014-12-03T13:59:46-05:00"
                          amount_in_cents: 2173
                          amount_formatted: "$21.73"
                          description: "Awesome Company signed up for Super Product ($21.73/mo)"
                          category: "new_business"
                          breakouts:
                            plan_amount_in_cents: 2173
                            plan_amount_formatted: "$21.73"
                            usage_amount_in_cents: 0
                            usage_amount_formatted: "$0.00"
                          line_items:
                            - product_id: 306386
                              component_id: 0
                              price_point_id: 3856987
                              name: "Cached Queries"
                              mrr: 2173
                              mrr_movements:
                                - amount: 2173
                                  category: "new_business"
                                  subscriber_delta: 0
                                  lead_delta: 0
                              quantity: 1
                              prev_quantity: 0
                              recurring: true
                          subscription_id: 12355
                          subscriber_name: "Amy Smith"
      operationId: listMrrMovements
      deprecated: true
      description: |-
        This endpoint returns your site's MRR movements.

        ## Understanding MRR movements

        This endpoint will aid in accessing your site's [MRR Report](https://chargify.zendesk.com/hc/en-us/articles/4407838249627) data.

        Whenever a subscription event occurs that causes your site's MRR to change (such as a signup or upgrade), we record an MRR movement. These records are accessible via the MRR Movements endpoint.

        Each MRR Movement belongs to a subscription and contains a timestamp, category, and an amount. `line_items` represent the subscription's product configuration at the time of the movement.

        ### Plan & Usage Breakouts

        In the MRR Report UI, we support a setting to [include or exclude](https://chargify.zendesk.com/hc/en-us/articles/4407838249627#displaying-component-based-metered-usage-in-mrr) usage revenue. In the MRR APIs, responses include `plan` and `usage` breakouts.

        Plan includes revenue from:
        * Products
        * Quantity-Based Components
        * On/Off Components

        Usage includes revenue from:
        * Metered Components
        * Prepaid Usage Components
      parameters:
        - schema:
            type: integer
          in: query
          name: subscription_id
          description: optionally filter results by subscription
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-default-10.yaml"
        - $ref: "../components/parameters/sort-direction.yaml"
      x-operation-settings:
        collectParameters: true
  "/product_families/{product_family_id}/products.json":
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the product belongs
    post:
      summary: Create Product
      tags:
        - Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              examples:
                Example:
                  value:
                    product:
                      id: 4364984
                      name: Gold Plan
                      handle: gold
                      description: This is our gold plan.
                      accounting_code: "123"
                      request_credit_card: true
                      created_at: "2016-11-04T16:31:15-04:00"
                      updated_at: "2016-11-04T16:31:15-04:00"
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      expiration_interval_unit: null
                      initial_charge_in_cents: null
                      trial_price_in_cents: null
                      trial_interval: null
                      trial_interval_unit: null
                      archived_at: null
                      require_credit_card: true
                      return_params: null
                      taxable: false
                      update_return_url: null
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: null
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ""
                        handle: billing-plans
                        accounting_code: null
                      public_signup_pages:
                        - id: 301078
                          return_url: null
                          return_params: null
                          url: "https://general-goods.chargify.com/subscribe/ftgbpq7f5qpr/gold"
                      product_price_point_name: Default
              schema:
                $ref: "../components/schemas/Product-Response.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Name: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createProduct
      description: |-
        Use this method to create a product within your Chargify site.

        + [Products Documentation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405561405709)
        + [Changing a Subscription's Product](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404225334669-Product-Changes-Migrations)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-or-Update-Product-Request.yaml"
            examples:
              Example:
                value:
                  product:
                    name: Gold Plan
                    handle: gold
                    description: This is our gold plan.
                    accounting_code: "123"
                    require_credit_card: true
                    price_in_cents: 1000
                    interval: 1
                    interval_unit: month
                    auto_create_signup_page: true
                    tax_code: D0000000
    get:
      summary: List Products for Product Family
      operationId: listProductsForProductFamily
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Product-Response.yaml"
              examples:
                Example:
                  value:
                    - product:
                        id: 3801242
                        name: Free product
                        handle: zero-dollar-product
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2016-04-21T16:08:39-04:00"
                        updated_at: "2016-08-03T11:27:53-04:00"
                        price_in_cents: 10000
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: 0
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: false
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        initial_charge_after_trial: false
                        version_number: 4
                        update_return_params: ""
                        product_family:
                          id: 527890
                          name: Acme Projects
                          description: ""
                          handle: billing-plans
                          accounting_code: null
                        public_signup_pages:
                          - id: 283460
                            return_url: null
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/smcc4j3d2w6h/zero-dollar-product"
                        product_price_point_name: Default
                        use_site_exchange_rate: true
                    - product:
                        id: 3858146
                        name: Calendar Billing Product
                        handle: calendar-billing-product
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2016-07-05T13:07:38-04:00"
                        updated_at: "2016-07-05T13:07:38-04:00"
                        price_in_cents: 10000
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: true
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        initial_charge_after_trial: false
                        version_number: 1
                        update_return_params: ""
                        product_family:
                          id: 527890
                          name: Acme Projects
                          description: ""
                          handle: billing-plans
                          accounting_code: null
                        public_signup_pages:
                          - id: 289193
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/gxdbfxzxhcjq/calendar-billing-product"
                        product_price_point_name: Default
                        use_site_exchange_rate: true
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              examples:
                Example:
                  value: A valid product_family_id is required
      description: This method allows to retrieve a list of Products belonging to a Product Family.
      x-operation-settings:
        errorTemplates:
          "404": "Not Found:'{$response.body}'"
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - $ref: "../components/parameters/basic-date-field.yaml"
        - schema:
            type: string
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: string
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
        - schema:
            type: boolean
          in: query
          name: include_archived
          description: Include archived products
        - schema:
            $ref: "../components/schemas/List-Products-Include.yaml"
          in: query
          name: include
          description: "Allows including additional data in the response.
            Use in query `include=prepaid_product_price_point`."
        - schema:
            $ref: "../components/schemas/Include-Not-Null.yaml"
          in: query
          name: "filter[prepaid_product_price_point][product_price_point_id]"
          description:
            "Allows fetching products only if a prepaid product price point is present or not. To use this filter you also have to include the following param in the request `include=prepaid_product_price_point`.
            Use in query `filter[prepaid_product_price_point][product_price_point_id]=not_null`."
        - schema:
            type: boolean
            example: true
          in: query
          name: "filter[use_site_exchange_rate]"
          description:
            "Allows fetching products with matching use_site_exchange_rate based on provided value (refers to default price point).
            Use in query `filter[use_site_exchange_rate]=true`."
      tags:
        - Product Families
  "/products/{product_id}.json":
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product
    get:
      summary: Read Product
      tags:
        - Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Response.yaml"
              examples:
                Example:
                  value:
                    product:
                      id: 4535635
                      name: Paid Annual Seats
                      handle: paid-annual-seats
                      description: Paid annual seats for our commercial enterprise product
                      accounting_code: paid-annual-seats
                      request_credit_card: true
                      expiration_interval: 1
                      expiration_interval_unit: day
                      created_at: "2017-08-25T10:25:31-05:00"
                      updated_at: "2018-01-16T12:58:04-06:00"
                      price_in_cents: 10000
                      interval: 12
                      interval_unit: month
                      initial_charge_in_cents: 4900
                      trial_price_in_cents: 1000
                      trial_interval: 14
                      trial_interval_unit: day
                      archived_at: null
                      require_credit_card: true
                      return_params: "id={subscription_id}&ref={customer_reference}"
                      taxable: true
                      update_return_url: "http://www.example.com"
                      tax_code: D0000000
                      initial_charge_after_trial: false
                      version_number: 4
                      update_return_params: "id={subscription_id}&ref={customer_reference}"
                      product_family:
                        id: 1025627
                        name: Acme Products
                        description: ""
                        handle: acme-products
                        accounting_code: null
                      public_signup_pages: []
                      product_price_point_name: Default
      operationId: readProduct
      description: This endpoint allows you to read the current details of a product that you've created in Chargify.
    put:
      summary: Update Product
      tags:
        - Products
      operationId: updateProduct
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Response.yaml"
              examples:
                Example:
                  value:
                    product:
                      id: 4365034
                      name: Platinum Plan
                      handle: platinum
                      description: This is our platinum plan.
                      accounting_code: "123"
                      request_credit_card: true
                      created_at: "2016-11-04T16:34:29-04:00"
                      updated_at: "2016-11-04T16:37:11-04:00"
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: null
                      trial_price_in_cents: null
                      trial_interval: null
                      trial_interval_unit: null
                      archived_at: null
                      require_credit_card: true
                      return_params: null
                      taxable: false
                      update_return_url: null
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: null
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ""
                        handle: billing-plans
                        accounting_code: null
                      public_signup_pages:
                        - id: 301079
                          return_url: null
                          return_params: null
                          url: "https://general-goods.chargify.com/subscribe/wgyd96tb5pj9/platinum"
                      product_price_point_name: Original
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Name: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      description: |-
        Use this method to change aspects of an existing product.

        ### Input Attributes Update Notes

        + `update_return_params` The parameters we will append to your `update_return_url`. See Return URLs and Parameters

        ### Product Price Point

        Updating a product using this endpoint will create a new price point and set it as the default price point for this product. If you should like to update an existing product price point, that must be done separately.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-or-Update-Product-Request.yaml"
    delete:
      summary: Archive Product
      tags:
        - Products
      operationId: archiveProduct
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Response.yaml"
              examples:
                Example:
                  value:
                    product:
                      id: 4535638
                      name: Business Monthly
                      handle: null
                      description: Business Monthly
                      accounting_code: ""
                      request_credit_card: true
                      expiration_interval: null
                      expiration_interval_unit: never
                      created_at: "2017-08-25T10:25:31-05:00"
                      updated_at: "2018-01-16T13:02:44-06:00"
                      price_in_cents: 4900
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: null
                      trial_price_in_cents: 0
                      trial_interval: 1
                      trial_interval_unit: day
                      archived_at: "2018-01-16T13:02:44-06:00"
                      require_credit_card: false
                      return_params: ""
                      taxable: false
                      update_return_url: ""
                      tax_code: ""
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: ""
                      product_family:
                        id: 1025627
                        name: Acme Products
                        description: ""
                        handle: acme-products
                        accounting_code: null
                      public_signup_pages: []
                      product_price_point_name: Default
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Product cannot be archived."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      description: |-
        Sending a DELETE request to this endpoint will archive the product. All current subscribers will be unffected; their subscription/purchase will continue to be charged monthly.

        This will restrict the option to chose the product for purchase via the Billing Portal, as well as disable Public Signup Pages for the product.
  "/products/handle/{api_handle}.json":
    parameters:
      - schema:
          type: string
        name: api_handle
        in: path
        required: true
        description: The handle of the product
    get:
      summary: Read Product by Handle
      tags:
        - Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Response.yaml"
              examples:
                Example:
                  value:
                    product:
                      id: 3903594
                      name: No cost product
                      handle: no-cost-product
                      description: ""
                      accounting_code: ""
                      request_credit_card: true
                      expiration_interval: null
                      expiration_interval_unit: never
                      created_at: "2016-09-02T17:11:29-04:00"
                      updated_at: "2016-11-30T11:46:13-05:00"
                      price_in_cents: 0
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: null
                      trial_price_in_cents: 5
                      trial_interval: 1
                      trial_interval_unit: month
                      archived_at: null
                      require_credit_card: false
                      return_params: reference=5678
                      taxable: false
                      update_return_url: ""
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: reference=5678
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ""
                        handle: billing-plans
                        accounting_code: null
                      public_signup_pages:
                        - id: 281174
                          return_url: ""
                          return_params: ""
                          url: "https://general-goods.chargify.com/subscribe/xgdxtk4vhtbz/no-cost-product"
                        - id: 282270
                          return_url: ""
                          return_params: ""
                          url: "https://general-goods.chargify.com/subscribe/xxqmrgtsbd9k/no-cost-product"
                        - id: 291587
                          return_url: ""
                          return_params: ""
                          url: "https://general-goods.chargify.com/subscribe/pvhwss7zjjnh/no-cost-product"
                        - id: 294832
                          return_url: "http://www.example.com/"
                          return_params: engine=md7a
                          url: "https://general-goods.chargify.com/subscribe/m6tbcq4mcgpw/no-cost-product"
                      product_price_point_name: Default
      operationId: readProductByHandle
      description: This method allows to retrieve a Product object by its `api_handle`.
  /product_families.json:
    post:
      summary: Create Product Family
      tags:
        - Product Families
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Family-Response.yaml"
              examples:
                Example:
                  value:
                    product_family:
                      id: 933860
                      name: Acme Projects
                      description: Amazing project management tool
                      handle: acme-projects
                      accounting_code: null
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "API Handle: must be unique - that value has been taken."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createProductFamily
      description: |-
        This method will create a Product Family within your Chargify site. Create a Product Family to act as a container for your products, components and coupons.

        Full documentation on how Product Families operate within the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405369633421).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Product-Family-Request.yaml"
            examples:
              Example:
                value:
                  product_family:
                    name: Acme Projects
                    description: Amazing project management tool
    get:
      summary: List Product Families
      tags:
        - Product Families
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Product-Family-Response.yaml"
              examples:
                Example:
                  value:
                    - product_family:
                        id: 37
                        name: Acme Projects
                        description: null
                        handle: acme-projects
                        accounting_code: null
                        created_at: "2013-02-20T15:05:51-07:00"
                        updated_at: "2013-02-20T15:05:51-07:00"
                    - product_family:
                        id: 155
                        name: Bat Family
                        description: Another family.
                        handle: bat-family
                        accounting_code: null
                        created_at: "2014-04-16T12:41:13-06:00"
                        updated_at: "2014-04-16T12:41:13-06:00"
      operationId: listProductFamilies
      description: This method allows to retrieve a list of Product Families for a site.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/basic-date-field.yaml"
        - schema:
            type: string
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: string
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
  "/product_families/{id}.json":
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: The Chargify id of the product family
    get:
      summary: Read Product Family
      tags:
        - Product Families
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Family-Response.yaml"
              examples:
                Example:
                  value:
                    product_family:
                      id: 527890
                      name: Acme Projects
                      description: ""
                      handle: billing-plans
                      accounting_code: null
      operationId: readProductFamily
      description: |-
        This method allows to retrieve a Product Family via the `product_family_id`. The response will contain a Product Family object.

        The product family can be specified either with the id number, or with the `handle:my-family` format.
  "/products/{product_id}/price_points.json":
    parameters:
      - schema:
          type:
            - integer
            - string
        name: product_id
        in: path
        required: true
        description: "The id or handle of the product. When using the handle, it must be prefixed with `handle:`"
    post:
      summary: Create Product Price Point
      tags:
        - "Product: Price Points"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Price-Point-Response.yaml"
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 2023-11-30T06:37:20-05:00
                      created_at: 2023-11-27T06:37:20-05:00
                      updated_at: 2023-11-27T06:37:20-05:00
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Product-Price-Point-Error-Response.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      price_point: can't be blank
                Example-2:
                  value:
                    errors:
                      interval:
                        - "Recurring Interval: cannot be blank."
                      interval_unit:
                        - "Interval unit: cannot be blank."
                        - "Interval unit: must be 'month' or 'day'."
                      name:
                        - "Name: cannot be blank."
                      price:
                        - "Price: is not a number."
                      price_in_cents:
                        - "Price in cents: cannot be blank."
                Example-3:
                  value:
                    errors:
                      interval:
                        - "Recurring Interval: must be greater than or equal to 1."
                Example-4:
                  value:
                    errors:
                      price:
                        - "Price: must be greater than or equal to 0."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createProductPricePoint
      description: "[Product Price Point Documentation](https://chargify.zendesk.com/hc/en-us/articles/4407755824155)"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Product-Price-Point-Request.yaml"
            examples:
              Example:
                value:
                  price_point:
                    name: Educational
                    handle: educational
                    price_in_cents: 1000
                    interval: 1
                    interval_unit: month
                    trial_price_in_cents: 4900
                    trial_interval: 1
                    trial_interval_unit: month
                    trial_type: payment_expected
                    initial_charge_in_cents: 120000
                    initial_charge_after_trial: false
                    expiration_interval: 12
                    expiration_interval_unit: month
    get:
      summary: List Product Price Points
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Product-Price-Points-Response.yaml"
              examples:
                Example:
                  value:
                    price_points:
                      - id: 283
                        name: Educational
                        handle: educational
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: month
                        trial_price_in_cents: 4900
                        trial_interval: 1
                        trial_interval_unit: month
                        trial_type: payment_expected
                        initial_charge_in_cents: 120000
                        initial_charge_after_trial: false
                        expiration_interval: 12
                        expiration_interval_unit: month
                        product_id: 901
                        archived_at: 2023-11-30T06:37:20-05:00
                        created_at: 2023-11-27T06:37:20-05:00
                        updated_at: 2023-11-27T06:37:20-05:00
      operationId: listProductPricePoints
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - schema:
            type: integer
            maximum: 200
            default: 10
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 10. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: boolean
          in: query
          name: currency_prices
          description: "When fetching a product's price points, if you have defined multiple currencies at the site level, you can optionally pass the ?currency_prices=true query param to include an array of currency price data in the response. If the product price point is set to use_site_exchange_rate: true, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency."
        - $ref: "../components/parameters/price-point-type-filter.yaml"
      description: Use this endpoint to retrieve a list of product price points.
  "/products/{product_id}/price_points/{price_point_id}.json":
    parameters:
      - schema:
          type:
            - integer
            - string
        name: product_id
        in: path
        required: true
        description: "The id or handle of the product. When using the handle, it must be prefixed with `handle:`"
      - schema:
          type:
            - integer
            - string
        name: price_point_id
        in: path
        required: true
        description: "The id or handle of the price point. When using the handle, it must be prefixed with `handle:`"
    put:
      summary: Update Product Price Point
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Price-Point-Response.yaml"
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 2023-11-30T06:37:20-05:00
                      created_at: 2023-11-27T06:37:20-05:00
                      updated_at: 2023-11-27T06:37:20-05:00
      operationId: updateProductPricePoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Product-Price-Point-Request.yaml"
            examples:
              Example:
                value:
                  price_point:
                    handle: educational
                    price_in_cents: 1250
      description: |-
        Use this endpoint to update a product price point.

        Note: Custom product price points are not able to be updated.
    get:
      summary: Read Product Price Point
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Price-Point-Response.yaml"
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 2023-11-30T06:37:20-05:00
                      created_at: 2023-11-27T06:37:20-05:00
                      updated_at: 2023-11-27T06:37:20-05:00
      operationId: readProductPricePoint
      description: Use this endpoint to retrieve details for a specific product price point.
      parameters:
        - schema:
            type: boolean
          in: query
          name: currency_prices
          description: "When fetching a product's price points, if you have defined multiple currencies at the site level, you can optionally pass the ?currency_prices=true query param to include an array of currency price data in the response. If the product price point is set to use_site_exchange_rate: true, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency."
    delete:
      summary: Archive Product Price Point
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Price-Point-Response.yaml"
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 2023-11-30T06:37:20-05:00
                      created_at: 2023-11-27T06:37:20-05:00
                      updated_at: 2023-11-27T06:37:20-05:00
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Cannot archive the default price point."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: archiveProductPricePoint
      description: Use this endpoint to archive a product price point.
  "/products/{product_id}/price_points/{price_point_id}/unarchive.json":
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the product price point
    patch:
      summary: Unarchive Product Price Point
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Price-Point-Response.yaml"
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 2023-11-30T06:37:20-05:00
                      created_at: 2023-11-27T06:37:20-05:00
                      updated_at: 2023-11-27T06:37:20-05:00
      operationId: unarchiveProductPricePoint
      description: Use this endpoint to unarchive an archived product price point.
  "/products/{product_id}/price_points/{price_point_id}/default.json":
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the product price point
    patch:
      summary: Promote Product Price Point to Default
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Product-Response.yaml"
              examples:
                Example:
                  value:
                    product:
                      id: 29778
                      name: Educational
                      handle: educational
                      description: null
                      accounting_code: null
                      request_credit_card: true
                      expiration_interval: 12
                      expiration_interval_unit: month
                      created_at: 2023-12-01T06:56:12-05:00
                      updated_at: 2023-12-01T06:56:26-05:00
                      price_in_cents: 100
                      interval: 2
                      interval_unit: month
                      initial_charge_in_cents: 120000
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      archived_at: null
                      require_credit_card: true
                      return_params: null
                      taxable: false
                      update_return_url: null
                      tax_code: null
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: null
                      default_product_price_point_id: 32395
                      request_billing_address: false
                      require_billing_address: false
                      require_shipping_address: false
                      use_site_exchange_rate: true
                      item_category: null
                      product_price_point_id: 32395
                      product_price_point_name: Default
                      product_price_point_handle: "uuid:8c878f50-726e-013c-c71b-0286551bb34f"
                      product_family:
                        id: 933860
                        name: Acme Projects
                        description: Amazing project management tool
                        handle: acme-projects
                        accounting_code: null
                        created_at: 2023-12-01T06:56:12-05:00
                        updated_at: 2023-12-01T06:56:12-05:00
                      public_signup_pages: []
      operationId: promoteProductPricePointToDefault
      description: |-
        Use this endpoint to make a product price point the default for the product.

        Note: Custom product price points are not able to be set as the default for a product.
  "/products/{product_id}/price_points/bulk.json":
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price points belong
    post:
      summary: Bulk Create Product Price Points
      tags:
        - "Product: Price Points"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Bulk-Create-Product-Price-Points-Response.yaml"
              examples:
                Example:
                  value:
                    price_points:
                      - id: 283
                        name: Educational
                        handle: educational
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: month
                        trial_price_in_cents: 4900
                        trial_interval: 1
                        trial_interval_unit: month
                        trial_type: payment_expected
                        initial_charge_in_cents: 120000
                        initial_charge_after_trial: false
                        expiration_interval: 12
                        expiration_interval_unit: month
                        product_id: 901
                        archived_at: 2023-11-30T06:37:20-05:00
                        created_at: 2023-11-27T06:37:20-05:00
                        updated_at: 2023-11-27T06:37:20-05:00
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map.yaml"
              examples:
                Example-1:
                  value:
                    price_points[0].currency_prices:
                      - "Currency prices: is invalid."
                    price_points[0].interval:
                      - "Recurring Interval: cannot be blank."
                    price_points[0].interval_unit:
                      - "Interval unit: must be 'month' or 'day'."
                    price_points[0].name:
                      - "Name: cannot be blank."
                    price_points[0].price:
                      - "Price: is not a number."
                    price_points[0].price_in_cents:
                      - "Price in cents: cannot be blank."
                    price_points[1].currency_prices:
                      - "Currency prices: is invalid."
                    price_points[1].interval:
                      - "Recurring Interval: cannot be blank."
                    price_points[1].interval_unit:
                      - "Interval unit: must be 'month' or 'day'."
                    price_points[1].name:
                      - "Name: cannot be blank."
                    price_points[1].price:
                      - "Price: is not a number."
                    price_points[1].price_in_cents:
                      - "Price in cents: cannot be blank."
                Example-2:
                  value:
                    price_points[0].interval:
                      - "Recurring Interval: must be greater than or equal to 1."
                Example-3:
                  value:
                    price_points[0].currency_prices:
                      - "Currency prices: is invalid."
                    price_points[0].price:
                      - "Price: must be greater than or equal to 0."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: bulkCreateProductPricePoints
      description: Use this endpoint to create multiple product price points in one request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Bulk-Create-Product-Price-Points-Request.yaml"
            examples:
              Example:
                value:
                  price_points:
                    - name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                    - name: More Educational
                      handle: more-educational
                      price_in_cents: 2000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
  "/product_price_points/{product_price_point_id}/currency_prices.json":
    parameters:
      - schema:
          type: integer
        name: product_price_point_id
        in: path
        required: true
        description: The Chargify id of the product price point
    post:
      summary: Create Product Currency Prices
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Currency-Prices-Response.yaml"
              examples:
                example-1:
                  value:
                    currency_prices:
                      - id: 100
                        currency: EUR
                        price: 123
                        formatted_price: €123,00
                        product_price_point_id: 32669
                        role: baseline
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      base:
                        - "This product price point requires that prices are defined for: [baseline]."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createProductCurrencyPrices
      description: |-
        This endpoint allows you to create currency prices for a given currency that has been defined on the site level in your settings.

        When creating currency prices, they need to mirror the structure of your primary pricing. If the product price point defines a trial and/or setup fee, each currency must also define a trial and/or setup fee.

        Note: Currency Prices are not able to be created for custom product price points.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Product-Currency-Prices-Request.yaml"
            examples:
              Example:
                value:
                  currency_prices:
                    - currency: EUR
                      price: 60
                      role: baseline
                    - currency: EUR
                      price: 30
                      role: trial
                    - currency: EUR
                      price: 100
                      role: initial
        description: ""
    put:
      summary: Update Product Currency Prices
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Currency-Prices-Response.yaml"
              examples:
                example-1:
                  value:
                    currency_prices:
                      - id: 123
                        currency: EUR
                        price: 100
                        formatted_price: €123,00
                        product_price_point_id: 32669
                        role: baseline
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      base:
                        - "This product price point requires that prices are defined for: [baseline]."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateProductCurrencyPrices
      description: |-
        This endpoint allows you to update the `price`s of currency prices for a given currency that exists on the product price point.

        When updating the pricing, it needs to mirror the structure of your primary pricing. If the product price point defines a trial and/or setup fee, each currency must also define a trial and/or setup fee.

        Note: Currency Prices are not able to be updated for custom product price points.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Currency-Prices-Request.yaml"
            examples:
              Example:
                value:
                  currency_prices:
                    - id: 200
                      price: 15
                    - id: 201
                      price: 5
  /payment_profiles.json:
    post:
      summary: Create Payment Profile
      tags:
        - Payment Profiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Payment-Profile-Response.yaml"
              examples:
                Example:
                  value:
                    payment_profile:
                      first_name: Jessica
                      last_name: Test
                      card_type: visa
                      masked_card_number: XXXX-XXXX-XXXX-1111
                      expiration_month: 10
                      expiration_year: 2018
                      customer_id: 19195410
                      current_vault: bogus
                      vault_token: "1"
                      billing_address: 123 Main St.
                      billing_city: Boston
                      billing_state: MA
                      billing_zip: "02120"
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: null
                      payment_type: credit_card
                      site_gateway_setting_id: 1
                      gateway_handle: handle
                      disabled: false
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      - "Credit card expiration month: cannot be blank."
                      - "Credit card expiration year: cannot be blank."
                      - "Credit card number: cannot be blank."
                Example-2:
                  value:
                    errors:
                      - "Chargify token not found"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createPaymentProfile
      description: |-
        Use this endpoint to create a payment profile for a customer.

        Payment Profiles house the credit card, ACH (Authorize.Net or Stripe only,) or PayPal (Braintree only,) data for a customer. The payment information is attached to the customer within Chargify, as opposed to the Subscription itself.

        You must include a customer_id so that Chargify will attach it to the customer entry. If no customer_id is included the API will return a 404.

        ## Create a Payment Profile for ACH usage

        If you would like to create a payment method that is a Bank Account applicable for ACH payments use the following:
        ```json
        {
        "payment_profile": {
          "customer_id": [Valid-Customer-ID],
          "bank_name": "Best Bank",
          "bank_routing_number": "021000089",
          "bank_account_number": "111111111111",
          "bank_account_type": "checking",
          "bank_account_holder_type": "business",
          "payment_type": "bank_account"
          }
        }
        ```

        ## Taxable Subscriptions

        If your subscriber pays taxes on their purchased product, and you are attempting to create or update the `payment_profile`, complete address information is required. For information on required address formatting to allow your subscriber to be taxed, please see our documentation [here](https://developers.chargify.com/docs/developer-docs/d2e9e34db740e-signups#taxes)

        ## Payment Profile Documentation

        Full documentation on how Payment Profiles operate within Chargify can be located under the following links:

        + [Subscriber Payment Details](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405212558349-Customers-Reference#customers-reference-0-0)
        + [Self Service Pages](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404759627021) (Allows credit card updates by Subscriber)
        + [Public Signup Pages payment settings](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405267754381-Individual-Page-Settings#credit-card-settings)

        ## Create a Payment Profile with a Chargify.js token

        ```json
        {
          "payment_profile": {
            "customer_id": 1036,
            "chargify_token": "tok_w68qcpnftyv53jk33jv6wk3w"
          }
        }
        ```

        ## Active Payment Methods

        Creating a new payment profile for a Customer via the API will not make that Payment Profile current for any of the Customer’s Subscriptions. In order to utilize the payment profile as the default, it must be set as the default payment profile for the subscription or subscription group.

        ## Requirements

        Either the full_number, expiration_month, and expiration_year or if you have an existing vault_token from your gateway, that vault_token and the current_vault are required.
        Passing in the vault_token and current_vault are only allowed when creating a new payment profile.

        ### Taxable Subscriptions

        If your subscriber pays taxes on their purchased product, and you are attempting to create or update the `payment_profile`, complete address information is required. For information on required address formatting to allow your subscriber to be taxed, please see our documentation [here](https://developers.chargify.com/docs/developer-docs/d2e9e34db740e-signups#taxes)

        ## BraintreeBlue
        Some merchants use Braintree JavaScript libraries directly and then pass `payment_method_nonce` and/or `paypal_email` to create a payment profile. This implementation is deprecated and does not handle 3D Secure.  Instead, we have provided [Chargify.js](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDI0-overview) which is continuously improved and supports Credit Cards (along with 3D Secure), PayPal and ApplePay payment types.

        ## GoCardless

        For more information on GoCardless, please view the following resources:

        + [Full documentation on GoCardless](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404501889677)

        + [Using Chargify.js with GoCardless - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-direct-debit-gocardless-gateway)

        + [Using Chargify.js with GoCardless - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-direct-debit-gocardless-gateway)

        ### GoCardless with Local Bank Details

        Following examples create customer, bank account and mandate in GoCardless:

        ```json
        {
          "payment_profile": {
            "customer_id": "Valid-Customer-ID",
            "bank_name": "Royal Bank of France",
            "bank_account_number": "0000000",
            "bank_routing_number": "0003",
            "bank_branch_code": "00006",
            "payment_type": "bank_account",
            "billing_address": "20 Place de la Gare",
            "billing_city": "Colombes",
            "billing_state": "Île-de-France",
            "billing_zip": "92700",
            "billing_country": "FR"
          }
        }
        ```

        ### GoCardless with IBAN

        ```json
        {
          "payment_profile": {
            "customer_id": "24907598",
            "bank_name": "French Bank",
            "bank_iban": "FR1420041010050500013M02606",
            "payment_type": "bank_account",
            "billing_address": "20 Place de la Gare",
            "billing_city": "Colombes",
            "billing_state": "Île-de-France",
            "billing_zip": "92700",
            "billing_country": "FR"
          }
        }
        ```

        ### Importing GoCardless

        If the customer, bank account, and mandate already exist in GoCardless, a payment profile can be created by using the IDs. In order to create masked versions of `bank_account_number` and `bank_routing_number` that are used to display within Chargify Admin UI, you can pass the last four digits for this fields which then will be saved in this form `XXXX[four-provided-digits]`.

        ```json
        {
          "payment_profile": {
            "customer_id": "24907598",
            "customer_vault_token": [Existing GoCardless Customer ID]
            "vault_token": [Existing GoCardless Mandate ID],
            "current_vault": "gocardless",
            "bank_name": "French Bank",
            "bank_account_number": [Last Four Of The Existing Account Number or IBAN if applicable],
            "bank_routing_number": [Last Four Of The Existing Routing Number],
            "payment_type": "bank_account",
            "billing_address": "20 Place de la Gare",
            "billing_city": "Colombes",
            "billing_state": "Île-de-France",
            "billing_zip": "92700",
            "billing_country": "FR"
          }
        }
        ```

        ## SEPA Direct Debit

        For more information on Stripe SEPA Direct Debit, please view the following resources:

        + [Full documentation on Stripe SEPA Direct Debit](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405050826765-Stripe-SEPA-and-BECS-Direct-Debit)

        + [Using Chargify.js with Stripe Direct Debit - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)

        + [Using Chargify.js with Stripe Direct Debit - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-sepa-direct-debit-stripe-gateway)

        ### Stripe SEPA Direct Debit Payment Profiles

        The following example creates a customer, bank account and mandate in Stripe:


        ```json
        {
          "payment_profile": {
            "customer_id": "24907598",
            "bank_name": "Deutsche bank",
            "bank_iban": "DE89370400440532013000",
            "payment_type": "bank_account",
            "billing_address": "Test",
            "billing_city": "Berlin",
            "billing_state": "Brandenburg",
            "billing_zip": "12345",
            "billing_country": "DE"
          }
        }
        ```

        ## Stripe BECS Direct Debit

        For more information on Stripe BECS Direct Debit, please view the following resources:

        + [Full documentation on Stripe BECS Direct Debit](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405050826765-Stripe-SEPA-and-BECS-Direct-Debit)

        + [Using Chargify.js with Stripe BECS Direct Debit - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)

        + [Using Chargify.js with Stripe BECS Direct Debit - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-sepa-direct-debit-stripe-gateway)

        ### Stripe BECS Direct Debit Payment Profiles

        The following example creates a customer, bank account and mandate in Stripe:


        ```json
        {
          "payment_profile": {
            "customer_id": "24907598",
            "bank_name": "Australian bank",
            "bank_branch_code": "000000",
            "bank_account_number": "000123456"
            "payment_type": "bank_account",
            "billing_address": "Test",
            "billing_city": "Stony Rise",
            "billing_state": "Tasmania",
            "billing_zip": "12345",
            "billing_country": "AU"
          }
        }
        ```

        ## 3D Secure - Checkout

        It may happen that a payment needs 3D Secure Authentication when the payment profile is created; this is referred to in our help docs as a [post-authentication flow](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405177432077#psd2-flows-pre-authentication-and-post-authentication). The server returns `422 Unprocessable Entity` in this case with the following response:

        ```json
        {
            "jsonapi": {
                "version": "1.0"
            },
            "errors": [
                {
                    "title": "This card requires 3DSecure verification.",
                    "detail": "This card requires 3D secure authentication. Redirect the customer to the URL from the action_link attribute to authenticate. Attach callback_url param to this URL if you want to be notified about the result of 3D Secure authentication. Attach redirect_url param to this URL if you want to redirect a customer back to your page after 3D Secure authentication. Example: https://checkout-test.chargifypay.test/3d-secure/checkout/pay_uerzhsxd5uhkbodx5jhvkg6yeu?one_time_token_id=93&callback_url=http://localhost:4000&redirect_url=https://yourpage.com will do a POST request to https://localhost:4000 after credit card is authenticated and will redirect a customer to https://yourpage.com after 3DS authentication.",
                    "links": {
                        "action_link": "https://checkout-test.chargifypay.test/3d-secure/checkout/pay_uerzhsxd5uhkbodx5jhvkg6yeu?one_time_token_id=93"
                    }
                }
            ]
        }
        ```

        To let the customer go through 3D Secure Authentication, they need to be redirected to the URL specified in `action_link`.
        Optionally, you can specify `callback_url` parameter in the `action_link` URL if you’d like to be notified about the result of 3D Secure Authentication. The `callback_url` will return the following information:

        - whether the authentication was successful (`success`)
        - the payment profile ID (`payment_profile_id`)

        Lastly, you can also specify a `redirect_url` parameter within the `action_link` URL if you’d like to redirect a customer back to your site.

        It is not possible to use `action_link` in an iframe inside a custom application. You have to redirect the customer directly to the `action_link`, then, to be notified about the result, use `redirect_url` or `callback_url`.

        The final URL that you send a customer to complete 3D Secure may resemble the following, where the first half is the `action_link` and the second half contains a `redirect_url` and `callback_url`: `https://checkout-test.chargifypay.test/3d-secure/checkout/pay_uerzhsxd5uhkbodx5jhvkg6yeu?one_time_token_id=93&callback_url=http://localhost:4000&redirect_url=https://yourpage.com`

        ### Example Redirect Flow

        You may wish to redirect customers to different pages depending on whether their SCA was performed successfully. Here's an example flow to use as a reference:

        1. Create a payment profile via API; it requires 3DS
        2. You receive a `action_link` in the response.
        3. Use this `action_link` to, for example, connect with your internal resources or generate a session_id
        4. Include 1 of those attributes inside the `callback_url` and `redirect_url` to be aware which “session” this applies to
        5. Redirect the customer to the `action_link` with `callback_url` and `redirect_url` applied
        6. After the customer finishes 3DS authentication, we let you know the result by making a request to applied `callback_url`.
        7. After that, we redirect the customer to the `redirect_url`; at this point the result of authentication is known
        8. Optionally, you can use the applied "msg" param in the `redirect_url` to determine whether it was successful or not
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Payment-Profile-Request.yaml"
            examples:
              ACH:
                value:
                  payment_profile:
                    customer_id: 123
                    bank_name: Best Bank
                    bank_routing_number: "021000089"
                    bank_account_number: "111111111111"
                    bank_account_type: checking
                    bank_account_holder_type: business
                    payment_type: bank_account
              Chargify.js:
                value:
                  payment_profile:
                    customer_id: 1036
                    chargify_token: tok_w68qcpnftyv53jk33jv6wk3w
              Card:
                value:
                  payment_profile:
                    first_name: Jessica
                    last_name: Test
                    last_four: "1111"
                    card_type: visa
                    expiration_month: 10
                    expiration_year: 2018
                    customer_id: 19195410
                    current_vault: bogus
                    vault_token: "1"
                    billing_address: 123 Main St.
                    billing_city: Boston
                    billing_state: MA
                    billing_zip: "02120"
                    billing_country: US
                    billing_address_2: null
                    payment_type: credit_card
              Local Bank Details:
                value:
                  payment_profile:
                    customer_id: 123
                    bank_name: Royal Bank of France
                    bank_account_number: "0000000"
                    bank_routing_number: "0003"
                    bank_branch_code: "00006"
                    payment_type: bank_account
                    billing_address: 20 Place de la Gare
                    billing_city: Colombes
                    billing_state: Île-de-France
                    billing_zip: "92700"
                    billing_country: FR
              IBAN:
                value:
                  payment_profile:
                    customer_id: 24907598
                    bank_name: French Bank
                    bank_iban: FR1420041010050500013M02606
                    payment_type: bank_account
                    billing_address: 20 Place de la Gare
                    billing_city: Colombes
                    billing_state: Île-de-France
                    billing_zip: "92700"
                    billing_country: FR
              Import Payment Profile:
                value:
                  payment_profile:
                    customer_id: 24907598
                    customer_vault_token: "[Existing Vault Customer ID]"
                    vault_token: "[Existing Vault Mandate ID]"
                    current_vault: gocardless
                    bank_name: French Bank
                    payment_type: bank_account
                    billing_address: 20 Place de la Gare
                    billing_city: Colombes
                    billing_state: Île-de-France
                    billing_zip: "92700"
                    billing_country: FR
        description: "When following the IBAN or the Local Bank details examples, a customer, bank account and mandate will be created in your current vault. If the customer, bank account, and mandate already exist in your vault, follow the Import example to link the payment profile into Chargify."
    get:
      summary: List Payment Profiles
      tags:
        - Payment Profiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Payment-Profile-Response.yaml"
              examples:
                Example-1:
                  value:
                    - payment_profile:
                        id: 10089892
                        first_name: Chester
                        last_name: Tester
                        customer_id: 14543792
                        current_vault: bogus
                        vault_token: "0011223344"
                        billing_address: 456 Juniper Court
                        billing_city: Boulder
                        billing_state: CO
                        billing_zip: "80302"
                        billing_country: US
                        customer_vault_token: null
                        billing_address_2: ""
                        bank_name: Bank of Kansas City
                        masked_bank_routing_number: XXXX6789
                        masked_bank_account_number: XXXX3344
                        bank_account_type: checking
                        bank_account_holder_type: personal
                        payment_type: bank_account
                        verified: true
                        site_gateway_setting_id: 1
                        gateway_handle: handle
                    - payment_profile:
                        id: 10188522
                        first_name: Frankie
                        last_name: Tester
                        customer_id: 14543712
                        current_vault: bogus
                        vault_token: "123456789"
                        billing_address: 123 Montana Way
                        billing_city: Los Angeles
                        billing_state: CA
                        billing_zip: "90210"
                        billing_country: US
                        customer_vault_token: null
                        billing_address_2: ""
                        bank_name: Bank of Kansas City
                        masked_bank_routing_number: XXXX6789
                        masked_bank_account_number: XXXX6789
                        bank_account_type: checking
                        bank_account_holder_type: personal
                        payment_type: bank_account
                        verified: true
                        site_gateway_setting_id: 1
                        gateway_handle: handle
                Example-2:
                  value:
                    - payment_profile:
                        id: 310812
                        first_name: John15
                        last_name: Doe04
                        masked_card_number: XXXX-XXXX-XXXX-1111
                        card_type: visa
                        expiration_month: 7
                        expiration_year: 2032
                        customer_id: 419675
                        current_vault: bogus
                        vault_token: "1"
                        billing_address: null
                        billing_city: null
                        billing_state: null
                        billing_zip: null
                        billing_country: null
                        customer_vault_token: null
                        billing_address_2: null
                        site_gateway_setting_id: null
                        payment_type: credit_card
                        disabled: false
                        gateway_handle: null
      operationId: listPaymentProfiles
      description: "This method will return all of the active `payment_profiles` for a Site, or for one Customer within a site.  If no payment profiles are found, this endpoint will return an empty array, not a 404."
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: integer
          in: query
          name: customer_id
          description: The ID of the customer for which you wish to list payment profiles
  "/payment_profiles/{payment_profile_id}.json":
    parameters:
      - $ref: "../components/parameters/payment-profile-id-path.yaml"
    get:
      summary: Read Payment Profile
      tags:
        - Payment Profiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Payment-Profile-Response.yaml"
              examples:
                Card:
                  value:
                    payment_profile:
                      id: 10088716
                      first_name: Test
                      last_name: Subscription
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2022
                      customer_id: 14543792
                      current_vault: bogus
                      vault_token: "1"
                      billing_address: 123 Montana Way
                      billing_city: Billings
                      billing_state: MT
                      billing_zip: "59101"
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: ""
                      payment_type: credit_card
                      site_gateway_setting_id: 1
                      gateway_handle: null
                Bank Account:
                  value:
                    payment_profile:
                      id: 10089892
                      first_name: Chester
                      last_name: Tester
                      customer_id: 14543792
                      current_vault: bogus
                      vault_token: "0011223344"
                      billing_address: 456 Juniper Court
                      billing_city: Boulder
                      billing_state: CO
                      billing_zip: "80302"
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: ""
                      bank_name: Bank of Kansas City
                      masked_bank_routing_number: XXXX6789
                      masked_bank_account_number: XXXX3344
                      bank_account_type: checking
                      bank_account_holder_type: personal
                      payment_type: bank_account
                      site_gateway_setting_id: 1
                      gateway_handle: null
        "404":
          description: Not Found
      operationId: readPaymentProfile
      description: |-
        Using the GET method you can retrieve a Payment Profile identified by its unique ID.

        Please note that a different JSON object will be returned if the card method on file is a bank account.

        ### Response for Bank Account

        Example response for Bank Account:

        ```
        {
          "payment_profile": {
            "id": 10089892,
            "first_name": "Chester",
            "last_name": "Tester",
            "customer_id": 14543792,
            "current_vault": "bogus",
            "vault_token": "0011223344",
            "billing_address": "456 Juniper Court",
            "billing_city": "Boulder",
            "billing_state": "CO",
            "billing_zip": "80302",
            "billing_country": "US",
            "customer_vault_token": null,
            "billing_address_2": "",
            "bank_name": "Bank of Kansas City",
            "masked_bank_routing_number": "XXXX6789",
            "masked_bank_account_number": "XXXX3344",
            "bank_account_type": "checking",
            "bank_account_holder_type": "personal",
            "payment_type": "bank_account",
            "site_gateway_setting_id": 1,
            "gateway_handle": null
          }
        }
        ```
    put:
      summary: Update Payment Profile
      tags:
        - Payment Profiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Payment-Profile-Response.yaml"
              examples:
                Example:
                  value:
                    payment_profile:
                      id: 10088716
                      first_name: Test
                      last_name: Subscription
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2022
                      customer_id: 14543792
                      current_vault: bogus
                      vault_token: "1"
                      billing_address: 123 Montana Way
                      billing_city: Billings
                      billing_state: MT
                      billing_zip: "59101"
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: ""
                      payment_type: credit_card
                      site_gateway_setting_id: 1
                      gateway_handle: null
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-String-Map-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      payment_profile: "can't be blank"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updatePaymentProfile
      description: |-
        ## Partial Card Updates

        In the event that you are using the Authorize.net, Stripe, Cybersource, Forte or Braintree Blue payment gateways, you can update just the billing and contact information for a payment method. Note the lack of credit-card related data contained in the JSON payload.

        In this case, the following JSON is acceptable:

        ```
        {
          "payment_profile": {
            "first_name": "Kelly",
            "last_name": "Test",
            "billing_address": "789 Juniper Court",
            "billing_city": "Boulder",
            "billing_state": "CO",
            "billing_zip": "80302",
            "billing_country": "US",
            "billing_address_2": null
          }
        }
        ```

        The result will be that you have updated the billing information for the card, yet retained the original card number data.

        ## Specific notes on updating payment profiles

        - Merchants with **Authorize.net**, **Cybersource**, **Forte**, **Braintree Blue** or **Stripe** as their payment gateway can update their Customer’s credit cards without passing in the full credit card number and CVV.

        - If you are using **Authorize.net**, **Cybersource**, **Forte**, **Braintree Blue** or **Stripe**, Chargify will ignore the credit card number and CVV when processing an update via the API, and attempt a partial update instead. If you wish to change the card number on a payment profile, you will need to create a new payment profile for the given customer.

        - A Payment Profile cannot be updated with the attributes of another type of Payment Profile. For example, if the payment profile you are attempting to update is a credit card, you cannot pass in bank account attributes (like `bank_account_number`), and vice versa.

        - Updating a payment profile directly will not trigger an attempt to capture a past-due balance. If this is the intent, update the card details via the Subscription instead.

        - If you are using Authorize.net or Stripe, you may elect to manually trigger a retry for a past due subscription after a partial update.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Payment-Profile-Request.yaml"
            examples:
              Example:
                value:
                  payment_profile:
                    first_name: Graham
                    last_name: Test
                    full_number: "4111111111111111"
                    card_type: master
                    expiration_month: "04"
                    expiration_year: "2030"
                    current_vault: bogus
                    billing_address: 456 Juniper Court
                    billing_city: Boulder
                    billing_state: CO
                    billing_zip: "80302"
                    billing_country: US
                    billing_address_2: null
    delete:
      summary: Delete Unused Payment Profile
      tags:
        - Payment Profiles
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - The payment profile is in use by one or more subscriptions and cannot be deleted
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: deleteUnusedPaymentProfile
      description: |-
        Deletes an unused payment profile.

        If the payment profile is in use by one or more subscriptions or groups, a 422 and error message will be returned.
  "/subscriptions/{subscription_id}/payment_profiles/{payment_profile_id}.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - $ref: "../components/parameters/payment-profile-id-path.yaml"
    delete:
      summary: Delete Subscription Payment Profile
      responses:
        "204":
          description: No Content
      operationId: deleteSubscriptionsPaymentProfile
      description: |-
        This will delete a payment profile belonging to the customer on the subscription.

        + If the customer has multiple subscriptions, the payment profile will be removed from all of them.

        + If you delete the default payment profile for a subscription, you will need to specify another payment profile to be the default through the api, or either prompt the user to enter a card in the billing portal or on the self-service page, or visit the Payment Details tab on the subscription in the Admin UI and use the “Add New Credit Card” or “Make Active Payment Method” link, (depending on whether there are other cards present).
      tags:
        - Payment Profiles
  "/bank_accounts/{bank_account_id}/verification.json":
    parameters:
      - schema:
          type: integer
        name: bank_account_id
        description: Identifier of the bank account in the system.
        in: path
        required: true
    put:
      summary: Verify Bank Account
      tags:
        - Payment Profiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Bank-Account-Response.yaml"
              examples:
                Example:
                  value:
                    payment_profile:
                      id: 10089892
                      first_name: Chester
                      last_name: Tester
                      customer_id: 14543792
                      current_vault: stripe_connect
                      vault_token: cus_0123abc456def
                      billing_address: 456 Juniper Court
                      billing_city: Boulder
                      billing_state: CO
                      billing_zip: "80302"
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: ""
                      bank_name: Bank of Kansas City
                      masked_bank_routing_number: XXXX6789
                      masked_bank_account_number: XXXX3344
                      bank_account_type: checking
                      bank_account_holder_type: personal
                      payment_type: bank_account
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "You have tried to verify this bank account 10 times. To continue trying to verify the account, please reach out to us directly."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: verifyBankAccount
      description: Submit the two small deposit amounts the customer received in their bank account in order to verify the bank account. (Stripe only)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Bank-Account-Verification-Request.yaml"
            examples:
              Example:
                value:
                  bank_account_verification:
                    deposit_1_in_cents: 32
                    deposit_2_in_cents: 45
  "/invoices/{uid}/refunds.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    post:
      summary: Refund Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Amount: must be greater than 0."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: refundInvoice
      description: |-
        Refund an invoice, segment, or consolidated invoice.

        ## Partial Refund for Consolidated Invoice

        A refund less than the total of a consolidated invoice will be split across its segments.

        A $50.00 refund on a $100.00 consolidated invoice with one $60.00 and one $40.00 segment, the refunded amount will be applied as 50% of each ($30.00 and $20.00 respectively).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Refund-Invoice-Request.yaml"
            examples:
              Refund Invoice:
                value:
                  refund:
                    amount: "100.00"
                    memo: Refund for Basic Plan renewal
                    payment_id: 12345
                    external: false
                    apply_credit: false
                    void_invoice: true
              Refund Consolidated Invoice:
                value:
                  refund:
                    memo: Refund for basic plan renewal
                    payment_id: 101
                    amount: "125.00"
                    segment_uids:
                      - inv_123
                      - inv_789
              Refund All Segments of Consolidated Invoice:
                value:
                  refund:
                    memo: Refund for basic plan renewal
                    payment_id: 10101
                    segment_uids: all
  /invoices.json:
    get:
      summary: List Invoices
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Invoices-Response.yaml"
              examples:
                Example:
                  value:
                    invoices:
                      - uid: inv_8htcd29wcq3q6
                        site_id: 51288
                        customer_id: 20153415
                        subscription_id: 23277588
                        number: "125"
                        sequence_number: 125
                        issue_date: "2018-09-20"
                        due_date: "2018-09-20"
                        paid_date: "2018-09-20"
                        status: paid
                        collection_method: automatic
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: parent
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: 23277588
                        product_name: Trial and setup fee
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 20153415
                          first_name: Meg
                          last_name: Example
                          organization: ""
                          email: meg@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Boston
                          state: MA
                          zip: "90210"
                          country: US
                        shipping_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Boston
                          state: MA
                          zip: "90210"
                          country: US
                        subtotal_amount: "100.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "100.0"
                        credit_amount: "0.0"
                        paid_amount: "100.0"
                        refund_amount: "0.0"
                        due_amount: "0.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8htcd29wcq3q6?token=n9fr5fxff5v74c7h9srg3cwd"
                      - uid: inv_8hr3546xp4h8n
                        site_id: 51288
                        customer_id: 21687686
                        subscription_id: 22007644
                        number: "124"
                        sequence_number: 124
                        issue_date: "2018-09-18"
                        due_date: "2018-09-18"
                        paid_date: null
                        status: open
                        collection_method: remittance
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: none
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: null
                        product_name: Trial and setup fee
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 21687686
                          first_name: Charlene
                          last_name: Tester
                          organization: ""
                          email: food@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: ""
                          line2: ""
                          city: ""
                          state: ""
                          zip: ""
                          country: ""
                        shipping_address:
                          street: ""
                          line2: ""
                          city: ""
                          state: ""
                          zip: ""
                          country: ""
                        subtotal_amount: "100.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "100.0"
                        credit_amount: "0.0"
                        paid_amount: "0.0"
                        refund_amount: "0.0"
                        due_amount: "100.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8hr3546xp4h8n?token=n9fr5fxff5v74c7h9srg3cwd"
                      - uid: inv_8hr3546wdwxkr
                        site_id: 51288
                        customer_id: 21687670
                        subscription_id: 22007627
                        number: "123"
                        sequence_number: 123
                        issue_date: "2018-09-18"
                        due_date: "2018-09-18"
                        paid_date: "2018-09-18"
                        status: paid
                        collection_method: automatic
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: none
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: null
                        product_name: Trial End - Free
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 21687670
                          first_name: Hello
                          last_name: World
                          organization: "123"
                          email: example@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: 123 Anywhere Street
                          line2: ""
                          city: Boston
                          state: MA
                          zip: "02120"
                          country: US
                        shipping_address:
                          street: ""
                          line2: ""
                          city: Boston
                          state: AL
                          zip: "02120"
                          country: US
                        subtotal_amount: "0.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "0.0"
                        credit_amount: "0.0"
                        paid_amount: "0.0"
                        refund_amount: "0.0"
                        due_amount: "0.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8hr3546wdwxkr?token=n9fr5fxff5v74c7h9srg3cwd"
                      - uid: inv_8hjtk8bz56bbp
                        site_id: 51288
                        customer_id: 20137757
                        subscription_id: 20541100
                        number: "122"
                        sequence_number: 122
                        issue_date: "2018-09-10"
                        due_date: "2018-09-10"
                        paid_date: "2018-09-10"
                        status: paid
                        collection_method: automatic
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: none
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: null
                        product_name: $0 Product
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 20137757
                          first_name: Sasha
                          last_name: Example
                          organization: ""
                          email: example@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Catville
                          state: MA
                          zip: "90210"
                          country: US
                        shipping_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Catville
                          state: AL
                          zip: "90210"
                          country: US
                        subtotal_amount: "0.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "0.0"
                        credit_amount: "0.0"
                        paid_amount: "0.0"
                        refund_amount: "0.0"
                        due_amount: "0.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8hjtk8bz56bbp?token=fb6kpjz5rcr2vttyjs4rcv6y"
      operationId: listInvoices
      description: "By default, invoices returned on the index will only include totals, not detailed breakdowns for `line_items`, `discounts`, `taxes`, `credits`, `payments`, `custom_fields`, or `refunds`. To include breakdowns, pass the specific field as a key in the query with a value set to `true`."
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            type: string
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns invoices with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns invoices with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            $ref: "../components/schemas/Invoice-Status.yaml"
          in: query
          name: status
          description: "The current status of the invoice.  Allowed Values: draft, open, paid, pending, voided"
        - schema:
            type: integer
          in: query
          name: subscription_id
          description: The subscription's ID.
        - schema:
            type: string
          in: query
          name: subscription_group_uid
          description: The UID of the subscription group you want to fetch consolidated invoices for. This will return a paginated list of consolidated invoices for the specified group.
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          in: query
          name: direction
          description: The sort direction of the returned invoices.
        - schema:
            type: boolean
            default: false
          in: query
          name: line_items
          description: Include line items data
        - schema:
            type: boolean
            default: false
          in: query
          name: discounts
          description: Include discounts data
        - schema:
            type: boolean
            default: false
          in: query
          name: taxes
          description: Include taxes data
        - schema:
            type: boolean
            default: false
          in: query
          name: credits
          description: Include credits data
        - schema:
            type: boolean
            default: false
          in: query
          name: payments
          description: Include payments data
        - schema:
            type: boolean
            default: false
          in: query
          name: custom_fields
          description: Include custom fields data
        - schema:
            type: boolean
            default: false
          in: query
          name: refunds
          description: Include refunds data
        - schema:
            $ref: "../components/schemas/Invoice-Date-Field.yaml"
          in: query
          name: date_field
          description:
            "The type of filter you would like to apply to your search.
            Use in query `date_field=issue_date`."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns invoices with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date. Allowed to be used only along with date_field set to created_at or updated_at."
        - schema:
            type: string
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns invoices with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date. Allowed to be used only along with date_field set to created_at or updated_at."
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
          in: query
          name: customer_ids
          style: form
          explode: false
          description:
            "Allows fetching invoices with matching customer id based on provided values.
            Use in query `customer_ids=1,2,3`."
        - schema:
            type: array
            items:
              type: string
            example:
              - "1234"
              - "1235"
          in: query
          name: number
          style: form
          explode: false
          description:
            "Allows fetching invoices with matching invoice number based on provided values.
            Use in query `number=1234,1235`."
        - schema:
            type: array
            items:
              type: integer
            example:
              - 23
              - 34
          in: query
          name: product_ids
          style: form
          explode: false
          description:
            "Allows fetching invoices with matching line items product ids based on provided values.
            Use in query `product_ids=23,34`."
        - schema:
            $ref: "../components/schemas/Invoice-Sort-Field.yaml"
          in: query
          name: sort
          description: "Allows specification of the order of the returned list.
            Use in query `sort=total_amount`."
  "/invoices/{uid}.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    get:
      summary: Read Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
              examples:
                Example:
                  value:
                    uid: inv_8gd8tdhtd3hgr
                    site_id: 51288
                    customer_id: 20194505
                    subscription_id: 20597774
                    number: "117"
                    sequence_number: 117
                    issue_date: "2018-07-26"
                    due_date: "2018-07-26"
                    paid_date: "2018-07-26"
                    status: paid
                    collection_method: automatic
                    payment_instructions: "Make checks payable to Acme, Inc."
                    currency: USD
                    consolidation_level: none
                    parent_invoice_uid: null
                    parent_invoice_number: null
                    group_primary_subscription_id: null
                    product_name: Monthly Product
                    product_family_name: Billing Plans
                    seller:
                      name: General Goods
                      address:
                        street: 123 General Goods Way
                        line2: Apt. 10
                        city: Boston
                        state: MA
                        zip: "02120"
                        country: US
                      phone: 555-555-1212
                    customer:
                      chargify_id: 20194505
                      first_name: Joe
                      last_name: Example
                      organization: null
                      email: joe@example.com
                    memo: Please pay within 15 days.
                    billing_address:
                      street: null
                      line2: null
                      city: null
                      state: null
                      zip: null
                      country: null
                    shipping_address:
                      street: null
                      line2: null
                      city: null
                      state: null
                      zip: null
                      country: null
                    subtotal_amount: "100.0"
                    discount_amount: "0.0"
                    tax_amount: "0.0"
                    total_amount: "100.0"
                    credit_amount: "0.0"
                    paid_amount: "100.0"
                    refund_amount: "0.0"
                    due_amount: "0.0"
                    line_items:
                      - uid: li_8gd8tdhhgk55k
                        title: Monthly Product
                        description: "Jul 26, 2018 - Aug 26, 2018"
                        quantity: "1.0"
                        unit_price: "100.0"
                        subtotal_amount: "100.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "100.0"
                        tiered_unit_price: false
                        period_range_start: "2018-07-26"
                        period_range_end: "2018-08-26"
                        product_id: 4607632
                        product_version: 1
                        component_id: null
                        price_point_id: null
                    discounts: []
                    taxes: []
                    credits: []
                    payments:
                      - transaction_time: "2018-07-26T15:22:02Z"
                        memo: "Joe Example - Monthly Product: Renewal payment"
                        original_amount: "100.0"
                        applied_amount: "100.0"
                        payment_method:
                          card_brand: bogus
                          card_expiration: 10/2020
                          last_four: null
                          masked_card_number: XXXX-XXXX-XXXX-1
                          type: credit_card
                        transaction_id: 253028955
                        prepayment: false
                    refunds: []
                    custom_fields: []
                    public_url: "https://www.chargifypay.com/invoice/inv_8jzrw74xq8kxr?token=fb6kpjz5rcr2vttyjs4rcv6y"
      operationId: readInvoice
      description: Use this endpoint to retrieve the details for an invoice.
  /invoices/events.json:
    get:
      summary: List Invoice Events
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Invoice-Events-Response.yaml"
              examples:
                Example:
                  value:
                    events:
                      - id: 83
                        event_type: apply_payment
                        event_data:
                          memo: "Non-Resumable Canceled On Purpose - Standard Plan: Renewal payment"
                          original_amount: "168.61"
                          applied_amount: "168.61"
                          transaction_time: "2018-08-01T16:00:00Z"
                          payment_method:
                            card_brand: visa
                            card_expiration: 12/2022
                            last_four: null
                            masked_card_number: XXXX-XXXX-XXXX-1111
                            type: credit_card
                          consolidation_level: none
                        timestamp: "2018-08-01T16:00:00Z"
                        invoice:
                          id: 614942008934401500
                          uid: inv_8gk5bwkct3gqt
                          site_id: 20
                          customer_id: 6
                          subscription_id: 10
                          number: "25"
                          sequence_number: 25
                          transaction_time: "2018-08-01T16:00:00Z"
                          created_at: "2018-08-01T16:00:00Z"
                          updated_at: "2018-08-01T16:00:00Z"
                          issue_date: "2018-08-01"
                          due_date: "2018-08-01"
                          paid_date: "2018-08-01"
                          status: paid
                          role: renewal
                          collection_method: automatic
                          payment_instructions: 'Please make checks payable to "Acme, Inc."'
                          currency: USD
                          consolidation_level: none
                          parent_invoice_id: null
                          subscription_group_id: null
                          parent_invoice_number: null
                          product_name: Standard Plan
                          product_family_name: Cloud Compute Servers
                          seller:
                            name: "Acme, Inc."
                            address:
                              street: null
                              line2: null
                              city: null
                              state: null
                              zip: null
                              country: null
                            phone: 555-555-1234 x137
                            logo_url: null
                          customer:
                            chargify_id: 6
                            first_name: Non-Resumable
                            last_name: Canceled On Purpose
                            organization: null
                            email: evan4@example.com
                          payer:
                            chargify_id: 6
                            first_name: Non-Resumable
                            last_name: Canceled On Purpose
                            organization: null
                            email: evan4@example.com
                          recipient_emails: []
                          net_terms: 0
                          memo: "Thanks for your business! If you have any questions, please contact your account manager."
                          billing_address:
                            street: 200 Billing Rd.
                            line2: Suite 100
                            city: Needham
                            state: MA
                            zip: "02494"
                            country: US
                          shipping_address:
                            street: 100 Shipping St.
                            line2: Apt 200
                            city: Pleasantville
                            state: NC
                            zip: "12345"
                            country: US
                          line_items:
                            - uid: li_8gk5bwkct3gqk
                              title: Standard Plan
                              description: 08/01/2018 - 09/01/2018
                              quantity: "1.0"
                              unit_price: "99.0"
                              subtotal_amount: "99.0"
                              discount_amount: "9.9"
                              tax_amount: "6.01425"
                              total_amount: "95.11425"
                              tiered_unit_price: false
                              period_range_start: "2018-08-01"
                              period_range_end: "2018-09-01"
                              transaction_id: 120
                              product_id: 84
                              product_version: 1
                              component_id: null
                              price_point_id: null
                              hide: false
                            - uid: li_8gk5bwkct3gqm
                              title: Small Instance (Hourly)
                              description: 07/22/2018 - 08/01/2018
                              quantity: "162.0"
                              unit_price: "0.09567901"
                              subtotal_amount: "15.5"
                              discount_amount: "1.55"
                              tax_amount: "0.941625"
                              total_amount: "14.891625"
                              tiered_unit_price: true
                              period_range_start: "2018-07-22"
                              period_range_end: "2018-08-01"
                              transaction_id: 121
                              product_id: 84
                              product_version: 1
                              component_id: 76
                              price_point_id: null
                              hide: false
                              component_cost_data:
                                rates:
                                  - component_code_id: null
                                    price_point_id: 160
                                    product_id: 84
                                    quantity: "162.0"
                                    amount: "15.5"
                                    pricing_scheme: tiered
                                    tiers:
                                      - starting_quantity: 1
                                        ending_quantity: 100
                                        quantity: "100.0"
                                        unit_price: "0.0"
                                        amount: "0.0"
                                      - starting_quantity: 101
                                        ending_quantity: null
                                        quantity: "62.0"
                                        unit_price: "0.25"
                                        amount: "15.5"
                            - uid: li_8gk5bwkct3gqn
                              title: Large Instance (Hourly)
                              description: 07/22/2018 - 08/01/2018
                              quantity: "194.0"
                              unit_price: "0.24226804"
                              subtotal_amount: "47.0"
                              discount_amount: "4.7"
                              tax_amount: "2.85525"
                              total_amount: "45.15525"
                              tiered_unit_price: true
                              period_range_start: "2018-07-22"
                              period_range_end: "2018-08-01"
                              transaction_id: 122
                              product_id: 84
                              product_version: 1
                              component_id: 77
                              price_point_id: null
                              hide: false
                              component_cost_data:
                                rates:
                                  - component_code_id: null
                                    price_point_id: 161
                                    product_id: 84
                                    quantity: "194.0"
                                    amount: "47.0"
                                    pricing_scheme: tiered
                                    tiers:
                                      - starting_quantity: 1
                                        ending_quantity: 100
                                        quantity: "100.0"
                                        unit_price: "0.0"
                                        amount: "0.0"
                                      - starting_quantity: 101
                                        ending_quantity: null
                                        quantity: "94.0"
                                        unit_price: "0.5"
                                        amount: "47.0"
                            - uid: li_8gk5bwkct3gqp
                              title: IP Addresses
                              description: 08/01/2018 - 09/01/2018
                              quantity: "7.0"
                              unit_price: "2.0"
                              subtotal_amount: "14.0"
                              discount_amount: "1.4"
                              tax_amount: "0.8505"
                              total_amount: "13.4505"
                              tiered_unit_price: false
                              period_range_start: "2018-08-01"
                              period_range_end: "2018-09-01"
                              transaction_id: 123
                              product_id: 84
                              product_version: 1
                              component_id: 79
                              price_point_id: 163
                              hide: false
                              component_cost_data:
                                rates:
                                  - component_code_id: null
                                    price_point_id: 163
                                    product_id: 84
                                    quantity: "7.0"
                                    amount: "14.0"
                                    pricing_scheme: per_unit
                                    tiers:
                                      - starting_quantity: 1
                                        ending_quantity: null
                                        quantity: "7.0"
                                        unit_price: "2.0"
                                        amount: "14.0"
                          subtotal_amount: "175.5"
                          discount_amount: "17.55"
                          discounts:
                            - uid: dli_8gk5bwkct3gqq
                              title: Multi-service discount (10%)
                              description: null
                              code: MULTI3
                              source_type: Coupon
                              source_id: 40
                              discount_type: percentage
                              percentage: "10.0"
                              eligible_amount: "175.5"
                              discount_amount: "17.55"
                              transaction_id: 124
                              line_item_breakouts:
                                - uid: li_8gk5bwkct3gqk
                                  eligible_amount: "99.0"
                                  discount_amount: "9.9"
                                - uid: li_8gk5bwkct3gqm
                                  eligible_amount: "15.5"
                                  discount_amount: "1.55"
                                - uid: li_8gk5bwkct3gqn
                                  eligible_amount: "47.0"
                                  discount_amount: "4.7"
                                - uid: li_8gk5bwkct3gqp
                                  eligible_amount: "14.0"
                                  discount_amount: "1.4"
                          tax_amount: "10.66"
                          taxes:
                            - uid: tli_8gk5bwkct3gqr
                              title: NC Sales Tax
                              description: null
                              source_type: Tax
                              source_id: 1
                              percentage: "6.75"
                              taxable_amount: "157.95"
                              tax_amount: "10.66"
                              transaction_id: 125
                              line_item_breakouts:
                                - uid: li_8gk5bwkct3gqk
                                  taxable_amount: "89.1"
                                  tax_amount: "6.01425"
                                - uid: li_8gk5bwkct3gqm
                                  taxable_amount: "13.95"
                                  tax_amount: "0.941625"
                                - uid: li_8gk5bwkct3gqn
                                  taxable_amount: "42.3"
                                  tax_amount: "2.85525"
                                - uid: li_8gk5bwkct3gqp
                                  taxable_amount: "12.6"
                                  tax_amount: "0.8505"
                              tax_component_breakouts:
                                - tax_rule_id: 1
                                  percentage: "6.75"
                                  country_code: US
                                  subdivision_code: NC
                          credit_amount: "0.0"
                          refund_amount: "0.0"
                          total_amount: "168.61"
                          paid_amount: "168.61"
                          due_amount: "0.0"
                          credits: []
                          refunds: []
                          payments:
                            - memo: "Non-Resumable Canceled On Purpose - Standard Plan: Renewal payment"
                              original_amount: "168.61"
                              applied_amount: "168.61"
                              transaction_time: "2018-08-01T16:00:00Z"
                              payment_method:
                                card_brand: visa
                                card_expiration: 12/2022
                                last_four: null
                                masked_card_number: XXXX-XXXX-XXXX-1111
                                type: credit_card
                              transaction_id: 126
                              prepayment: false
                          custom_fields: []
                          display_settings:
                            hide_zero_subtotal_lines: false
                            include_discounts_on_lines: false
                    page: 48
                    per_page: 1
                    total_pages: 102
      operationId: listInvoiceEvents
      description: |-
        This endpoint returns a list of invoice events. Each event contains event "data" (such as an applied payment) as well as a snapshot of the `invoice` at the time of event completion.

        Exposed event types are:

        + issue_invoice
        + apply_credit_note
        + apply_payment
        + refund_invoice
        + void_invoice
        + void_remainder
        + backport_invoice
        + change_invoice_status
        + change_invoice_collection_method
        + remove_payment
        + failed_payment
        + apply_debit_note
        + create_debit_note
        + change_chargeback_status

        Invoice events are returned in ascending order.

        If both a `since_date` and `since_id` are provided in request parameters, the `since_date` will be used.

        Note - invoice events that occurred prior to 09/05/2018 __will not__ contain an `invoice` snapshot.
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            type: string
          in: query
          name: since_date
          description: The timestamp in a format `YYYY-MM-DD T HH:MM:SS Z`, or `YYYY-MM-DD`(in this case, it returns data from the beginning of the day). of the event from which you want to start the search. All the events before the `since_date` timestamp are not returned in the response.
        - schema:
            type: integer
          in: query
          name: since_id
          description: The ID of the event from which you want to start the search(ID is not included. e.g. if ID is set to 2, then all events with ID 3 and more will be shown) This parameter is not used if since_date is defined.
        - $ref: "../components/parameters/page.yaml"
        - schema:
            type: integer
            default: 100
            min: 1
            max: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 100. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: string
          in: query
          name: invoice_uid
          description: Providing an invoice_uid allows for scoping of the invoice events to a single invoice or credit note.
        - schema:
            type: string
          in: query
          description: Use this parameter if you want to fetch also invoice events with change_invoice_status type.
          name: with_change_invoice_status
        - schema:
            type: array
            items:
              $ref: "../components/schemas/Invoice-Event-Type.yaml"
          in: query
          name: event_types
          style: form
          explode: false
          description: "Filter results by event_type. Supply a comma separated list of event types (listed above). Use in query: `event_types=void_invoice,void_remainder`."
  "/invoices/{uid}/payments.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    post:
      summary: Record Payment for Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      - "Amount: is not a number."
                Example-2:
                  value:
                    errors:
                      - Payment amount 10.50 exceeds due amount 4.00
                Example-3:
                  value:
                    errors:
                      - Invoice must be open or in collections to apply payment
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: recordPaymentForInvoice
      description: |-
        This API call should be used when you want to record a payment of a given type against a specific invoice. If you would like to apply a payment across multiple invoices, you can use the Bulk Payment endpoint.

        ## Create a Payment from the existing payment profile

        In order to apply a payment to an invoice using an existing payment profile, specify `type` as `payment`, the amount less than the invoice total, and the customer's `payment_profile_id`. The ID of a payment profile might be retrieved via the Payment Profiles API endpoint.

        ```
        {
          "type": "payment",
          "payment": {
            "amount": 10.00,
            "payment_profile_id": 123
          }
        }
        ```

        ## Create a Payment from the Subscription's Prepayment Account

        In order apply a prepayment to an invoice, specify the `type` as `prepayment`, and also the `amount`.

        ```
        {
          "type": "prepayment",
          "payment": {
            "amount": 10.00
          }
        }
        ```

        Note that the `amount` must be less than or equal to the Subscription's Prepayment account balance.

        ## Create a Payment from the Subscription's Service Credit Account

        In order to apply a service credit to an invoice, specify the `type` as `service_credit`, and also the `amount`:


        ```
        {
          "type": "service_credit",
          "payment": {
            "amount": 10.00
          }
        }
        ```

        Note that Chargify will attempt to fully pay the invoice's `due_amount` from the Subscription's Service Credit account. At this time, partial payments from a Service Credit Account are only allowed for consolidated invoices (subscription groups). Therefore, for normal invoices the Service Credit account balance must be greater than or equal to the invoice's `due_amount`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Invoice-Payment-Request.yaml"
            examples:
              Example 1:
                value:
                  payment:
                    amount: 124.33
                    memo: for John Smith
                    method: check
                    details: "#0102"
              Example 2:
                value:
                  type: prepayment
                  payment:
                    amount: 10
        description: ""
  /invoices/payments.json:
    post:
      summary: Record Payment for Multiple Invoices
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Multi-Invoice-Payment-Response.yaml"
              examples:
                Example:
                  value:
                    payment:
                      transaction_id: 1
                      total_amount: "100.00"
                      currency_code: USD
                      applications:
                        - invoice_uid: inv_8gk5bwkct3gqt
                          application_uid: pmt_1tr0hgsct3ybx
                          applied_amount: "50.00"
                        - invoice_uid: inv_7bc6bwkct3lyt
                          application_uid: pmt_2
                          applied_amount: "50.00"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Total amount must be greater than 0
                      - Total amount must be higher or equal to invoices payment amount sum
                      - Invoice does not exist
                      - Payment method must valid
                      - Invoices must be in the same currency
                      - A required parameter is missing
                      - Invoices belong to different subscriptions. Only invoices from same subscriptions are allowed when total amount exceeds invoices due amount.
                      - "Individual invoices may not be overpaid. To create a prepayment, add overage to the total amount."
                      - Paying consolidated invoices is forbidden
                      - Invoice payment amounts must be greater than 0
                      - Invoice must have an open balance
                      - Effective date is missing
                      - Effective date is invalid or malformed
                      - Effective date must occur in the past
                      - "Multiple applications associated to a single invoice, please aggregate and send as a single application per invoice."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: recordPaymentForMultipleInvoices
      description: |-
        This API call should be used when you want to record an external payment against multiple invoices.

         In order apply a payment to multiple invoices, at minimum, specify the `amount` and `applications` (i.e., `invoice_uid` and `amount`) details.

        ```
        {
          "payment": {
            "memo": "to pay the bills",
            "details": "check number 8675309",
            "method": "check",
            "amount": "250.00",
            "applications": [
              {
                "invoice_uid": "inv_8gk5bwkct3gqt",
                "amount": "100.00"
              },
              {
                "invoice_uid": "inv_7bc6bwkct3lyt",
                "amount": "150.00"
              }
            ]
          }
        }
        ```

        Note that the invoice payment amounts must be greater than 0. Total amount must be greater or equal to invoices payment amount sum.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Multi-Invoice-Payment-Request.yaml"
            examples:
              Example:
                value:
                  payment:
                    memo: to pay the bills
                    details: check number 8675309
                    method: check
                    amount: "100.00"
                    applications:
                      - invoice_uid: inv_8gk5bwkct3gqt
                        amount: "50.00"
                      - invoice_uid: inv_7bc6bwkct3lyt
                        amount: "50.00"
      parameters: []
    parameters: []
  /credit_notes.json:
    get:
      summary: List Credit Notes
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Credit-Notes-Response.yaml"
              examples:
                Example:
                  value:
                    credit_notes:
                      - uid: cn_8m9vbd5kkv7kr
                        site_id: 20
                        customer_id: 3
                        subscription_id: 2
                        number: "77"
                        sequence_number: 78
                        issue_date: "2018-12-31"
                        applied_date: "2018-12-31"
                        status: applied
                        currency: USD
                        memo: Refund for overpayment
                        seller:
                          name: "Acme, Inc."
                          address:
                            street: 122 E Houston St
                            line2: Suite 105
                            city: San Antonio
                            state: TX
                            zip: "78205"
                            country: US
                          phone: 555-555-1234 x137
                        customer:
                          chargify_id: 3
                          first_name: Marty
                          last_name: McFly
                          organization: "Time Travellers, Inc."
                          email: timetraveller1985@example.com
                          reference: null
                        billing_address:
                          street: 200 Billing Rd.
                          line2: Suite 100
                          city: Needham
                          state: MA
                          zip: "02494"
                          country: US
                        shipping_address:
                          street: 100 Shipping St.
                          line2: Apt 200
                          city: Pleasantville
                          state: NC
                          zip: "12345"
                          country: US
                        subtotal_amount: "208.69341779"
                        discount_amount: "20.87125167"
                        tax_amount: "12.67783387"
                        total_amount: "200.5"
                        applied_amount: "200.5"
                        remaining_amount: "0.0"
                        line_items:
                          - uid: cnli_8k5jvdzct4h9x
                            title: "IP Addresses: 5 to 10 addresses"
                            description: 38.2% credit
                            quantity: "0.9855"
                            unit_price: "2.0"
                            subtotal_amount: "1.971004"
                            discount_amount: "0.19862831"
                            tax_amount: "0.11963536"
                            total_amount: "1.89201105"
                            tiered_unit_price: false
                            period_range_start: "2018-11-30"
                            period_range_end: "2018-11-30"
                            product_id: 85
                            product_version: 1
                            component_id: 81
                            price_point_id: 165
                          - uid: cnli_8kjttvjcjx8b4
                            title: Professional Plan
                            description: 38.2% credit
                            quantity: "0.382"
                            unit_price: "299.0"
                            subtotal_amount: "114.21127834"
                            discount_amount: "11.42112783"
                            tax_amount: "6.93833516"
                            total_amount: "109.72848567"
                            tiered_unit_price: false
                            period_range_start: "2018-12-30"
                            period_range_end: "2018-12-30"
                            product_id: 85
                            product_version: 1
                            component_id: null
                            price_point_id: null
                          - uid: cnli_8kjttvjknzhx7
                            title: Small Instance (Hourly)
                            description: 38.2% credit
                            quantity: "74.8676"
                            unit_price: "0.12244898"
                            subtotal_amount: "9.16746047"
                            discount_amount: "0.91674605"
                            tax_amount: "0.55692322"
                            total_amount: "8.80763764"
                            tiered_unit_price: true
                            period_range_start: "2018-11-30"
                            period_range_end: "2018-11-30"
                            product_id: 85
                            product_version: 1
                            component_id: 78
                            price_point_id: null
                          - uid: cnli_8kjttvjnmh25w
                            title: Large Instance (Hourly)
                            description: 38.2% credit
                            quantity: "183.3492"
                            unit_price: "0.39583333"
                            subtotal_amount: "72.57572871"
                            discount_amount: "7.25757287"
                            tax_amount: "4.40897552"
                            total_amount: "69.72713136"
                            tiered_unit_price: true
                            period_range_start: "2018-11-30"
                            period_range_end: "2018-11-30"
                            product_id: 85
                            product_version: 1
                            component_id: 79
                            price_point_id: null
                          - uid: cnli_8kjttvjqn86kc
                            title: Email Messages
                            description: 38.2% credit
                            quantity: "10076.9489"
                            unit_price: "0.00031045"
                            subtotal_amount: "3.12839588"
                            discount_amount: "0.31322157"
                            tax_amount: "0.19002427"
                            total_amount: "3.00519858"
                            tiered_unit_price: true
                            period_range_start: "2018-11-30"
                            period_range_end: "2018-11-30"
                            product_id: 85
                            product_version: 1
                            component_id: 80
                            price_point_id: null
                          - uid: cnli_8kjttvjtxxbdd
                            title: IP Addresses
                            description: 38.2% credit
                            quantity: "3.8198"
                            unit_price: "2.0"
                            subtotal_amount: "7.63955039"
                            discount_amount: "0.76395504"
                            tax_amount: "0.46410269"
                            total_amount: "7.33969804"
                            tiered_unit_price: false
                            period_range_start: "2018-12-30"
                            period_range_end: "2018-12-30"
                            product_id: 85
                            product_version: 1
                            component_id: 81
                            price_point_id: 165
                        discounts:
                          - uid: cndli_8k5jvdzct4h9y
                            title: Multi-service discount (10%)
                            code: MULTI3
                            source_type: Coupon
                            source_id: 40
                            discount_type: percentage
                            percentage: "10.0"
                            eligible_amount: "208.69341779"
                            discount_amount: "20.87125167"
                            line_item_breakouts:
                              - uid: cnli_8k5jvdzct4h9x
                                eligible_amount: "1.971004"
                                discount_amount: "0.19862831"
                              - uid: cnli_8kjttvjcjx8b4
                                eligible_amount: "114.21127834"
                                discount_amount: "11.42112783"
                              - uid: cnli_8kjttvjknzhx7
                                eligible_amount: "9.16746047"
                                discount_amount: "0.91674605"
                              - uid: cnli_8kjttvjnmh25w
                                eligible_amount: "72.57572871"
                                discount_amount: "7.25757287"
                              - uid: cnli_8kjttvjqn86kc
                                eligible_amount: "3.12839588"
                                discount_amount: "0.31322157"
                              - uid: cnli_8kjttvjtxxbdd
                                eligible_amount: "7.63955039"
                                discount_amount: "0.76395504"
                        taxes:
                          - uid: cntli_8k5jvdzct4h9z
                            title: NC Sales Tax
                            source_type: Tax
                            source_id: 1
                            percentage: "6.75"
                            taxable_amount: "187.82216613"
                            tax_amount: "12.67783387"
                            line_item_breakouts:
                              - uid: cnli_8k5jvdzct4h9x
                                taxable_amount: "1.77237569"
                                tax_amount: "0.11963536"
                              - uid: cnli_8kjttvjcjx8b4
                                taxable_amount: "102.7901505"
                                tax_amount: "6.93833516"
                              - uid: cnli_8kjttvjknzhx7
                                taxable_amount: "8.25071442"
                                tax_amount: "0.55692322"
                              - uid: cnli_8kjttvjnmh25w
                                taxable_amount: "65.31815584"
                                tax_amount: "4.40897552"
                              - uid: cnli_8kjttvjqn86kc
                                taxable_amount: "2.81517432"
                                tax_amount: "0.19002427"
                              - uid: cnli_8kjttvjtxxbdd
                                taxable_amount: "6.87559535"
                                tax_amount: "0.46410269"
                        applications:
                          - uid: cdt_8m9vbdbdwd28n
                            transaction_time: "2018-12-31T21:19:28Z"
                            invoice_uid: inv_8k5jvdzct4hb2
                            memo: Refund for overpayment
                            applied_amount: "200.5"
                        refunds:
                          - transaction_id: 329
                            payment_id: 39
                            memo: Refund for overpayment
                            original_amount: "524.9"
                            applied_amount: "200.5"
      operationId: listCreditNotes
      description: |-
        Credit Notes are like inverse invoices. They reduce the amount a customer owes.

        By default, the credit notes returned by this endpoint will exclude the arrays of `line_items`, `discounts`, `taxes`, `applications`, or `refunds`. To include these arrays, pass the specific field as a key in the query with a value set to `true`.
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            type: integer
          in: query
          name: subscription_id
          description: "The subscription's Chargify id"
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: boolean
            default: false
          in: query
          name: line_items
          description: Include line items data
        - schema:
            type: boolean
            default: false
          in: query
          name: discounts
          description: Include discounts data
        - schema:
            type: boolean
            default: false
          in: query
          name: taxes
          description: Include taxes data
        - schema:
            type: boolean
            default: false
          in: query
          name: refunds
          description: Include refunds data
        - schema:
            type: boolean
            default: false
          in: query
          name: applications
          description: Include applications data
  "/credit_notes/{uid}.json":
    parameters:
      - schema:
          type: string
        name: uid
        in: path
        required: true
        description: The unique identifier of the credit note
    get:
      summary: Read Credit Note
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Credit-Note.yaml"
              examples:
                Example:
                  value:
                    uid: cn_8m9vbd5kkv7kr
                    site_id: 20
                    customer_id: 3
                    subscription_id: 2
                    number: "77"
                    sequence_number: 78
                    issue_date: "2018-12-31"
                    applied_date: "2018-12-31"
                    status: applied
                    currency: USD
                    memo: Refund for overpayment
                    seller:
                      name: "Acme, Inc."
                      address:
                        street: 122 E Houston St
                        line2: Suite 105
                        city: San Antonio
                        state: TX
                        zip: "78205"
                        country: US
                      phone: 555-555-1234 x137
                    customer:
                      chargify_id: 3
                      first_name: Marty
                      last_name: McFly
                      organization: "Time Travellers, Inc."
                      email: timetraveller1985@example.com
                      reference: null
                    billing_address:
                      street: 200 Billing Rd.
                      line2: Suite 100
                      city: Needham
                      state: MA
                      zip: "02494"
                      country: US
                    shipping_address:
                      street: 100 Shipping St.
                      line2: Apt 200
                      city: Pleasantville
                      state: NC
                      zip: "12345"
                      country: US
                    subtotal_amount: "208.69341779"
                    discount_amount: "20.87125167"
                    tax_amount: "12.67783387"
                    total_amount: "200.5"
                    applied_amount: "200.5"
                    remaining_amount: "0.0"
                    line_items:
                      - uid: cnli_8k5jvdzct4h9x
                        title: "IP Addresses: 5 to 10 addresses"
                        description: 38.2% credit
                        quantity: "0.9855"
                        unit_price: "2.0"
                        subtotal_amount: "1.971004"
                        discount_amount: "0.19862831"
                        tax_amount: "0.11963536"
                        total_amount: "1.89201105"
                        tiered_unit_price: false
                        period_range_start: "2018-11-30"
                        period_range_end: "2018-11-30"
                        product_id: 85
                        product_version: 1
                        component_id: 81
                        price_point_id: 165
                        billing_schedule_item_id: null
                        custom_item: false
                      - uid: cnli_8kjttvjcjx8b4
                        title: Professional Plan
                        description: 38.2% credit
                        quantity: "0.382"
                        unit_price: "299.0"
                        subtotal_amount: "114.21127834"
                        discount_amount: "11.42112783"
                        tax_amount: "6.93833516"
                        total_amount: "109.72848567"
                        tiered_unit_price: false
                        period_range_start: "2018-12-30"
                        period_range_end: "2018-12-30"
                        product_id: 85
                        product_version: 1
                        component_id: null
                        price_point_id: null
                        billing_schedule_item_id: null
                        custom_item: false
                      - uid: cnli_8kjttvjknzhx7
                        title: Small Instance (Hourly)
                        description: 38.2% credit
                        quantity: "74.8676"
                        unit_price: "0.12244898"
                        subtotal_amount: "9.16746047"
                        discount_amount: "0.91674605"
                        tax_amount: "0.55692322"
                        total_amount: "8.80763764"
                        tiered_unit_price: true
                        period_range_start: "2018-11-30"
                        period_range_end: "2018-11-30"
                        product_id: 85
                        product_version: 1
                        component_id: 78
                        price_point_id: null
                        billing_schedule_item_id: null
                        custom_item: false
                      - uid: cnli_8kjttvjnmh25w
                        title: Large Instance (Hourly)
                        description: 38.2% credit
                        quantity: "183.3492"
                        unit_price: "0.39583333"
                        subtotal_amount: "72.57572871"
                        discount_amount: "7.25757287"
                        tax_amount: "4.40897552"
                        total_amount: "69.72713136"
                        tiered_unit_price: true
                        period_range_start: "2018-11-30"
                        period_range_end: "2018-11-30"
                        product_id: 85
                        product_version: 1
                        component_id: 79
                        price_point_id: null
                        billing_schedule_item_id: null
                        custom_item: false
                      - uid: cnli_8kjttvjqn86kc
                        title: Email Messages
                        description: 38.2% credit
                        quantity: "10076.9489"
                        unit_price: "0.00031045"
                        subtotal_amount: "3.12839588"
                        discount_amount: "0.31322157"
                        tax_amount: "0.19002427"
                        total_amount: "3.00519858"
                        tiered_unit_price: true
                        period_range_start: "2018-11-30"
                        period_range_end: "2018-11-30"
                        product_id: 85
                        product_version: 1
                        component_id: 80
                        price_point_id: null
                        billing_schedule_item_id: null
                        custom_item: false
                      - uid: cnli_8kjttvjtxxbdd
                        title: IP Addresses
                        description: 38.2% credit
                        quantity: "3.8198"
                        unit_price: "2.0"
                        subtotal_amount: "7.63955039"
                        discount_amount: "0.76395504"
                        tax_amount: "0.46410269"
                        total_amount: "7.33969804"
                        tiered_unit_price: false
                        period_range_start: "2018-12-30"
                        period_range_end: "2018-12-30"
                        product_id: 85
                        product_version: 1
                        component_id: 81
                        price_point_id: 165
                        billing_schedule_item_id: null
                        custom_item: false
                    discounts:
                      - uid: cndli_8k5jvdzct4h9y
                        title: Multi-service discount (10%)
                        code: MULTI3
                        source_type: Coupon
                        source_id: 40
                        discount_type: percentage
                        percentage: "10.0"
                        eligible_amount: "208.69341779"
                        discount_amount: "20.87125167"
                        line_item_breakouts:
                          - uid: cnli_8k5jvdzct4h9x
                            eligible_amount: "1.971004"
                            discount_amount: "0.19862831"
                          - uid: cnli_8kjttvjcjx8b4
                            eligible_amount: "114.21127834"
                            discount_amount: "11.42112783"
                          - uid: cnli_8kjttvjknzhx7
                            eligible_amount: "9.16746047"
                            discount_amount: "0.91674605"
                          - uid: cnli_8kjttvjnmh25w
                            eligible_amount: "72.57572871"
                            discount_amount: "7.25757287"
                          - uid: cnli_8kjttvjqn86kc
                            eligible_amount: "3.12839588"
                            discount_amount: "0.31322157"
                          - uid: cnli_8kjttvjtxxbdd
                            eligible_amount: "7.63955039"
                            discount_amount: "0.76395504"
                    taxes:
                      - uid: cntli_8k5jvdzct4h9z
                        title: NC Sales Tax
                        source_type: Tax
                        source_id: 1
                        percentage: "6.75"
                        taxable_amount: "187.82216613"
                        tax_amount: "12.67783387"
                        line_item_breakouts:
                          - uid: cnli_8k5jvdzct4h9x
                            taxable_amount: "1.77237569"
                            tax_amount: "0.11963536"
                          - uid: cnli_8kjttvjcjx8b4
                            taxable_amount: "102.7901505"
                            tax_amount: "6.93833516"
                          - uid: cnli_8kjttvjknzhx7
                            taxable_amount: "8.25071442"
                            tax_amount: "0.55692322"
                          - uid: cnli_8kjttvjnmh25w
                            taxable_amount: "65.31815584"
                            tax_amount: "4.40897552"
                          - uid: cnli_8kjttvjqn86kc
                            taxable_amount: "2.81517432"
                            tax_amount: "0.19002427"
                          - uid: cnli_8kjttvjtxxbdd
                            taxable_amount: "6.87559535"
                            tax_amount: "0.46410269"
                    applications:
                      - uid: cdt_8m9vbdbdwd28n
                        transaction_time: "2018-12-31T21:19:28Z"
                        invoice_uid: inv_8k5jvdzct4hb2
                        memo: Refund for overpayment
                        applied_amount: "200.5"
                    refunds:
                      - transaction_id: 329
                        payment_id: 39
                        memo: Refund for overpayment
                        original_amount: "524.9"
                        applied_amount: "200.5"
      operationId: readCreditNote
      description: Use this endpoint to retrieve the details for a credit note.
  "/subscriptions/{subscription_id}/payments.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Record Payment For Subscription
      tags:
        - Invoices
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Record-Payment-Response.yaml"
              examples:
                Example-1:
                  value:
                    paid_invoices:
                      - invoice_id: inv_bchyhr6z5grby
                        status: paid
                        due_amount: "0.0"
                        paid_amount: "50.0"
                      - invoice_id: inv_bchyhrgvyb6vm
                        status: paid
                        due_amount: "0.0"
                        paid_amount: "50.0"
                    prepayment: null
                Example-2:
                  value:
                    paid_invoices:
                      - invoice_id: inv_bchyhr6z5grby
                        status: open
                        due_amount: "10.0"
                        paid_amount: "50.0"
                    prepayment: null
                Example-3:
                  value:
                    paid_invoices:
                      - invoice_id: inv_bchyhr6z5grby
                        status: paid
                        due_amount: "0.0"
                        paid_amount: "50.0"
                      - invoice_id: inv_bchyhrgvyb6vm
                        status: paid
                        due_amount: "0.0"
                        paid_amount: "50.0"
                    prepayment:
                      subscription_id: 123456
                      amount_in_cents: 9500
                      ending_balance_in_cents: 9500
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Payment amount, details, method, and memo must be present"
                      - "Payment amount, details, method, and memo must valid"
                      - Payment amount must be greater than zero
                      - "If in a group, the Subscription must be the primary"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: recordPaymentForSubscription
      description: |-
        Record an external payment made against a subscription that will pay partially or in full one or more invoices.

        Payment will be applied starting with the oldest open invoice and then next oldest, and so on until the amount of the payment is fully consumed.

        Excess payment will result in the creation of a prepayment on the Invoice Account.

        Only ungrouped or primary subscriptions may be paid using the "bulk" payment request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Record-Payment-Request.yaml"
            examples:
              Example:
                value:
                  payment:
                    amount: "10.0"
                    memo: to pay the bills
                    payment_details: check number 8675309
                    payment_method: check
  "/invoices/{uid}/reopen.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    post:
      summary: Reopen Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: "null"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - The invoice must be in canceled status to be reopened.
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: reopenInvoice
      description: |-
        This endpoint allows you to reopen any invoice with the "canceled" status. Invoices enter "canceled" status if they were open at the time the subscription was canceled (whether through dunning or an intentional cancellation).

        Invoices with "canceled" status are no longer considered to be due. Once reopened, they are considered due for payment. Payment may then be captured in one of the following ways:

        - Reactivating the subscription, which will capture all open invoices (See note below about automatic reopening of invoices.)
        - Recording a payment directly against the invoice

        A note about reactivations: any canceled invoices from the most recent active period are automatically opened as a part of the reactivation process. Reactivating via this endpoint prior to reactivation is only necessary when you wish to capture older invoices from previous periods during the reactivation.

        ### Reopening Consolidated Invoices

        When reopening a consolidated invoice, all of its canceled segments will also be reopened.
  "/invoices/{uid}/void.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    post:
      summary: Void Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: "null"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Invoice status must be 'open', 'canceled', or 'pending' and non-consolidated to be voided."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: voidInvoice
      description: This endpoint allows you to void any invoice with the "open" or "canceled" status.  It will also allow voiding of an invoice with the "pending" status if it is not a consolidated invoice.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Void-Invoice-Request.yaml"
            examples:
              Example:
                value:
                  void:
                    reason: Duplicate invoice
  "/invoices/{invoice_uid}/segments.json":
    parameters:
      - schema:
          type: string
        name: invoice_uid
        in: path
        required: true
        description: The unique identifier of the consolidated invoice
    get:
      summary: List Segments for Consolidated Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Consolidated-Invoice.yaml"
              examples:
                Example:
                  value:
                    invoices:
                      - uid: inv_8htcd29wcq3q6
                        site_id: 51288
                        customer_id: 20153415
                        subscription_id: 23277588
                        number: "125"
                        sequence_number: 125
                        issue_date: "2018-09-20"
                        due_date: "2018-09-20"
                        paid_date: "2018-09-20"
                        status: paid
                        collection_method: automatic
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: parent
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: 23277588
                        product_name: Trial and setup fee
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 20153415
                          first_name: Meg
                          last_name: Example
                          organization: ""
                          email: meg@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Boston
                          state: MA
                          zip: "90210"
                          country: US
                        shipping_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Boston
                          state: MA
                          zip: "90210"
                          country: US
                        subtotal_amount: "100.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "100.0"
                        credit_amount: "0.0"
                        paid_amount: "100.0"
                        refund_amount: "0.0"
                        due_amount: "0.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8htcd29wcq3q6?token=fb6kpjz5rcr2vttyjs4rcv6y"
                      - uid: inv_8hr3546xp4h8n
                        site_id: 51288
                        customer_id: 21687686
                        subscription_id: 22007644
                        number: "124"
                        sequence_number: 124
                        issue_date: "2018-09-18"
                        due_date: "2018-09-18"
                        paid_date: null
                        status: open
                        collection_method: remittance
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: none
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: null
                        product_name: Trial and setup fee
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 21687686
                          first_name: Charlene
                          last_name: Tester
                          organization: ""
                          email: food@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: ""
                          line2: ""
                          city: ""
                          state: ""
                          zip: ""
                          country: ""
                        shipping_address:
                          street: ""
                          line2: ""
                          city: ""
                          state: ""
                          zip: ""
                          country: ""
                        subtotal_amount: "100.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "100.0"
                        credit_amount: "0.0"
                        paid_amount: "0.0"
                        refund_amount: "0.0"
                        due_amount: "100.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8hr3546xp4h8n?token=fb6kpjz5rcr2vttyjs4rcv6y"
                      - uid: inv_8hr3546wdwxkr
                        site_id: 51288
                        customer_id: 21687670
                        subscription_id: 22007627
                        number: "123"
                        sequence_number: 123
                        issue_date: "2018-09-18"
                        due_date: "2018-09-18"
                        paid_date: "2018-09-18"
                        status: paid
                        collection_method: automatic
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: none
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: null
                        product_name: Trial End - Free
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 21687670
                          first_name: Hello
                          last_name: World
                          organization: "123"
                          email: example@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: 123 Anywhere Street
                          line2: ""
                          city: Boston
                          state: MA
                          zip: "02120"
                          country: US
                        shipping_address:
                          street: ""
                          line2: ""
                          city: Boston
                          state: AL
                          zip: "02120"
                          country: US
                        subtotal_amount: "0.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "0.0"
                        credit_amount: "0.0"
                        paid_amount: "0.0"
                        refund_amount: "0.0"
                        due_amount: "0.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8hr3546wdwxkr?token=fb6kpjz5rcr2vttyjs4rcv6y"
                      - uid: inv_8hjtk8bz56bbp
                        site_id: 51288
                        customer_id: 20137757
                        subscription_id: 20541100
                        number: "122"
                        sequence_number: 122
                        issue_date: "2018-09-10"
                        due_date: "2018-09-10"
                        paid_date: "2018-09-10"
                        status: paid
                        collection_method: automatic
                        payment_instructions: "Make checks payable to Acme, Inc."
                        currency: USD
                        consolidation_level: none
                        parent_invoice_uid: null
                        parent_invoice_number: null
                        group_primary_subscription_id: null
                        product_name: $0 Product
                        product_family_name: Billing Plans
                        seller:
                          name: General Goods
                          address:
                            street: 123 General Goods Way
                            line2: Apt. 10
                            city: Boston
                            state: MA
                            zip: "02120"
                            country: US
                          phone: 555-555-1212
                        customer:
                          chargify_id: 20137757
                          first_name: Sasha
                          last_name: Example
                          organization: ""
                          email: example@example.com
                        memo: Please pay within 15 days.
                        billing_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Catville
                          state: MA
                          zip: "90210"
                          country: US
                        shipping_address:
                          street: 123 I Love Cats Way
                          line2: ""
                          city: Catville
                          state: AL
                          zip: "90210"
                          country: US
                        subtotal_amount: "0.0"
                        discount_amount: "0.0"
                        tax_amount: "0.0"
                        total_amount: "0.0"
                        credit_amount: "0.0"
                        paid_amount: "0.0"
                        refund_amount: "0.0"
                        due_amount: "0.0"
                        public_url: "https://www.chargifypay.com/invoice/inv_8jzrw74xq8kxr?token=fb6kpjz5rcr2vttyjs4rcv6y"
      operationId: listConsolidatedInvoiceSegments
      description: "Invoice segments returned on the index will only include totals, not detailed breakdowns for `line_items`, `discounts`, `taxes`, `credits`, `payments`, or `custom_fields`."
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          in: query
          name: direction
          description: Sort direction of the returned segments.
  "/subscriptions/{subscription_id}/account_balances.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    get:
      summary: Read Account Balances
      tags:
        - Subscription Invoice Account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Account-Balances.yaml"
      operationId: readAccountBalances
      description: "Returns the `balance_in_cents` of the Subscription's Pending Discount, Service Credit, and Prepayment accounts, as well as the sum of the Subscription's open, payable invoices."
  "/subscriptions/{subscription_id}/components/{component_id}.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: "The Chargify id of the component. Alternatively, the component's handle prefixed by `handle:`"
    get:
      summary: Read Subscription Component
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Component-Response.yaml"
              examples:
                Example:
                  value:
                    component:
                      component_id: 193028
                      subscription_id: 14593192
                      allocated_quantity: 1
                      pricing_scheme: per_unit
                      name: Users
                      kind: quantity_based_component
                      unit_name: Users
                      price_point_id: 1
                      price_point_handle: top-tier
                      enabled: true
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: readSubscriptionComponent
      description: This request will list information regarding a specific component owned by a subscription.
  "/subscriptions/{subscription_id}/components.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    get:
      summary: List Subscription Components
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Subscription-Component-Response.yaml"
              examples:
                example-1:
                  value:
                    - component:
                        component_id: 0
                        subscription_id: 0
                        allocated_quantity: 0
                        pricing_scheme: per_unit
                        name: string
                        kind: quantity_based_component
                        unit_name: string
                        price_point_id: 0
                        price_point_handle: string
                        price_point_type: default
                        price_point_name: string
                        enabled: true
                        unit_balance: 0
                        id: 0
                        created_at: "2022-02-22T14:07:00-05:00"
                        updated_at: "2022-02-22T14:07:00-05:00"
                        component_handle: string
                        archived_at: null
      operationId: listSubscriptionComponents
      description: |-
        This request will list a subscription's applied components.

        ## Archived Components

        When requesting to list components for a given subscription, if the subscription contains **archived** components they will be listed in the server response.
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            $ref: "../components/schemas/Subscription-List-Date-Field.yaml"
          in: query
          name: date_field
          description: "The type of filter you'd like to apply to your search.
            Use in query `date_field=updated_at`."
        - $ref: "../components/parameters/sort-direction.yaml"
        - schema:
            type: string
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date."
          name: end_datetime
        - schema:
            $ref: "../components/schemas/Include-Not-Null.yaml"
          in: query
          name: price_point_ids
          description:
            "Allows fetching components allocation only if price point id is present.
            Use in query `price_point_ids=not_null`."
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
          style: form
          explode: false
          in: query
          description:
            "Allows fetching components allocation with matching product family id based on provided ids.
            Use in query `product_family_ids=1,2,3`."
          name: product_family_ids
        - schema:
            $ref: "../components/schemas/List-Subscription-Components-Sort.yaml"
          in: query
          name: sort
          description: "The attribute by which to sort.
            Use in query `sort=updated_at`."
        - schema:
            type: string
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            $ref: "../components/schemas/List-Subscription-Components-Include.yaml"
          in: query
          description: "Allows including additional data in the response.
            Use in query `include=subscription`."
          name: include
        - schema:
            type: boolean
            example: true
          in: query
          description:
            "Allows fetching components allocation with matching use_site_exchange_rate based on provided value.
            Use in query `filter[use_site_exchange_rate]=true`."
          name: "filter[use_site_exchange_rate]"
        - schema:
            type: array
            items:
              type: string
            example:
              - EUR
              - USD
          style: form
          explode: false
          in: query
          description:
            "Allows fetching components allocation with matching currency based on provided values.
            Use in query `filter[currencies]=EUR,USD`."
          name: "filter[currencies]"
  "/subscriptions/{subscription_id}/price_points.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Bulk Update Subscription Components' Price Points
      tags:
        - Subscription Components
      operationId: bulkUpdateSubscriptionComponentsPricePoints
      description: |-
        Updates the price points on one or more of a subscription's components.

        The `price_point` key can take either a:
        1. Price point id (integer)
        2. Price point handle (string)
        3. `"_default"` string, which will reset the price point to the component's current default price point.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Bulk-Components-Price-Point-Assignment.yaml"
            examples:
              Example:
                value:
                  components:
                    - component_id: 997
                      price_point: 1022
                    - component_id: 998
                      price_point: wholesale-handle
                    - component_id: 999
                      price_point: _default
        description: ""
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Bulk-Components-Price-Point-Assignment.yaml"
              examples:
                Example:
                  value:
                    components:
                      - component_id: 123
                        price_point: 456
                      - component_id: 789
                        price_point: 987
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Component-PricePoint-Error.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - component_id: 6474
                        price_point: 12140
                        message: Price Point does not belong to Component
  "/subscriptions/{subscription_id}/price_points/reset.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Bulk Reset Subscription Components' Price Points
      tags:
        - Subscription Components
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 80293620
                      state: active
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: 2023-11-23T10:28:34-05:00
                      created_at: 2023-11-23T10:28:34-05:00
                      updated_at: 2023-11-23T10:28:34-05:00
                      expires_at: null
                      balance_in_cents: 50504234
                      current_period_ends_at: 2023-11-23T10:28:34-05:00
                      next_assessment_at: 2023-11-23T10:28:34-05:00
                      canceled_at: null
                      cancellation_message: lorem ipsum
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: remittance
                      snap_day: null
                      cancellation_method: dunning
                      current_period_started_at: 2023-11-23T10:28:34-05:00
                      previous_state: active
                      signup_payment_id: -45156092
                      signup_revenue: do aliquip ea
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: -49740952
                      product_price_in_cents: 87617888
                      product_version_number: 13656635
                      payment_type: null
                      referral_code: null
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      reason_code: null
                      automatically_resume_at: null
                      current_billing_amount_in_cents: -26151968
                      customer:
                        id: 15208337
                        first_name: ipsum culpa in labore eiusmod
                        last_name: esse
                        organization: null
                        email: ex eiusmod
                        created_at: "2021-05-05T16:00:21-04:00"
                        updated_at: "2021-05-05T16:00:21-04:00"
                        reference: laboris ea cupidatat
                        address: null
                        address_2: null
                        city: id eiusmod proident
                        state: magna eiusmod anim non
                        zip: null
                        country: null
                        phone: null
                        portal_invite_last_sent_at: null
                        portal_invite_last_accepted_at: "2021-05-05T20:00:21-04:00"
                        portal_customer_created_at: "2021-05-05T16:00:21-04:00"
                        cc_emails: eiusmod sunt
                        tax_exempt: true
                      product:
                        id: -74447756
                        name: eu mollit nulla ut aute
                        handle: esse dolor anim
                        description: Lorem ut et non
                        accounting_code: nisi
                        request_credit_card: false
                        expiration_interval: 1
                        expiration_interval_unit: day
                        created_at: 2022-11-23T10:28:34-05:00
                        updated_at: 2022-11-23T10:28:34-05:00
                        price_in_cents: -4151649
                        interval: 20680876
                        interval_unit: day
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: day
                        archived_at: null
                        require_credit_card: true
                        return_params: magna eu
                        taxable: true
                        update_return_url: exercitation in
                        tax_code: Excepteur aliqua sunt in
                        initial_charge_after_trial: true
                        version_number: 41642597
                        update_return_params: dolore labore
                        product_family:
                          id: -5356997
                          name: officia amet Lorem proident enim
                          description: Duis
                          handle: ea dolore dolore sunt
                          accounting_code: null
                        public_signup_pages: []
      operationId: bulkResetSubscriptionComponentsPricePoints
      description: |-
        Resets all of a subscription's components to use the current default.

        **Note**: this will update the price point for all of the subscription's components, even ones that have not been allocated yet.
  "/subscriptions/{subscription_id}/components/{component_id}/allocations.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component
    post:
      summary: Allocate Component
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Allocation-Response.yaml"
              examples:
                Example:
                  value:
                    allocation:
                      component_id: 4034995
                      subscription_id: 23737320
                      quantity: 3
                      previous_quantity: 2
                      memo: dolore cupidatat elit
                      timestamp: 2022-11-23T10:28:34-05:00
                      proration_upgrade_scheme: laboris ipsum dolore
                      proration_downgrade_scheme: eiusmod dolore
                      price_point_id: -69720370
                      previous_price_point_id: -76493052
                      accrue_charge: true
                      upgrade_charge: full
                      downgrade_credit: full
                      payment:
                        id: -44566528
                        amount_in_cents: 123
                        success: false
                        memo: aliqua
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "One or more allocation changes are required."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: allocateComponent
      description: "This endpoint creates a new allocation, setting the current allocated quantity for the Component and recording a memo.\n\n**Notice**: Allocations can only be updated for Quantity, On/Off, and Prepaid Components.\n\n## Allocations Documentation\n\nFull documentation on how to record Allocations in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997). It is focused on how allocations operate within the Chargify UI.It goes into greater detail on how the user interface will react when recording allocations.\n\nThis documentation also goes into greater detail on how proration is taken into consideration when applying component allocations.\n\n## Proration Schemes\n\nChanging the allocated quantity of a component mid-period can result in either a Charge or Credit being applied to the subscription. When creating an allocation via the API, you can pass the `upgrade_charge`, `downgrade_credit`, and `accrue_charge` to be applied.\n\n**Notice:** These proration and accural fields will be ignored for Prepaid Components since this component type always generate charges immediately without proration.\n\nFor background information on prorated components and upgrade/downgrade schemes, see [Setting Component Allocations.](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#proration-upgrades-vs-downgrades).\nSee the tables below for valid values.\n\n| upgrade_charge | Definition \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_|\n|----------------|-------------------------------------------------------------------|\n| `full` \_ \_ \_ \_ |\_A charge is added for the full price of the component. \_\_\_ \_ \_ \_ \_|\n| `prorated` \_ \_ |\_A charge is added for the prorated price of the component change. |\n| `none` \_ \_ \_ \_ |\_No charge is added. \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ |\n\n| downgrade_credit | Definition \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_|\n|------------------|---------------------------------------------------|\n| `full` \_ \_ \_ \_ \_ |\_A full price credit is added for the amount owed. |\n| `prorated` \_ \_ \_ |\_A prorated credit is added for the amount owed. \_ |\n| `none` \_ \_ \_ \_ \_ |\_No charge is added. \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ |\n\n| accrue_charge | Definition \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_   |\n|---------------|------------------------------------------------------------------------------------------------------------|\n| `true` \_ \_ \_ \_| Attempt to charge the customer at next renewal.                                                            |\n| `false` \_ \_ \_ |\_Attempt to charge the customer right away.\_If it fails, the charge will be accrued until the next renewal. |\n\n### Order of Resolution for upgrade_charge and downgrade_credit\n\n1. Per allocation in API call (within a single allocation of the `allocations` array)\n2. [Component-level default value](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997-Component-Allocations#component-allocations-0-0)\n3. Allocation API call top level (outside of the `allocations` array)\n4. [Site-level default value](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#proration-schemes)\n\n### Order of Resolution for accrue charge\n\n1. Allocation API call top level (outside of the `allocations` array)\n2. [Site-level default value](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#proration-schemes)\n\n**NOTE: Proration uses the current price of the component as well as the current tax rates. Changes to either may cause the prorated charge/credit to be wrong.**"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Allocation-Request.yaml"
            examples:
              Quantity Based:
                value:
                  allocation:
                    quantity: 5
                    memo: Recoding component purchase of Acme Support
              On/Off Component (Toggle On):
                value:
                  allocation:
                    quantity: 1
                    memo: Recoding component purchase of Acme Support
              On/Off Component (Toggle Off):
                value:
                  allocation:
                    quantity: 0
                    memo: Recoding component purchase of Acme Support
    get:
      summary: List Allocations
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Allocation-Response.yaml"
              examples:
                Example:
                  value:
                    - allocation:
                        allocation_id: 2370199
                        component_id: 41028
                        subscription_id: 352827
                        quantity: 10
                        previous_quantity: 0
                        memo: "Recoding component allocation"
                        timestamp: "2024-02-28T09:31:05Z"
                        proration_upgrade_scheme: "full-price-attempt-capture"
                        proration_downgrade_scheme: "no-prorate"
                        price_point_id: 2957424
                        price_point_handle: "uuid:03190e20-b84a-013c-ca77-0286551bb34f"
                        price_point_name: "Original"
                        previous_price_point_id: 2957424
                        component_handle: "test-prepaid-component-4982065948"
                        accrue_charge: false
                        upgrade_charge: "full"
                        downgrade_credit: "none"
                        created_at: "2024-02-28T04:31:05-05:00"
                        initiate_dunning: false
                        expires_at: "2024-08-03T20:00:00-04:00"
                        used_quantity: 5
                        charge_id: 11586076
                    - allocation:
                        memo: null
                        timestamp: "2012-11-20T21:48:09Z"
                        quantity: 3
                        previous_quantity: 0
                        component_id: 11960
                        subscription_id: 2585595
                        proration_upgrade_scheme: no-prorate
                        proration_downgrade_scheme: no-prorate
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "invalid page: 0"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: listAllocations
      description: |-
        This endpoint returns the 50 most recent Allocations, ordered by most recent first.

        ## On/Off Components

        When a subscription's on/off component has been toggled to on (`1`) or off (`0`), usage will be logged in this response.

        ## Querying data via Chargify gem

        You can also query the current quantity via the [official Chargify Gem.](http://github.com/chargify/chargify_api_ares)

        ```# First way
        component = Chargify::Subscription::Component.find(1, :params => {:subscription_id => 7})
        puts component.allocated_quantity
        # => 23

        # Second way
        component = Chargify::Subscription.find(7).component(1)
        puts component.allocated_quantity
        # => 23
        ```
      parameters:
        - $ref: "../components/parameters/page.yaml"
  "/subscriptions/{subscription_id}/allocations.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Allocate Components
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Allocation-Response.yaml"
              examples:
                Example:
                  value:
                    - allocation:
                        component_id: 193159
                        subscription_id: 15540611
                        quantity: 10
                        previous_quantity: 0
                        memo: foo
                        timestamp: "2016-12-08T19:09:15Z"
                        proration_upgrade_scheme: prorate-attempt-capture
                        proration_downgrade_scheme: no-prorate
                        payment:
                          amount_in_cents: 1451
                          success: true
                          memo: "Payment for: Prorated component allocation changes."
                          id: 165473487
                    - allocation:
                        component_id: 277221
                        subscription_id: 15540611
                        quantity: 5
                        previous_quantity: 0
                        memo: bar
                        timestamp: "2016-12-08T19:09:15Z"
                        proration_upgrade_scheme: prorate-attempt-capture
                        proration_downgrade_scheme: no-prorate
                        payment:
                          amount_in_cents: 1451
                          success: true
                          memo: "Payment for: Prorated component allocation changes."
                          id: 165473487
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Quantity: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: allocateComponents
      description: |-
        Creates multiple allocations, setting the current allocated quantity for each of the components and recording a memo. The charges and/or credits that are created will be rolled up into a single total which is used to determine whether this is an upgrade or a downgrade. Be aware of the Order of Resolutions explained below in determining the proration scheme.

        A `component_id` is required for each allocation.

        This endpoint only responds to JSON. It is not available for XML.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Allocate-Components.yaml"
            examples:
              Example:
                value:
                  proration_upgrade_scheme: prorate-attempt-capture
                  proration_downgrade_scheme: no-prorate
                  allocations:
                    - component_id: 123
                      quantity: 10
                      memo: foo
                    - component_id: 456
                      quantity: 5
                      memo: bar
  "/subscriptions/{subscription_id}/allocations/preview.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Preview Allocations
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Allocation-Preview-Response.yaml"
              examples:
                Example:
                  value:
                    allocation_preview:
                      start_date: "2019-05-02T15:26:46Z"
                      end_date: "2019-05-08T15:26:46Z"
                      period_type: prorated
                      total_in_cents: 150
                      total_discount_in_cents: 0
                      total_tax_in_cents: 0
                      subtotal_in_cents: 150
                      existing_balance_in_cents: 0
                      accrue_charge: true
                      line_items:
                        - direction: upgrade
                          transaction_type: charge
                          kind: quantity_based_component
                          amount_in_cents: 100
                          taxable_amount_in_cents: 0
                          discount_amount_in_cents: 0
                          memo: "Foo: 0 to 10 foo"
                          component_id: 123
                          component_handle: foo
                        - direction: downgrade
                          transaction_type: credit
                          kind: quantity_based_component
                          amount_in_cents: -20
                          taxable_amount_in_cents: 0
                          discount_amount_in_cents: 0
                          memo: "Foo: 10 to 5 bar"
                          component_id: 456
                          component_handle: bar
                        - direction: upgrade
                          transaction_type: credit
                          kind: quantity_based_component
                          amount_in_cents: 70
                          taxable_amount_in_cents: 0
                          discount_amount_in_cents: 0
                          memo: "Foo: 0 to 10 baz"
                          component_id: 789
                          component_handle: baz
                      allocations:
                        - accrue_charge: true
                          upgrade_charge: prorated
                          downgrade_credit: full
                          component_handle: foo
                          component_id: 123
                          memo: foo
                          previous_price_point_id: 123
                          previous_quantity: 0
                          price_point_id: 123
                          proration_downgrade_scheme: full
                          proration_upgrade_scheme: prorate-delay-capture
                          quantity: 10
                          subscription_id: 123456
                          timestamp: null
                        - accrue_charge: true
                          upgrade_charge: full
                          downgrade_credit: prorated
                          component_handle: bar
                          component_id: 456
                          memo: foo
                          previous_price_point_id: 456
                          previous_quantity: 10
                          price_point_id: 456
                          proration_downgrade_scheme: prorate
                          proration_upgrade_scheme: full-price-delay-capture
                          quantity: 5
                          subscription_id: 123456
                          timestamp: null
                        - accrue_charge: true
                          upgrade_charge: full
                          downgrade_credit: none
                          component_handle: baz
                          component_id: 789
                          memo: foo
                          previous_price_point_id: 789
                          previous_quantity: 0
                          price_point_id: 789
                          proration_downgrade_scheme: no-prorate
                          proration_upgrade_scheme: full-price-delay-capture
                          quantity: 10
                          subscription_id: 123456
                          timestamp: null
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Component-Allocation-Error.yaml"
                type: object
              examples:
                Example:
                  value:
                    errors:
                      - kind: allocation
                        component_id: 379512
                        "on": base
                        message: Allocations can only be updated for quantity and on/off components.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: previewAllocations
      description: |-
        Chargify offers the ability to preview a potential subscription's **quantity-based** or **on/off** component allocation in the middle of the current billing period.  This is useful if you want users to be able to see the effect of a component operation before actually doing it.

        ## Fine-grained Component Control: Use with multiple `upgrade_charge`s or `downgrade_credits`

        When the allocation uses multiple different types of `upgrade_charge`s or `downgrade_credit`s, the Allocation is viewed as an Allocation which uses "Fine-Grained Component Control". As a result, the response will not include `direction` and `proration` within the `allocation_preview`, but at the `line_items` and `allocations` level respectfully.

        See example below for Fine-Grained Component Control response.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Preview-Allocations-Request.yaml"
            examples:
              Example:
                value:
                  allocations:
                    - proration_upgrade_scheme: prorate-attempt-capture
                      proration_downgrade_scheme: prorate
                      component_id: 554108
                      price_point_id: 325826
                      quantity: 10
                      memo: NOW
                  effective_proration_date: "2023-11-01"
  "/subscriptions/{subscription_id}/components/{component_id}/allocations/{allocation_id}.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component
      - schema:
          type: integer
        name: allocation_id
        in: path
        required: true
        description: The Chargify id of the allocation
    put:
      summary: Update Prepaid Usage Allocation Expiration Date
      tags:
        - Subscription Components
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Subscription-Component-Allocation-Error.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      - kind: base
                        message: "A valid expires_at date must be provided."
                Example-2:
                  value:
                    errors:
                      - kind: base
                        message: "Expires at: must be greater than or equal to 2024-02-28"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updatePrepaidUsageAllocationExpirationDate
      description: |-
        When the expiration interval options are selected on a prepaid usage component price point, all allocations will be created with an expiration date. This expiration date can be changed after the fact to allow for extending or shortening the allocation's active window.

        In order to change a prepaid usage allocation's expiration date, a PUT call must be made to the allocation's endpoint with a new expiration date.

        ## Limitations

        A few limitations exist when changing an allocation's expiration date:

        - An expiration date can only be changed for an allocation that belongs to a price point with expiration interval options explicitly set.
        - An expiration date can be changed towards the future with no limitations.
        - An expiration date can be changed towards the past (essentially expiring it) up to the subscription's current period beginning date.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Allocation-Expiration-Date.yaml"
            examples:
              Example:
                value:
                  allocation:
                    expires_at: "2021-05-05T16:00:00"
    delete:
      summary: Delete Prepaid Usage Allocation
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Subscription-Component-Allocation-Error.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - kind: base
                        message: "Credit scheme must be one of credit, refund or none."
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: deletePrepaidUsageAllocation
      description: |-
        Prepaid Usage components are unique in that their allocations are always additive. In order to reduce a subscription's allocated quantity for a prepaid usage component each allocation must be destroyed individually via this endpoint.

        ## Credit Scheme

        By default, destroying an allocation will generate a service credit on the subscription. This behavior can be modified with the optional `credit_scheme` parameter on this endpoint. The accepted values are:

        1. `none`: The allocation will be destroyed and the balances will be updated but no service credit or refund will be created.
        2. `credit`: The allocation will be destroyed and the balances will be updated and a service credit will be generated. This is also the default behavior if the `credit_scheme` param is not passed.
        3. `refund`: The allocation will be destroyed and the balances will be updated and a refund will be issued along with a Credit Note.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Credit-Scheme-Request.yaml"
            examples:
              Example:
                value:
                  credit_scheme: none
  "/subscriptions/{subscription_id}/components/{component_id}/usages.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - schema:
          oneOf:
            - type: integer
            - type: string
        name: component_id
        in: path
        required: true
        description: "Either the Chargify id for the component or the component's handle prefixed by `handle:`"
    post:
      summary: Create Usage
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Usage-Response.yaml"
              examples:
                Example:
                  value:
                    usage:
                      id: 138522957
                      memo: My memo
                      created_at: "2017-11-13T10:05:32-06:00"
                      price_point_id: 149416
                      quantity: 1000
                      component_id: 500093
                      component_handle: handle
                      subscription_id: 22824464
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Price point: could not be found."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createUsage
      description: |-
        ## Documentation

        Full documentation on how to create Components in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677#creating-components). Additionally, for information on how to record component usage against a subscription, please see the following resources:

        + [Recording Metered Component Usage](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#reporting-metered-component-usage)
        + [Reporting Prepaid Component Status](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#reporting-prepaid-component-status)

        You may choose to report metered or prepaid usage to Chargify as often as you wish. You may report usage as it happens. You may also report usage periodically, such as each night or once per billing period. If usage events occur in your system very frequently (on the order of thousands of times an hour), it is best to accumulate usage into batches on your side, and then report those batches less frequently, such as daily. This will ensure you remain below any API throttling limits. If your use case requires higher rates of usage reporting, we recommend utilizing Events Based Components.

        ## Create Usage for Subscription

        This endpoint allows you to record an instance of metered or prepaid usage for a subscription. The `quantity` from usage for each component is accumulated to the `unit_balance` on the [Component Line Item](./b3A6MTQxMDgzNzQ-read-subscription-component) for the subscription.

        ## Price Point ID usage

        If you are using price points, for metered and prepaid usage components, Chargify gives you the option to specify a price point in your request.

        You do not need to specify a price point ID. If a price point is not included, the default price point for the component will be used when the usage is recorded.

        If an invalid `price_point_id` is submitted, the endpoint will return an error.

        ## Deducting Usage

        In the event that you need to reverse a previous usage report or otherwise deduct from the current usage balance, you may provide a negative quantity.

        Example:

        Previously recorded:

        ```json
        {
          "usage": {
            "quantity": 5000,
            "memo": "Recording 5000 units"
          }
        }
        ```

        At this point, `unit_balance` would be `5000`. To reduce the balance to `0`, POST the following payload:

        ```json
        {
          "usage": {
            "quantity": -5000,
            "memo": "Deducting 5000 units"
          }
        }
        ```

        The `unit_balance` has a floor of `0`; negative unit balances are never allowed. For example, if the usage balance is 100 and you deduct 200 units, the unit balance would then be `0`, not `-100`.

        ## FAQ

        Q. Is it possible to record metered usage for more than one component at a time?

        A. No. Usage should be reported as one API call per component on a single subscription. For example, to record that a subscriber has sent both an SMS Message and an Email, send an API call for each.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Usage-Request.yaml"
            examples:
              Example:
                value:
                  usage:
                    quantity: 1000
                    price_point_id: "149416"
                    memo: My memo
    get:
      summary: List Usages
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Usage-Response.yaml"
              examples:
                Example:
                  value:
                    - usage:
                        id: 178534642
                        memo: "20"
                        created_at: "2018-08-03T11:58:42-05:00"
                        price_point_id: 242632
                        quantity: "20.0"
                        component_id: 500093
                        component_handle: handle
                        subscription_id: 22824464
                    - usage:
                        id: 178534591
                        memo: "10"
                        created_at: "2018-08-03T11:58:29-05:00"
                        price_point_id: 242632
                        quantity: "10.0"
                        component_id: 500093
                        component_handle: handle
                        subscription_id: 22824464
      operationId: listUsages
      description: |-
        This request will return a list of the usages associated with a subscription for a particular metered component. This will display the previously recorded components for a subscription.

        This endpoint is not compatible with quantity-based components.

        ## Since Date and Until Date Usage

        Note: The `since_date` and `until_date` attributes each default to midnight on the date specified. For example, in order to list usages for January 20th, you would need to append the following to the URL.

        ```
        ?since_date=2016-01-20&until_date=2016-01-21
        ```

        ## Read Usage by Handle

        Use this endpoint to read the previously recorded components for a subscription.  You can now specify either the component id (integer) or the component handle prefixed by "handle:" to specify the unique identifier for the component you are working with.
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            type: integer
          in: query
          name: since_id
          description: Returns usages with an id greater than or equal to the one specified
        - schema:
            type: integer
          in: query
          name: max_id
          description: Returns usages with an id less than or equal to the one specified
        - schema:
            type: string
            format: date
          in: query
          name: since_date
          description: "Returns usages with a created_at date greater than or equal to midnight (12:00 AM) on the date specified."
        - schema:
            type: string
            format: date
          in: query
          name: until_date
          description: "Returns usages with a created_at date less than or equal to midnight (12:00 AM) on the date specified."
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
  "/event_based_billing/subscriptions/{subscription_id}/components/{component_id}/activate.json":
    parameters:
      - schema:
          type: integer
        name: subscription_id
        in: path
        required: true
        description: The Chargify id of the subscription
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component
    post:
      summary: Activate Event-Based Component
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
      operationId: activateEventBasedComponent
      description: |-
        In order to bill your subscribers on your Events data under the Events-Based Billing feature, the components must be activated for the subscriber.

        Learn more about the role of activation in the [Events-Based Billing docs](https://chargify.zendesk.com/hc/en-us/articles/4407720810907#activating-components-for-subscribers).

        Use this endpoint to activate an event-based component for a single subscription. Activating an event-based component causes Chargify to bill for events when the subscription is renewed.

        *Note: it is possible to stream events for a subscription at any time, regardless of component activation status. The activation status only determines if the subscription should be billed for event-based component usage at renewal.*
  "/event_based_billing/subscriptions/{subscription_id}/components/{component_id}/deactivate.json":
    parameters:
      - schema:
          type: integer
        name: subscription_id
        in: path
        required: true
        description: The Chargify id of the subscription
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component
    post:
      summary: Deactivate Event-Based Component
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
      operationId: deactivateEventBasedComponent
      description: Use this endpoint to deactivate an event-based component for a single subscription. Deactivating the event-based component causes Chargify to ignore related events at subscription renewal.
  /subscriptions.json:
    post:
      summary: Create Subscription
      tags:
        - Subscriptions
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 15236915
                      state: active
                      balance_in_cents: 0
                      total_revenue_in_cents: 14000
                      product_price_in_cents: 1000
                      product_version_number: 7
                      current_period_ends_at: "2016-11-15T14:48:10-05:00"
                      next_assessment_at: "2016-11-15T14:48:10-05:00"
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2016-11-14T14:48:12-05:00"
                      expires_at: null
                      created_at: "2016-11-14T14:48:10-05:00"
                      updated_at: "2016-11-14T15:24:41-05:00"
                      cancellation_message: null
                      cancellation_method: merchant_api
                      cancel_at_end_of_period: null
                      canceled_at: null
                      current_period_started_at: "2016-11-14T14:48:10-05:00"
                      previous_state: active
                      signup_payment_id: 162269766
                      signup_revenue: "260.00"
                      delayed_cancel_at: null
                      coupon_code: 5SNN6HFK3GBH
                      payment_collection_method: automatic
                      snap_day: null
                      reason_code: null
                      receives_invoice_emails: false
                      customer:
                        first_name: Curtis
                        last_name: Test
                        email: curtis@example.com
                        cc_emails: jeff@example.com
                        organization: ""
                        reference: null
                        id: 14714298
                        created_at: "2016-11-14T14:48:10-05:00"
                        updated_at: "2016-11-14T14:48:13-05:00"
                        address: 123 Anywhere Street
                        address_2: ""
                        city: Boulder
                        state: CO
                        zip: "80302"
                        country: US
                        phone: ""
                        verified: false
                        portal_customer_created_at: "2016-11-14T14:48:13-05:00"
                        portal_invite_last_sent_at: "2016-11-14T14:48:13-05:00"
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                        vat_number: "012345678"
                      product:
                        id: 3792003
                        name: $10 Basic Plan
                        handle: basic
                        description: lorem ipsum
                        accounting_code: basic
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: day
                        initial_charge_in_cents: null
                        expiration_interval: null
                        expiration_interval_unit: never
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        initial_charge_after_trial: false
                        return_params: ""
                        request_credit_card: false
                        require_credit_card: false
                        created_at: "2016-03-24T13:38:39-04:00"
                        updated_at: "2016-11-03T13:03:05-04:00"
                        archived_at: null
                        update_return_url: ""
                        update_return_params: ""
                        product_family:
                          id: 527890
                          name: Acme Projects
                          handle: billing-plans
                          accounting_code: null
                          description: ""
                        public_signup_pages:
                          - id: 281054
                            url: "https://general-goods.chargify.com/subscribe/kqvmfrbgd89q/basic"
                          - id: 281240
                            url: "https://general-goods.chargify.com/subscribe/dkffht5dxfd8/basic"
                          - id: 282694
                            url: "https://general-goods.chargify.com/subscribe/jwffwgdd95s8/basic"
                        taxable: false
                        version_number: 7
                        product_price_point_name: Default
                      credit_card:
                        id: 10191713
                        payment_type: credit_card
                        first_name: Curtis
                        last_name: Test
                        masked_card_number: XXXX-XXXX-XXXX-1
                        card_type: bogus
                        expiration_month: 1
                        expiration_year: 2026
                        billing_address: 123 Anywhere Street
                        billing_address_2: ""
                        billing_city: Boulder
                        billing_state: null
                        billing_country: ""
                        billing_zip: "80302"
                        current_vault: bogus
                        vault_token: "1"
                        customer_vault_token: null
                        customer_id: 14714298
                      payment_type: credit_card
                      referral_code: w7kjc9
                      next_product_id: null
                      coupon_use_count: 1
                      coupon_uses_allowed: 1
                      next_product_handle: null
                      stored_credential_transaction_id: 125566112256688
                      dunning_communication_delay_enabled: true
                      dunning_communication_delay_time_zone: Eastern Time (US & Canada)
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Bank routing number: cannot be blank."
                      - "Bank account number: cannot be blank."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createSubscription
      description: |-
        Full documentation on how subscriptions operate within Chargify can be located under the following topics:

        + [Subscriptions Reference](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405577172749-Subscription-Introduction)
        + [Subscriptions Actions](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405510556557-Actions)
        + [Subscription Cancellation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405510556557-Actions#initiate-cancellation)
        + [Subscription Reactivation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404559291021-Reactivating-and-Resuming)
        + [Subscription Import](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404863655821-Imports)

        When creating a subscription, you must specify a product and a customer. Credit card details may be required, depending on the options for the Product being subscribed ([see Product Options](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405246782221#payment-method-settings)).

        The product may be specified by `product_id` or by `product_handle` (API Handle). In similar fashion, to pass a particular product price point, you may either use `product_price_point_handle` or `product_price_point_id`.

        An existing customer may be specified by a `customer_id` (ID within Chargify) or a `customer_reference` (unique value within your app that you have shared with Chargify via the reference attribute on a customer). You may also pass in an existing payment profile for that customer with `payment_profile_id`. A new customer may be created by providing `customer_attributes`.

        Credit card details may be required, depending on the options for the product being subscribed. The product can be specified by `product_id` or by `product_handle` (API Handle).

        If you are creating a subscription with a payment profile, the attribute to send will be `credit_card_attributes` or `bank_account_attributes` for ACH and Direct Debit. That said, when you read the subscription after creation, we return the profile details under `credit_card` or `bank_account`.

        ## Taxable Subscriptions

        If your intent is to charge your subscribers tax via [Avalara Taxes](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405275711885-Avalara-VAT-Tax) or [Custom Taxes](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405069041549-Custom-Taxes), there are a few considerations to be made regarding collecting subscription data.
        For subscribers to be eligible to be taxed, the following information for the `customer` object or `payment_profile` object must by supplied:

        + A subscription to a [taxable product](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405246782221-Product-Editing#tax-settings)
        + [Full valid billing or shipping address](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405356114317#full-address-required-for-taxable-subscriptions) to identify the tax locale
        + The portion of the address that houses the [state information](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405356114317#required-state-format-for-taxable-subscriptions) of either adddress must adhere to the ISO standard of a 2-3 character limit/format.
        + The portion of the address that houses the [country information](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405356114317#required-country-format-for-taxable-subscriptions) must adhere to the ISO standard of a 2 character limit/format.

        ## Subscription Request Examples

        The subscription examples below will be split into two sections.

        The first section, "Subscription Customization", will focus on passing different information with a subscription, such as components, calendar billing, and custom fields. These examples will presume you are using a secure `chargify_token` generated by Chargify.js.

        The second section, "Passing Payment Information", will focus on passing payment information into Chargify. Please be aware that <b>collecting and sending Chargify raw card details requires PCI compliance on your end</b>; these examples are provided as guidance. If your business is not PCI compliant, we recommend using Chargify.js to collect credit cards or bank accounts.

        # Subscription Customization

        ## With Components

        Different components require slightly different data. For example, quantity-based and on/off components accept `allocated_quantity`, while metered components accept `unit_balance`.

        When creating a subscription with a component, a `price_point_id` can be passed in along with the `component_id` to specify which price point to use. If not passed in, the default price point will be used.

        Note: if an invalid `price_point_id` is used, the subscription will still proceed but will use the component's default price point.

        Components and their price points may be added by ID or by handle. See the example request body labeled "Components By Handle (Quantity-Based)"; the format will be the same for other component types.

        ## With Coupon(s)

        Pass an array of `coupon_codes`. See the example request body "With Coupon".

        ## With Manual Invoice Collection

        The `invoice` collection method works only on legacy Statement Architecture.

        On Relationship Invoicing Architecture use the `remittance` collection method.

        ## Prepaid Subscription

        A prepaid subscription can be created with the usual subscription creation parameters, specifying `prepaid` as the `payment_collection_method` and including a nested `prepaid_configuration`.

        After a prepaid subscription has been created, additional funds can be manually added to the prepayment account through the [Create Prepayment Endpoint](https://developers.chargify.com/docs/api-docs/7ec482de77ba7-create-prepayment).

        Prepaid subscriptions do not work on legacy Statement Architecture.

        ## With Metafields

        Metafields can either attach to subscriptions or customers. Metafields are popuplated with the supplied metadata to the resource specified.

        If the metafield doesn't exist yet, it will be created on-the-fly.

        ## With Custom Pricing

        Custom pricing is pricing specific to the subscription in question.
        Create a subscription with custom pricing by passing pricing information instead of a price point.
        For a custom priced product, pass the custom_price object in place of `product_price_point_id`. For a custom priced component, pass the `custom_price` object within the component object.
        Custom prices and price points can exist in harmony on a subscription.

        # Passing Payment Information

        ## Subscription with Chargify.js token

        The `chargify_token` can be obtained using [chargify.js](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDI0-overview). The token represents payment profile attributes that were provided by the customer in their browser and stored at the payment gateway.

        The `payment_type` attribute may either be `credit_card` or `bank_account`, depending on the type of payment method being added. If a bank account is being passed, the payment attributes should be changed to `bank_account_attributes`.

        ```json
        {
          "subscription": {
            "product_handle": "pro-plan",
            "customer_attributes": {
              "first_name": "Joe",
              "last_name": "Smith",
              "email": "j.smith@example.com"
            },
            "credit_card_attributes": {
              "chargify_token": "tok_cwhvpfcnbtgkd8nfkzf9dnjn",
              "payment_type": "credit_card"
            }
          }
        }
        ```

        ## Subscription with vault token

        If you already have a customer and card stored in your payment gateway, you may create a subscription with a `vault_token`.  Providing the last_four, card type and expiration date will allow the card to be displayed properly in the Chargify UI.

        ```json
        {
          "subscription": {
            "product_handle": "pro-plan",
            "customer_attributes": {
              "first_name": "Joe",
              "last_name": "Smith",
              "email": "j.smith@example.com"
            },
            "credit_card_attributes": {
              first_name: "Joe,
              last_name: "Smith",
              card_type: "visa",
              expiration_month: "05",
              expiration_year: "2025",
              last_four: "1234",
              vault_token: "12345abc",
              current_vault: "braintree_blue"
          }
        }
        ```

        ## Subscription with Credit Card

        ```json
        "subscription": {
            "product_handle": "basic",
            "customer_attributes": {
              "first_name": "Joe",
              "last_name": "Blow",
              "email": "joe@example.com",
              "zip": "02120",
              "state": "MA",
              "reference": "XYZ",
              "phone": "(617) 111 - 0000",
              "organization": "Acme",
              "country": "US",
              "city": "Boston",
              "address_2": null,
              "address": "123 Mass Ave."
            },
            "credit_card_attributes": {
              "last_name": "Smith",
              "first_name": "Joe",
              "full_number": "4111111111111111",
              "expiration_year": "2021",
              "expiration_month": "1",
              "card_type": "visa",
              "billing_zip": "02120",
              "billing_state": "MA",
              "billing_country": "US",
              "billing_city": "Boston",
              "billing_address_2": null,
              "billing_address": "123 Mass Ave."
            }
        }
        ```

        ## Subscription with ACH as Payment Profile

        ```json
        {
          "subscription": {
            "product_handle": "gold-product",
            "customer_attributes": {
              "first_name": "Joe",
              "last_name": "Blow",
              "email": "joe@example.com",
              "zip": "02120",
              "state": "MA",
              "reference": "XYZ",
              "phone": "(617) 111 - 0000",
              "organization": "Acme",
              "country": "US",
              "city": "Boston",
              "address_2": null,
              "address": "123 Mass Ave."
            },
            "bank_account_attributes": {
              "bank_name": "Best Bank",
              "bank_routing_number": "021000089",
              "bank_account_number": "111111111111",
              "bank_account_type": "checking",
              "bank_account_holder_type": "business",
              "payment_type": "bank_account"
            }
          }
        }
        ```

        ## Subscription with PayPal payment profile

        ### With the nonce from Braintree JS

        ```json
        { "subscription": {
            "product_handle":"test-product-b",
            "customer_attributes": {
              "first_name":"Amelia",
              "last_name":"Johnson",
              "email":"amelia@example.com",
              "organization":"My Awesome Company"
            },
            "payment_profile_attributes":{
              "paypal_email": "amelia@example.com",
              "current_vault": "braintree_blue",
              "payment_method_nonce":"abc123",
              "payment_type":"paypal_account"
            }
          }
        ```


        ### With the Braintree Customer ID as the vault token:

        ```json
        { "subscription": {
            "product_handle":"test-product-b",
            "customer_attributes": {
              "first_name":"Amelia",
              "last_name":"Johnson",
              "email":"amelia@example.com",
              "organization":"My Awesome Company"
            },
            "payment_profile_attributes":{
              "paypal_email": "amelia@example.com",
              "current_vault": "braintree_blue",
              "vault_token":"58271347",
              "payment_type":"paypal_account"
            }
          }
        ```

        ## Subscription using GoCardless Bank Number

        These examples creates a customer, bank account and mandate in GoCardless.

        For more information on GoCardless, please view the following two resources:

        + [Payment Profiles via API for GoCardless](https://developers.chargify.com/docs/api-docs/1f10a4f170405-create-payment-profile#gocardless)
        + [Full documentation on GoCardless](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404501889677)

        + [Using Chargify.js with GoCardless - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-direct-debit-gocardless-gateway)

        + [Using Chargify.js with GoCardless - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-direct-debit-gocardless-gateway)

        ```json
        {
          "subscription": {
            "product_handle": "gold-product",
            "customer_attributes": {
              "first_name": "Jane",
              "last_name": "Doe",
              "email": "jd@chargify.test"
            },
            "bank_account_attributes": {
              "bank_name": "Royal Bank of France",
              "bank_account_number": "0000000",
              "bank_routing_number": "0003",
              "bank_branch_code": "00006",
              "payment_type": "bank_account",
              "billing_address": "20 Place de la Gare",
              "billing_city": "Colombes",
              "billing_state": "Île-de-France",
              "billing_zip": "92700",
              "billing_country": "FR"
            }
          }
        }
        ```

        ## Subscription using GoCardless IBAN Number

        ```json
        {
          "subscription": {
            "product_handle": "gold-product",
            "customer_attributes": {
              "first_name": "Jane",
              "last_name": "Doe",
              "email": "jd@chargify.test"
            },
            "bank_account_attributes": {
              "bank_name": "French Bank",
              "bank_iban": "FR1420041010050500013M02606",
              "payment_type": "bank_account",
              "billing_address": "20 Place de la Gare",
              "billing_city": "Colombes",
              "billing_state": "Île-de-France",
              "billing_zip": "92700",
              "billing_country": "FR"
            }
          }
        }
        ```

        ## Subscription using Stripe SEPA Direct Debit

        For more information on Stripe Direct Debit, please view the following two resources:

        + [Payment Profiles via API for Stripe SEPA Direct Debit](https://developers.chargify.com/docs/api-docs/1f10a4f170405-create-payment-profile#sepa-direct-debit)
        + [Full documentation on Stripe Direct Debit](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405050826765-Stripe-SEPA-and-BECS-Direct-Debit)

        + [Using Chargify.js with Stripe SEPA or BECS Direct Debit - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)

        + [Using Chargify.js with Stripe SEPA Direct Debit - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-sepa-direct-debit-stripe-gateway)


        ```json
        {
          "subscription": {
            "product_handle": "gold-product",
            "customer_attributes": {
              "first_name": "Jane",
              "last_name": "Doe",
              "email": "jd@chargify.test"
            },
            "bank_account_attributes": {
              "bank_name": "Test Bank",
              "bank_iban": "DE89370400440532013000",
              "payment_type": "bank_account"
            }
          }
        }
        ```

        ## Subscription using Stripe BECS Direct Debit

        For more information on Stripe Direct Debit, please view the following two resources:

        + [Payment Profiles via API for Stripe BECS Direct Debit](https://developers.chargify.com/docs/api-docs/1f10a4f170405-create-payment-profile#stripe-becs-direct-debit)
        + [Full documentation on Stripe Direct Debit](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405050826765-Stripe-SEPA-and-BECS-Direct-Debit)

        + [Using Chargify.js with Stripe SEPA or BECS Direct Debit - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)

        + [Using Chargify.js with Stripe BECS Direct Debit - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-becs-direct-debit-stripe-gateway)


        ```json
        {
          "subscription": {
            "product_handle": "gold-product",
            "customer_attributes": {
              "first_name": "Jane",
              "last_name": "Doe",
              "email": "jd@chargify.test"
            },
            "bank_account_attributes": {
              "bank_name": "Test Bank",
              "bank_branch_code": "000000",
              "bank_account_number": "000123456",
              "payment_type": "bank_account"
            }
          }
        }
        ```

        ## 3D Secure - Stripe

        It may happen that a payment needs 3D Secure Authentication when the subscription is created; this is referred to in our help docs as a [post-authentication flow](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405177432077#psd2-flows-pre-authentication-and-post-authentication). The server returns `422 Unprocessable Entity` in this case with the following response:

        ```json
        {
          "errors": [
            "Your card was declined. This transaction requires 3D secure authentication."
          ],
          "gateway_payment_id": "pi_1F0aGoJ2UDb3Q4av7zU3sHPh",
          "description": "This card requires 3D secure authentication. Redirect the customer to the URL from the action_link attribute to authenticate. Attach callback_url param to this URL if you want to be notified about the result of 3D Secure authentication. Attach redirect_url param to this URL if you want to redirect a customer back to your page after 3D Secure authentication. Example: https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com will do a POST request to https://localhost:4000 after payment is authenticated and will redirect a customer to https://yourpage.com after 3DS authentication.",
          "action_link": "http://acme.chargify.com/3d-secure/pi_1F0aGoJ2UDb3Q4av7zU3sHPh?one_time_token_id=242"
        }
        ```

        To let the customer go through 3D Secure Authentication, they need to be redirected to the URL specified in `action_link`.
        Optionally, you can specify `callback_url` parameter in the `action_link` URL if you’d like to be notified about the result of 3D Secure Authentication. The `callback_url` will return the following information:

        - whether the authentication was successful (`success`)
        - the gateway ID for the payment (`gateway_payment_id`)
        - the subscription ID (`subscription_id`)

        Lastly, you can also specify a `redirect_url` within the `action_link` URL if you’d like to redirect a customer back to your site.

        It is not possible to use `action_link` in an iframe inside a custom application. You have to redirect the customer directly to the `action_link`, then, to be notified about the result, use `redirect_url` or `callback_url`.

        The final URL that you send a customer to to complete 3D Secure may resemble the following, where the first half is the `action_link` and the second half contains a `redirect_url` and `callback_url`: `https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com`

        ## 3D Secure - Checkout

        It may happen that a payment needs 3D Secure Authentication when the subscription is created; this is referred to in our help docs as a [post-authentication flow](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405177432077#psd2-flows-pre-authentication-and-post-authentication). The server returns `422 Unprocessable Entity` in this case with the following response:

        ```json
        {
          "errors": [
            "Your card was declined. This transaction requires 3D secure authentication."
          ],
          "gateway_payment_id": "pay_6gjofv7dlyrkpizlolsuspvtiu",
          "description": "This card requires 3D secure authentication. Redirect the customer to the URL from the action_link attribute to authenticate. Attach callback_url param to this URL if you want to be notified about the result of 3D Secure authentication. Attach redirect_url param to this URL if you want to redirect a customer back to your page after 3D Secure authentication. Example: https://mysite.chargify.com/3d-secure/pay_6gjofv7dlyrkpizlolsuspvtiu?one_time_token_id=123&callback_url=https://localhost:4000&redirect_url=https://yourpage.com will do a POST request to https://localhost:4000 after payment is authenticated and will redirect a customer to https://yourpage.com after 3DS authentication.",
          "action_link": "http://mysite.chargify.com/3d-secure/pay_6gjofv7dlyrkpizlolsuspvtiu?one_time_token_id=123"
        }
        ```

        To let the customer go through 3D Secure Authentication, they need to be redirected to the URL specified in `action_link`.
        Optionally, you can specify `callback_url` parameter in the `action_link` URL if you’d like to be notified about the result of 3D Secure Authentication. The `callback_url` will return the following information:

        - whether the authentication was successful (`success`)
        - the gateway ID for the payment (`gateway_payment_id`)
        - the subscription ID (`subscription_id`)

        Lastly, you can also specify a `redirect_url` parameter within the `action_link` URL if you’d like to redirect a customer back to your site.

        It is not possible to use `action_link` in an iframe inside a custom application. You have to redirect the customer directly to the `action_link`, then, to be notified about the result, use `redirect_url` or `callback_url`.

        The final URL that you send a customer to complete 3D Secure may resemble the following, where the first half is the `action_link` and the second half contains a `redirect_url` and `callback_url`: `https://mysite.chargify.com/3d-secure/pay_6gjofv7dlyrkpizlolsuspvtiu?one_time_token_id=123&callback_url=https://localhost:4000&redirect_url=https://yourpage.com`

        ### Example Redirect Flow

        You may wish to redirect customers to different pages depending on whether their SCA was performed successfully. Here's an example flow to use as a reference:

        1. Create a subscription via API; it requires 3DS
        2. You receive a `gateway_payment_id` in the `action_link` along other params in the response.
        3. Use this `gateway_payment_id` to, for example, connect with your internal resources or generate a session_id
        4. Include 1 of those attributes inside the `callback_url` and `redirect_url` to be aware which “session” this applies to
        5. Redirect the customer to the `action_link` with `callback_url` and `redirect_url` applied
        6. After the customer finishes 3DS authentication, we let you know the result by making a request to applied `callback_url`.
        7. After that, we redirect the customer to the `redirect_url`; at this point the result of authentication is known
        8. Optionally, you can use the applied "msg" param in the `redirect_url` to determine whether it was successful or not

        ## Subscriptions Import

        Subscriptions can be “imported” via the API to handle the following scenarios:

        + You already have existing subscriptions with specific start and renewal dates that you would like to import to Chargify
        + You already have credit cards stored in your provider’s vault and you would like to create subscriptions using those tokens

        Before importing, you should have already set up your products to match your offerings. Then, you can create Subscriptions via the API just like you normally would, but using a few special attributes.

        Full documentation on how import Subscriptions using the **import tool** in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404863655821#imports-0-0).

        ### Important Notices and Disclaimers regarding Imports

        Before performing a bulk import of subscriptions via the API, we suggest reading the [Subscriptions Import](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404863655821#important-notices-and-disclaimers) instructions to understand the repurcussions of a large import.

        ### Subscription Input Attributes

        The following _additional_ attributes to the subscription input attributes make imports possible: `next_billing_at`, `previous_billing_at`, and `import_mrr`.

        ### Current Vault

        If you are using a Legacy gateway such as "eWAY Rapid (Legacy)" or "Stripe (Legacy)" then please contact Support for further instructions on subscription imports.

        ### Braintree Blue (Braintree v2) Imports

        Braintree Blue is Braintree’s newer (version 2) API. For this gateway, please provide the `vault_token` parameter with the value from Braintree’s “Customer ID” rather than the “Payment Profile Token”. At this time we do not use `current_vault_token` with the Braintree Blue gateway, and we only support a single payment profile per Braintree Customer.

        When importing PayPal type payment profiles, please set `payment_type` to `paypal_account`.

        ### Stripe ACH Imports

        If the bank account has already been verified, currently you will need to create the customer, create the payment profile in Chargify - setting verified=true, then create a subscription using the customer_id and payment_profile_id.

        ### Webhooks During Import

        If no `next_billing_at` is provided, webhooks will be fired as normal. If you do set a future `next_billing_at`, only a subset of the webhooks are fired when the subscription is created. Keep reading for more information as to what webhooks will be fired under which scenarios.

        #### Successful creation with Billing Date

        Scenario: If `next_billing_at` provided

        + `signup_success`
        + `billing_date_change`

        #### Successful creation without Billing Date

        Scenario: If no `next_billing_at` provided

        + `signup_success`
        + `payment_success`

        #### Unsuccessful creation

        Scenario: If card can’t be charged, and no `next_billing_at` provided

        + signup_failure

        #### Webhooks fired when next_billing_at is reached:

        + `renewal_success or renewal_failure`
        + `payment_success or payment_failure`

        ### Date and Time Formats

        We will attempt to parse any string you send as the value of next_billing_at in to a date or time. For best results, use a known format like described in “Date and Time Specification” of RFC 2822 or ISO 8601 .

        The following are all equivalent and will work as input to `next_billing_at`:

        ```
        Aug 06 2030 11:34:00 -0400
        Aug 06 2030 11:34 -0400
        2030-08-06T11:34:00-04:00
        8/6/2030 11:34:00 EDT
        8/6/2030 8:34:00 PDT
        2030-08-06T15:34:00Z
        ```
        You may also pass just a date, in which case we will assume the time to be noon

        ```
        2010-08-06
        ```

        ## Subscription Hierarchies & WhoPays

        When subscription groups were first added to our Relationship Invoicing architecture, to group together invoices for related subscriptions and allow for complex customer hierarchies and WhoPays scenarios, they were designed to consist of a primary and a collection of group members. The primary would control many aspects of the group, such as when the consolidated invoice is generated. As of today, groups still function this way.

        In the future, the concept of a "primary" will be removed in order to offer more flexibility into group management and reduce confusion concerning what actions must be done on a primary level, rather than a member level.

        We have introduced a two scheme system as a bridge between these two group organizations. Scheme 1, which is relevant to all subscription groups today, marks the group as being "ruled" by a primary.

        When reading a subscription via API, they will return a top-level attribute called `group`, which will denote which scheme is being used. At this time, the `scheme` attribute will always be 1.

        ### Subscription in a Customer Hierarchy

        For sites making use of the [Relationship Billing](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405078794253-Introduction-to-Invoices) and [Customer Hierarchy](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404900384141) features, it is possible to create subscriptions within a customer hierarchy.  This can be achieved through the API by passing group parameters in the **Create Subscription** request.

        + The `group` parameters are optional and consist of the required `target` and optional `billing` parameters.

        When the `target` parameter specifies a customer that is already part of a hierarchy, the new subscription will become a member of the customer hierarchy as well.  If the target customer is not part of a hierarchy, a new customer hierarchy will be created and both the target customer and the new subscription will become part of the hierarchy with the specified target customer set as the responsible payer for the hierarchy's subscriptions.

        Rather than specifying a customer, the `target` parameter could instead simply have a value of `self` which indicates the subscription will be paid for not by some other customer, but by the subscribing customer.  This will be true whether the customer is being created new, is already part of a hierarchy, or already exists outside a hierarchy.  A valid payment method must also be specified in the subscription parameters.

        Note that when creating subscriptions in a customer hierarchy, if the customer hierarchy does not already have a payment method, passing valid credit card attributes in the subscription parameters will also result in the payment method being established as the default payment method for the customer hierarchy irrespective of the responsible payer.

        The optional `billing` parameters specify how some aspects of the billing for the new subscription should be handled.  Rather than capturing payment immediately, the `accrue` parameter can be included so that the new subscription charges accrue until the next assessment date.  Regarding the date, the `align_date` parameter can be included so that the billing date of the new subscription matches up with the default subscription group in the customer hierarchy.  When choosing to align the dates, the `prorate` parameter can also be specified so that the new subscription charges are prorated based on the billing period of the default subscription group in the customer hierarchy also.

        ### Subscription in a Subscription Group

        For sites making use of [Relationship Billing](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405078794253-Introduction-to-Invoices) it may be desireable to create a subscription as part of a [subscription group](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405577356173) in order to rely on [invoice consolidation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404980119949). This can be achieved through the API by passing group parameters in the Create Subscription request.  The `group` parameters are optional and consist of the required `target` and optional `billing` parameters.

        The `target` parameters specify an existing subscription with which the newly created subscription should be grouped.  If the target subscription is already part of a group, the new subscription will become a member of the group as well.  If the target subscription is not part of a group, a new group will be created and both the target and the new subscription will become part of the group with the target as the group's primary subscription.

        The optional `billing` parameters specify how some aspects of the billing for the new subscription should be handled.  Rather than capturing payment immediately, the `accrue` parameter can be included so that the new subscription charges accrue until the next assessment date.  Regarding the date, the `align_date` parameter can be included so that the billing date of the new subscription matches up with the target subscription.  When choosing to align the dates, the `prorate` parameter can also be specified so that the new subscription charges are prorated based on the billing period of the target subscription also.

        ## Providing Agreement Acceptance Params

        It is possible to provide a proof of customer's acceptance of terms and policies.
        We will be storing this proof in case it might be required (i.e. chargeback).
        Currently, we already keep it for subscriptions created via Public Signup Pages.
        In order to create a subscription with the proof of agreement acceptance, you must provide additional parameters `agreement acceptance` with `ip_address` and at least one url to the policy that was accepted: `terms_url` or `privacy_policy_url`. Additional urls that can be provided: `return_refund_policy_url`, `delivery_policy_url` and
        `secure_checkout_policy_url`.

        ```json
          "subscription": {
            "product_handle": "gold-product",
            "customer_attributes": {
              "first_name": "Jane",
              "last_name": "Doe",
              "email": "jd@chargify.test"
            },
            "agreement_acceptance": {
              "ip_address": "1.2.3.4",
              "terms_url": "https://terms.url",
              "privacy_policy_url": "https://privacy_policy.url",
              "return_refund_policy_url": "https://return_refund_policy.url",
              "delivery_policy_url": "https://delivery_policy.url",
              "secure_checkout_policy_url": "https://secure_checkout_policy.url"
            }
          }
        }
        ```

        **For Maxio Payments subscriptions, the agreement acceptance params are required, with at least terms_url provided.**

        ## Providing ACH Agreement params

        It is also possible to provide a proof that a customer authorized ACH agreement terms.
        The proof will be stored and the email will be sent to the customer with a copy of the terms (if enabled).
        In order to create a subscription with the proof of authorized ACH agreement terms, you must provide the additional parameter `ach_agreement` with the following nested parameters: `agreement_terms`, `authorizer_first_name`, `authorizer_last_name` and `ip_address`.
        Each of them is required.

        ```json
          "subscription": {
            "product_handle": "gold-product",
            "customer_attributes": {
              "first_name": "Jane",
              "last_name": "Doe",
              "email": "jd@chargify.test"
            },
            "bank_account_attributes": {
              "bank_name": "Test Bank",
              "bank_routing_number": "021000089",
              "bank_account_number": "111111111111",
              "bank_account_type": "checking",
              "bank_account_holder_type": "business",
              "payment_type": "bank_account"
            },
            "ach_agreement": {
              "agreement_terms": "ACH agreement terms",
              "authorizer_first_name": "Jane",
              "authorizer_last_name": "Doe",
              "ip_address": "1.2.3.4"
            }
          }
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Subscription-Request.yaml"
            examples:
              Basic:
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                      zip: "02120"
                      state: MA
                      reference: XYZ
                      phone: (617) 111 - 0000
                      organization: Acme
                      country: US
                      city: Boston
                      address_2: null
                      address: 123 Mass Ave.
                    credit_card_attributes:
                      last_name: Smith
                      first_name: Joe
                      full_number: "4111111111111111"
                      expiration_year: "2021"
                      expiration_month: "1"
                      card_type: visa
                      billing_zip: "02120"
                      billing_state: MA
                      billing_country: US
                      billing_city: Boston
                      billing_address_2: null
                      billing_address: 123 Mass Ave.
              Calendar Billing:
                value:
                  subscription:
                    product_handle: gold
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                      zip: "02120"
                      state: MA
                      reference: XYZ
                      phone: (617) 111 - 0000
                      organization: Acme
                      country: US
                      city: Boston
                      address_2: null
                      address: 123 Mass Ave.
                    calendar_billing:
                      snap_day: 1
                      calendar_billing_first_charge: immediate
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
              Components (Metered):
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe1049am@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    components:
                      - component_id: 195268
                        unit_balance: 20
              Components (On/Off):
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    components:
                      - component_id: 2500
                        enabled: true
              Components (Quantity-Based):
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Alysa
                      last_name: Test
                      email: alysa@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    components:
                      - component_id: 1
                        allocated_quantity: 18
                        price_point_id: 3
              Components By Handle (Quantity-Based):
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    components:
                      - component_id: "handle:my-handle"
                        price_point_id: "handle:special-offer"
                        allocated_quantity: 14
              With Coupon:
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    coupon_code: SUB111
              Grouped:
                value:
                  subscription:
                    product_handle: product-xyz
                    customer_id: 43693465
                    payment_profile_id: 74404848
                    group:
                      target:
                        type: customer
                        id: 43693465
                      billing:
                        align_date: true
                        prorate: false
                        accrue: false
              In Hierarchy (not Group):
                value:
                  subscription:
                    product_handle: test_product
                    customer_attributes:
                      first_name: Child who pays for self
                      last_name: (No subscription group)
                      email: joe@example.com
                      parent_id: 23554144
              Import as Canceled:
                value:
                  subscription:
                    product_handle: product
                    canceled_at: "2021-02-25T12:00:00-04:00"
                    cancellation_message: Too expensive
                    reason_code: expensive
                    activated_at: "2021-01-17T12:00:00-04:00"
                    customer_attributes:
                      first_name: Joe
                      last_name: Test
                      email: joetest@example.com
                    bank_account_attributes:
                      bank_name: My Bank
                      current_vault: stripe_connect
                      vault_token: "1234"
              Import With Future Billing Date:
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    next_billing_at: "2020-06-01T12:00:00-04:00"
              Import Authorize.Net ACH:
                value:
                  subscription:
                    product_handle: product
                    next_billing_at: "2020-08-29T12:00:00-04:00"
                    customer_attributes:
                      first_name: John
                      last_name: Doe
                      email: john.doe@example.com
                    bank_account_attributes:
                      bank_name: My Bank
                      current_vault: authorizenet
                      vault_token: "1234"
                      customer_vault_token: "5678"
              Import Stripe ACH:
                value:
                  subscription:
                    product_handle: product
                    next_billing_at: "2020-08-29T12:00:00-04:00"
                    customer_attributes:
                      first_name: John
                      last_name: Doe
                      email: john.doe@example.com
                    bank_account_attributes:
                      bank_name: My Bank
                      current_vault: stripe_connect
                      vault_token: cus_abc123
              Metadata (Subscription-Level):
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    metafields:
                      color: blue
                      comments: Thanks!
              Metadata (Customer-Level):
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                      metafields:
                        nickname: Boris
                        language: Spanish
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
              With Offer:
                value:
                  subscription:
                    offer_id: "handle:godfather"
                    customer_attributes:
                      first_name: Alysa
                      last_name: Test
                      email: alysa@example.com
                    credit_card_attributes:
                      full_number: "1"
                      expiration_month: "10"
                      expiration_year: "2020"
              Prepaid Subscription:
                value:
                  subscription:
                    product_handle: basic
                    customer_id: 12345
                    payment_profile_id: 6789
                    payment_collection_method: prepaid
                    prepaid_configuration:
                      initial_funding_amount_in_cents: 10000
                      replenish_to_amount_in_cents: 6000
                      auto_replenish: true
                      replenish_threshold_amount_in_cents: 5000
              With Referral Code:
                value:
                  subscription:
                    product_handle: product-handle
                    ref: 1q2w3e
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
              With Custom Pricing:
                value:
                  subscription:
                    product_id: 123
                    custom_price:
                      handle: custom-price
                      price_in_cents: 9900
                      interval: 1
                      interval_unit: month
                    components:
                      - component_id: 20
                        allocated_quantity: 10
                        custom_price:
                          pricing_scheme: stairstep
                          prices:
                            - unit_price: 5
                              starting_quantity: 1
                              ending_quantity: 15
                            - unit_price: 2
                              starting_quantity: 16
                      - component_id: 10
                        enabled: true
                        custom_price:
                          prices:
                            - unit_price: 1
                              starting_quantity: 1
              With Agreement Acceptance:
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    credit_card_attributes:
                      chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                    agreement_acceptance:
                      ip_address: 1.2.3.4
                      terms_url: "https://terms.url"
                      privacy_policy_url: "https://privacy_policy.url"
                      return_refund_policy_url: "https://return_refund_policy.url"
                      delivery_policy_url: "https://delivery_policy_.url"
                      secure_checkout_policy_url: "https://secure_checkout_policy.url"
              With ACH Agreement:
                value:
                  subscription:
                    product_handle: basic
                    customer_attributes:
                      first_name: Joe
                      last_name: Blow
                      email: joe@example.com
                    bank_account_attributes:
                      bank_name: Test Bank
                      bank_routing_number: "021000089"
                      bank_account_number: "111111111111"
                      bank_account_type: checking
                      bank_account_holder_type: business
                      payment_type: bank_account
                    ach_agreement:
                      agreement_terms: ACH agreement terms
                      authorizer_first_name: Jane
                      authorizer_last_name: Doe
                      ip_address: 1.2.3.4
    get:
      summary: List Subscriptions
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Subscription-Response.yaml"
      operationId: listSubscriptions
      x-operation-settings:
        collectParameters: true
      description: |-
        This method will return an array of subscriptions from a Site. Pay close attention to query string filters and pagination in order to control responses from the server.

        ## Search for a subscription

        Use the query strings below to search for a subscription using the criteria available. The return value will be an array.

        ## Self-Service Page token

        Self-Service Page token for the subscriptions is not returned by default. If this information is desired, the include[]=self_service_page_token parameter must be provided with the request.
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - name: state
          in: query
          schema:
            $ref: "../components/schemas/Subscription-State-Filter.yaml"
          description: The current state of the subscription
        - name: product
          in: query
          schema:
            type: integer
          description: The product id of the subscription. (Note that the product handle cannot be used.)
        - name: product_price_point_id
          in: query
          schema:
            type: integer
          description: "The ID of the product price point. If supplied, product is required"
        - name: coupon
          in: query
          schema:
            type: integer
          description: The numeric id of the coupon currently applied to the subscription. (This can be found in the URL when editing a coupon. Note that the coupon code cannot be used.)
        - name: date_field
          in: query
          schema:
            $ref: "../components/schemas/Subscription-Date-Field.yaml"
          description: "The type of filter you'd like to apply to your search.  Allowed Values: , current_period_ends_at, current_period_starts_at, created_at, activated_at, canceled_at, expires_at, trial_started_at, trial_ended_at, updated_at"
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description:
            "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns subscriptions with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified.
            Use in query `start_date=2022-07-01`."
          example: "2022-07-01"
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description:
            "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns subscriptions with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified.
            Use in query `end_date=2022-08-01`."
          example: "2022-08-01"
        - name: start_datetime
          in: query
          schema:
            type: string
            format: date-time
          description:
            "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns subscriptions with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date.
            Use in query `start_datetime=2022-07-01 09:00:05`."
          example: "2022-07-01 09:00:05"
        - name: end_datetime
          in: query
          schema:
            type: string
            format: date-time
          description:
            "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns subscriptions with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date.
            Use in query `end_datetime=2022-08-01 10:00:05`."
          example: "2022-08-01 10:00:05"
        - name: metadata
          in: query
          schema:
            allOf:
              - $ref: "../components/schemas/Metafields-Values.yaml"
            description: "A set of key/value pairs representing custom fields and their values."
          style: deepObject
          explode: true
          description: "The value of the metadata field specified in the parameter. Use in query `metadata[my-field]=value&metadata[other-field]=another_value`."
        - $ref: "../components/parameters/sort-direction.yaml"
        - schema:
            $ref: "../components/schemas/Subscription-Sort.yaml"
          in: query
          name: sort
          description: The attribute by which to sort
        - name: "include[]"
          in: query
          schema:
            type: array
            items:
              $ref: "../components/schemas/Subscription-List-Include.yaml"
            example:
              - self_service_page_token
          style: form
          explode: true
          description: "Allows including additional data in the response. Use in query: `include[]=self_service_page_token`."
  "/{subdomain}/events/{api_handle}.json":
    parameters:
      - schema:
          type: string
        name: subdomain
        in: path
        required: true
        description: Your site's subdomain
      - schema:
          type: string
        name: api_handle
        in: path
        required: true
        description: Identifies the Stream for which the event should be published.
    post:
      summary: Event Ingestion
      tags:
        - Subscription Components
      responses:
        "201":
          description: Created
      operationId: recordEvent
      description: |-
        ## Documentation

        Events-Based Billing is an evolved form of metered billing that is based on data-rich events streamed in real-time from your system to Chargify.

        These events can then be transformed, enriched, or analyzed to form the computed totals of usage charges billed to your customers.

        This API allows you to stream events into the Chargify data ingestion engine.

        Learn more about the feature in general in the [Events-Based Billing help docs](https://chargify.zendesk.com/hc/en-us/articles/4407720613403).

        ## Record Event

        Use this endpoint to record a single event.

        *Note: this endpoint differs from the standard Chargify endpoints in that the URL subdomain will be `events` and your site subdomain will be included in the URL path. For example:*

        ```
        https://events.chargify.com/my-site-subdomain/events/my-stream-api-handle
        ```
      parameters:
        - schema:
            type: string
          in: query
          name: store_uid
          description: "If you've attached your own Keen project as a Chargify event data-store, use this parameter to indicate the data-store."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Ebb-Event.yaml"
            examples:
              Example:
                value:
                  chargify:
                    subscription_id: 1
                    timestamp: "2020-02-27T17:45:50-05:00"
                  messages: 150
                  country: US
                  customer:
                    name: John
                    lastName: Doe
                    address:
                      street: Maple Street
                      zip: 4888
                      state: MA
    servers:
      - url: "https://events.chargify.com"
        description: Production server
  "/{subdomain}/events/{api_handle}/bulk.json":
    parameters:
      - schema:
          type: string
        name: subdomain
        in: path
        required: true
        description: Your site's subdomain
      - schema:
          type: string
        name: api_handle
        in: path
        required: true
        description: Identifies the Stream for which the events should be published.
    post:
      summary: Bulk Event Ingestion
      tags:
        - Subscription Components
      responses:
        "201":
          description: Created
      operationId: bulkRecordEvents
      description: |-
        Use this endpoint to record a collection of events.

        *Note: this endpoint differs from the standard Chargify endpoints in that the subdomain will be `events` and your site subdomain will be included in the URL path.*

        A maximum of 1000 events can be published in a single request. A 422 will be returned if this limit is exceeded.
      parameters:
        - schema:
            type: string
          in: query
          name: store_uid
          description: "If you've attached your own Keen project as a Chargify event data-store, use this parameter to indicate the data-store."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "../components/schemas/Ebb-Event.yaml"
    servers:
      - url: "https://events.chargify.com"
        description: Production server
  /offers.json:
    post:
      summary: Create Offer
      tags:
        - Offers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Offer-Response.yaml"
              examples:
                Example:
                  value:
                    offer:
                      id: 3
                      site_id: 2
                      product_family_id: 4
                      product_family_name: Chargify
                      product_id: 31
                      product_name: 30-Day Square Trial
                      product_price_in_cents: 2000
                      product_revisable_number: 0
                      name: Solo
                      handle: han_shot_first
                      description: A Star Wars Story
                      created_at: "2018-06-08T14:51:52-04:00"
                      updated_at: "2018-06-08T14:51:52-04:00"
                      archived_at: null
                      product_price_point_name: Default
                      offer_items:
                        - component_id: 24
                          component_name: Invoices
                          component_unit_price: "3.0"
                          price_point_id: 104
                          price_point_name: Original
                          starting_quantity: "1.0"
                          editable: false
                      offer_discounts:
                        - coupon_id: 3
                          coupon_code: DEF456
                          coupon_name: IB Loyalty
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      components:
                        - "starting_quantity for an On/Off component can only be '1' or '0': 24"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createOffer
      description: |-
        Create an offer within your Chargify site by sending a POST request.

        ## Documentation

        Offers allow you to package complicated combinations of products, components and coupons into a convenient package which can then be subscribed to just like products.

        Once an offer is defined it can be used as an alternative to the product when creating subscriptions.

        Full documentation on how to use offers in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407753852059).

        ## Using a Product Price Point

        You can optionally pass in a `product_price_point_id` that corresponds with the `product_id` and the offer will use that price point. If a `product_price_point_id` is not passed in, the product's default price point will be used.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Offer-Request.yaml"
            examples:
              Example:
                value:
                  offer:
                    name: Solo
                    handle: han_shot_first
                    description: A Star Wars Story
                    product_id: 31
                    product_price_point_id: 102
                    components:
                      - component_id: 24
                        starting_quantity: 1
                    coupons:
                      - DEF456
    get:
      summary: List Offers
      tags:
        - Offers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Offers-Response.yaml"
              examples:
                Example:
                  value:
                    offers:
                      - id: 239
                        site_id: 48110
                        product_family_id: 1025627
                        product_family_name: Gold
                        product_id: 110
                        product_name: Pro
                        product_price_in_cents: 1000
                        product_revisable_number: 0
                        product_price_point_id: 138
                        product_price_point_name: Default
                        name: Third Offer
                        handle: third
                        description: ""
                        created_at: "2018-08-03T09:56:11-05:00"
                        updated_at: "2018-08-03T09:56:11-05:00"
                        archived_at: null
                        offer_items:
                          - component_id: 426665
                            component_name: Database Size (GB)
                            component_unit_price: "1.0"
                            price_point_id: 149438
                            price_point_name: Auto-created
                            starting_quantity: "0.0"
                            editable: false
                            currency_prices: []
                        offer_discounts:
                          - coupon_id: 234
                            coupon_code: GR8_CUSTOMER
                            coupon_name: Multi-service Discount
                        offer_signup_pages:
                          - id: 356482
                            nickname: ggoods
                            enabled: true
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargifypay.com/subscribe/hjpvhnw63tzy"
      operationId: listOffers
      description: This endpoint will list offers for a site.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: boolean
            example: true
          in: query
          name: include_archived
          description: "Include archived products. Use in query: `include_archived=true`."
  "/offers/{offer_id}.json":
    parameters:
      - $ref: "../components/parameters/offer-id-path.yaml"
    get:
      summary: Read Offer
      tags:
        - Offers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Offer-Response.yaml"
              examples: {}
      operationId: readOffer
      description: "This method allows you to list a specific offer's attributes. This is different than list all offers for a site, as it requires an `offer_id`."
  "/offers/{offer_id}/archive.json":
    parameters:
      - $ref: "../components/parameters/offer-id-path.yaml"
    put:
      summary: Archive Offer
      tags:
        - Offers
      responses:
        "200":
          description: OK
      operationId: archiveOffer
      description: Archive an existing offer. Please provide an `offer_id` in order to archive the correct item.
  "/offers/{offer_id}/unarchive.json":
    parameters:
      - $ref: "../components/parameters/offer-id-path.yaml"
    put:
      summary: Unarchive Offer
      tags:
        - Offers
      responses:
        "200":
          description: OK
      operationId: unarchiveOffer
      description: Unarchive a previously archived offer. Please provide an `offer_id` in order to un-archive the correct item.
  "/sellers/{seller_id}/sales_commission_settings.json":
    parameters:
      - $ref: "../components/parameters/seller-id-path.yaml"
    get:
      summary: List Sales Commission Settings
      tags:
        - Sales Commissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Sale-Rep-Settings.yaml"
              examples:
                Example:
                  value:
                    - customer_name: Ziomek Ziomeczek
                      subscription_id: 81746
                      site_link: "https://chargify9.staging-chargify.com/dashboard"
                      site_name: Chargify
                      subscription_mrr: $200.00
                      sales_rep_id: 48
                      sales_rep_name: John Candy
                    - customer_name: Ziom Kom
                      subscription_id: 83758
                      site_link: "https://chargify9.staging-chargify.com/dashboard"
                      site_name: Chargify
                      subscription_mrr: $200.00
                      sales_rep_id: 49
                      sales_rep_name: Josh Acme
                    - customer_name: George Bush
                      subscription_id: 83790
                      site_link: "https://chargify9.staging-chargify.com/dashboard"
                      site_name: Chargify
                      subscription_mrr: $200.00
                      sales_rep_id: 48
                      sales_rep_name: John Candy
      operationId: listSalesCommissionSettings
      description: |-
        Endpoint returns subscriptions with associated sales reps

        ## Modified Authentication Process

        The Sales Commission API differs from other Chargify API endpoints. This resource is associated with the seller itself. Up to now all available resources were at the level of the site, therefore creating the API Key per site was a sufficient solution. To share resources at the seller level, a new authentication method was introduced, which is user authentication. Creating an API Key for a user is a required step to correctly use the Sales Commission API, more details [here](https://developers.chargify.com/docs/developer-docs/ZG9jOjMyNzk5NTg0-2020-04-20-new-api-authentication).

        Access to the Sales Commission API endpoints is available to users with financial access, where the seller has the Advanced Analytics component enabled. For further information on getting access to Advanced Analytics please contact Chargify support.

        > Note: The request is at seller level, it means `<<subdomain>>` variable will be replaced by `app`
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/user-authorization.yaml"
        - $ref: "../components/parameters/live-mode.yaml"
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-sales-commission.yaml"
  "/sellers/{seller_id}/sales_reps.json":
    parameters:
      - $ref: "../components/parameters/seller-id-path.yaml"
    get:
      summary: List Sales Reps
      tags:
        - Sales Commissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/List-Sale-Rep-Item.yaml"
              examples:
                Example:
                  value:
                    - id: 48
                      full_name: John Candy
                      subscriptions_count: 2
                      mrr_data:
                        november_2019:
                          mrr: $0.00
                          usage: $0.00
                          recurring: $0.00
                        december_2019:
                          mrr: $0.00
                          usage: $0.00
                          recurring: $0.00
                        january_2020:
                          mrr: $400.00
                          usage: $0.00
                          recurring: $400.00
                        february_2020:
                          mrr: $400.00
                          usage: $0.00
                          recurring: $400.00
                        march_2020:
                          mrr: $400.00
                          usage: $0.00
                          recurring: $400.00
                        april_2020:
                          mrr: $400.00
                          usage: $0.00
                          recurring: $400.00
                      test_mode: true
                    - id: 49
                      full_name: Josh Acme
                      subscriptions_count: 1
                      mrr_data:
                        november_2019:
                          mrr: $0.00
                          usage: $0.00
                          recurring: $0.00
                        december_2019:
                          mrr: $0.00
                          usage: $0.00
                          recurring: $0.00
                        january_2020:
                          mrr: $200.00
                          usage: $0.00
                          recurring: $200.00
                        february_2020:
                          mrr: $200.00
                          usage: $0.00
                          recurring: $200.00
                        march_2020:
                          mrr: $200.00
                          usage: $0.00
                          recurring: $200.00
                        april_2020:
                          mrr: $200.00
                          usage: $0.00
                          recurring: $200.00
                      test_mode: true
      operationId: listSalesReps
      description: |-
        Endpoint returns sales rep list with details

        ## Modified Authentication Process

        The Sales Commission API differs from other Chargify API endpoints. This resource is associated with the seller itself. Up to now all available resources were at the level of the site, therefore creating the API Key per site was a sufficient solution. To share resources at the seller level, a new authentication method was introduced, which is user authentication. Creating an API Key for a user is a required step to correctly use the Sales Commission API, more details [here](https://developers.chargify.com/docs/developer-docs/ZG9jOjMyNzk5NTg0-2020-04-20-new-api-authentication).

        Access to the Sales Commission API endpoints is available to users with financial access, where the seller has the Advanced Analytics component enabled. For further information on getting access to Advanced Analytics please contact Chargify support.

        > Note: The request is at seller level, it means `<<subdomain>>` variable will be replaced by `app`
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/user-authorization.yaml"
        - $ref: "../components/parameters/live-mode.yaml"
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-sales-commission.yaml"
  "/sellers/{seller_id}/sales_reps/{sales_rep_id}.json":
    parameters:
      - $ref: "../components/parameters/seller-id-path.yaml"
      - schema:
          type: string
        name: sales_rep_id
        in: path
        required: true
        description: The Chargify id of sales rep.
    get:
      summary: Read Sales Rep
      tags:
        - Sales Commissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Sale-Rep.yaml"
              examples:
                Example:
                  value:
                    id: 48
                    full_name: John Candy
                    subscriptions_count: 2
                    test_mode: true
                    subscriptions:
                      - id: 81746
                        site_name: Chargify
                        subscription_url: "https://chargify9.staging-chargify.com/subscriptions/81746"
                        customer_name: Ziomek Ziomeczek
                        created_at: "2020-01-03T02:36:27-05:00"
                        mrr: $200.00
                        usage: $0.00
                        recurring: $200.00
                        last_payment: "2020-04-03T03:40:27-04:00"
                        churn_date: null
                      - id: 83790
                        site_name: Chargify
                        subscription_url: "https://chargify9.staging-chargify.com/subscriptions/83790"
                        customer_name: George Bush
                        created_at: "2020-01-17T07:34:32-05:00"
                        mrr: $200.00
                        usage: $0.00
                        recurring: $200.00
                        last_payment: "2020-04-17T08:41:03-04:00"
                        churn_date: null
      operationId: readSalesRep
      description: |-
        Endpoint returns sales rep and attached subscriptions details.

        ## Modified Authentication Process

        The Sales Commission API differs from other Chargify API endpoints. This resource is associated with the seller itself. Up to now all available resources were at the level of the site, therefore creating the API Key per site was a sufficient solution. To share resources at the seller level, a new authentication method was introduced, which is user authentication. Creating an API Key for a user is a required step to correctly use the Sales Commission API, more details [here](https://developers.chargify.com/docs/developer-docs/ZG9jOjMyNzk5NTg0-2020-04-20-new-api-authentication).

        Access to the Sales Commission API endpoints is available to users with financial access, where the seller has the Advanced Analytics component enabled. For further information on getting access to Advanced Analytics please contact Chargify support.

        > Note: The request is at seller level, it means `<<subdomain>>` variable will be replaced by `app`
      parameters:
        - $ref: "../components/parameters/user-authorization.yaml"
        - $ref: "../components/parameters/live-mode.yaml"
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-sales-commission.yaml"
  "/subscriptions/{subscription_id}/retry.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    put:
      summary: Retry Subscription
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 46330
                      state: active
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2018-10-22T13:10:46-06:00"
                      created_at: "2018-10-22T13:10:46-06:00"
                      updated_at: "2021-06-10T09:23:43-06:00"
                      expires_at: null
                      balance_in_cents: 18600
                      current_period_ends_at: "2021-06-22T13:10:46-06:00"
                      next_assessment_at: "2021-06-22T13:10:46-06:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: null
                      payment_collection_method: automatic
                      snap_day: null
                      cancellation_method: null
                      product_price_point_id: 3464
                      next_product_price_point_id: null
                      receives_invoice_emails: null
                      net_terms: null
                      locale: null
                      currency: USD
                      reference: null
                      scheduled_cancellation_at: null
                      current_period_started_at: "2021-05-22T13:10:46-06:00"
                      previous_state: past_due
                      signup_payment_id: 651268
                      signup_revenue: "6.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 600
                      product_price_in_cents: 600
                      product_version_number: 501
                      payment_type: null
                      referral_code: rzqvrx
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      reason_code: null
                      automatically_resume_at: null
                      coupon_codes: []
                      offer_id: null
                      credit_balance_in_cents: 0
                      prepayment_balance_in_cents: 0
                      payer_id: 142365
                      stored_credential_transaction_id: null
                      next_product_handle: null
                      on_hold_at: null
                      prepaid_dunning: false
                      customer:
                        id: 142365
                        first_name: Lavern
                        last_name: Fahey
                        organization: null
                        email: millie2@example.com
                        created_at: "2018-10-22T13:10:46-06:00"
                        updated_at: "2018-10-22T13:10:46-06:00"
                        reference: null
                        address: null
                        address_2: null
                        city: null
                        state: null
                        zip: null
                        country: null
                        phone: null
                        portal_invite_last_sent_at: null
                        portal_invite_last_accepted_at: null
                        verified: false
                        portal_customer_created_at: "2018-10-22T13:10:46-06:00"
                        vat_number: null
                        cc_emails: "john@example.com, sue@example.com"
                        tax_exempt: false
                        parent_id: null
                        locale: null
                      product:
                        id: 8080
                        name: Pro Versions
                        handle: null
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: month
                        created_at: "2019-02-15T10:15:00-07:00"
                        updated_at: "2019-02-15T10:30:34-07:00"
                        price_in_cents: 600
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: true
                        return_params: ""
                        require_shipping_address: false
                        request_billing_address: false
                        require_billing_address: false
                        taxable: false
                        update_return_url: ""
                        tax_code: ""
                        initial_charge_after_trial: false
                        default_product_price_point_id: 3464
                        version_number: 501
                        update_return_params: ""
                        product_price_point_id: 3464
                        product_price_point_name: Default
                        product_price_point_handle: "uuid:5305c3f0-1375-0137-5619-065dfbfdc636"
                        product_family:
                          id: 37
                          name: Acme Projects
                          description: null
                          handle: acme-projects
                          accounting_code: null
                          created_at: "2013-02-20T15:05:51-07:00"
                          updated_at: "2013-02-20T15:05:51-07:00"
                        public_signup_pages:
                          - id: 1540
                            return_url: null
                            return_params: ""
                            url: "https://acme-test.staging-chargifypay.com/subscribe/2f6y53rrqgsf"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "base: subscription retry was unsuccessful"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: retrySubscription
      description: |-
        Chargify offers the ability to retry collecting the balance due on a past due Subscription without waiting for the next scheduled attempt.

        ## Successful Reactivation

        The response will be `200 OK` with the updated Subscription.

        ## Failed Reactivation

        The response will be `422 "Unprocessable Entity`.
  "/subscriptions/{subscription_id}.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    put:
      summary: Update Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 18220670
                      state: active
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2017-06-27T13:45:15-05:00"
                      created_at: "2017-06-27T13:45:13-05:00"
                      updated_at: "2017-06-30T09:26:50-05:00"
                      expires_at: null
                      balance_in_cents: 10000
                      current_period_ends_at: "2017-06-30T12:00:00-05:00"
                      next_assessment_at: "2017-06-30T12:00:00-05:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: automatic
                      snap_day: end
                      cancellation_method: null
                      current_period_started_at: "2017-06-27T13:45:13-05:00"
                      previous_state: active
                      signup_payment_id: 191819284
                      signup_revenue: "0.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 0
                      product_price_in_cents: 0
                      product_version_number: 1
                      payment_type: null
                      referral_code: d3pw7f
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      reason_code: null
                      automatically_resume_at: null
                      current_billing_amount_in_cents: 10000
                      receives_invoice_emails: false
                      customer:
                        id: 17780587
                        first_name: Catie
                        last_name: Test
                        organization: "Acme, Inc."
                        email: catie@example.com
                        created_at: "2017-06-27T13:01:05-05:00"
                        updated_at: "2017-06-30T09:23:10-05:00"
                        reference: 123ABC
                        address: 123 Anywhere Street
                        address_2: "Apartment #10"
                        city: Los Angeles
                        state: CA
                        zip: "90210"
                        country: US
                        phone: 555-555-5555
                        portal_invite_last_sent_at: "2017-06-27T13:45:16-05:00"
                        portal_invite_last_accepted_at: null
                        verified: true
                        portal_customer_created_at: "2017-06-27T13:01:08-05:00"
                        cc_emails: support@example.com
                        tax_exempt: true
                      product:
                        id: 4470347
                        name: Zero Dollar Product
                        handle: zero-dollar-product
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2017-03-23T10:54:12-05:00"
                        updated_at: "2017-04-20T15:18:46-05:00"
                        price_in_cents: 0
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: false
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        tax_code: ""
                        initial_charge_after_trial: false
                        version_number: 1
                        update_return_params: ""
                        product_family:
                          id: 997233
                          name: Acme Products
                          description: ""
                          handle: acme-products
                          accounting_code: null
                        public_signup_pages:
                          - id: 316810
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Payment collection method cannot be set to 'invoice' when the subscription is past due
                      - "'expires_at' cannot be set for subscriptions on calendar billing"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateSubscription
      description: |-
        The subscription endpoint allows you to instantly update one or many attributes about a subscription in a single call.

        ## Update Subscription Payment Method

        Change the card that your Subscriber uses for their subscription. You can also use this method to simply change the expiration date of the card **if your gateway allows**.

        Note that partial card updates for **Authorize.Net** are not allowed via this endpoint. The existing Payment Profile must be directly updated instead.

        You also use this method to change the subscription to a different product by setting a new value for product_handle. A product change can be done in two different ways, **product change** or **delayed product change**.

        ## Product Change

        This endpoint may be used to change a subscription's product. The new payment amount is calculated and charged at the normal start of the next period. If you desire complex product changes or prorated upgrades and downgrades instead, please see the documentation on Migrating Subscription Products.

        To perform a product change, simply set either the `product_handle` or `product_id` attribute to that of a different product from the same site as the subscription. You can also change the price point by passing in either `product_price_point_id` or `product_price_point_handle` - otherwise the new product's default price point will be used.

        ### Delayed Product Change

        This method also changes the product and/or price point, and the new payment amount is calculated and charged at the normal start of the next period.

        This method schedules the product change to happen automatically at the subscription’s next renewal date. To perform a Delayed Product Change, set the `product_handle` attribute as you would in a regular product change, but also set the `product_change_delayed` attribute to `true`. No proration applies in this case.

        You can also perform a delayed change to the price point by passing in either `product_price_point_id` or `product_price_point_handle`

        **Note: To cancel a delayed product change, set `next_product_id` to an empty string.**

        ## Billing Date Changes

        ### Regular Billing Date Changes

        Send the `next_billing_at` to set the next billing date for the subscription. After that date passes and the subscription is processed, the following billing date will be set according to the subscription's product period.

        Note that if you pass an invalid date, we will automatically interpret and set the correct date. For example, when February 30 is entered, the next billing will be set to March 2nd in a non-leap year.

        The server response will not return data under the key/value pair of `next_billing`. Please view the key/value pair of `current_period_ends_at` to verify that the `next_billing` date has been changed successfully.

        ### Snap Day Changes

        For a subscription using Calendar Billing, setting the next billing date is a bit different. Send the `snap_day` attribute to change the calendar billing date for **a subscription using a product eligible for calendar billing**.

        Note: If you change the product associated with a subscription that contains a `snap_date` and immediately `READ/GET` the subscription data, it will still contain evidence of the existing `snap_date`. This is due to the fact that a product change is instantanous and only affects the product associated with a subscription. After the `next_billing` date arrives, the `snap_day` associated with the subscription will return to `null.` Another way of looking at this is that you willl have to wait for the next billing cycle to arrive before the `snap_date` will reset to `null`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Subscription-Request.yaml"
            examples:
              Example:
                value:
                  subscription:
                    credit_card_attributes:
                      full_number: "4111111111111111"
                      expiration_month: "10"
                      expiration_year: "2030"
                    next_billing_at: "2010-08-06T15:34:00Z"
              With Custom Pricing:
                value:
                  subscription:
                    product_id: 123
                    custom_price:
                      price_in_cents: 9900
                      interval: 1
                      interval_unit: month
                    components:
                      - component_id: 20
                        custom_price:
                          pricing_scheme: stairstep
                          prices:
                            - unit_price: "5"
                              starting_quantity: "1"
                              ending_quantity: "15"
                            - unit_price: "2"
                              starting_quantity: "16"
                      - component_id: 10
                        custom_price:
                          prices:
                            - unit_price: "1"
                              starting_quantity: "1"
    delete:
      summary: Cancel Subscription
      tags:
        - Subscription Status
      operationId: cancelSubscription
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 15254809
                      state: canceled
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2016-11-15T15:33:44-05:00"
                      created_at: "2016-11-15T15:33:44-05:00"
                      updated_at: "2016-11-15T17:13:06-05:00"
                      expires_at: null
                      balance_in_cents: 0
                      current_period_ends_at: "2017-08-29T12:00:00-04:00"
                      next_assessment_at: "2017-08-29T12:00:00-04:00"
                      canceled_at: "2016-11-15T17:13:06-05:00"
                      cancellation_message: Canceling the subscription via the API
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: automatic
                      snap_day: null
                      cancellation_method: merchant_api
                      current_period_started_at: "2016-11-15T15:33:44-05:00"
                      previous_state: active
                      signup_payment_id: 0
                      signup_revenue: "0.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 0
                      product_price_in_cents: 1000
                      product_version_number: 7
                      payment_type: credit_card
                      referral_code: tg8qbq
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      customer:
                        id: 14731081
                        first_name: John
                        last_name: Doe
                        organization: Acme Widgets
                        email: john.doe@example.com
                        created_at: "2016-11-15T15:33:44-05:00"
                        updated_at: "2016-11-15T15:33:45-05:00"
                        reference: "123"
                        address: null
                        address_2: null
                        city: null
                        state: null
                        zip: null
                        country: null
                        phone: null
                        portal_invite_last_sent_at: "2016-11-15T15:33:45-05:00"
                        portal_invite_last_accepted_at: null
                        verified: false
                        portal_customer_created_at: "2016-11-15T15:33:45-05:00"
                        cc_emails: null
                      product:
                        id: 3792003
                        name: $10 Basic Plan
                        handle: basic
                        description: lorem ipsum
                        accounting_code: basic
                        request_credit_card: false
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2016-03-24T13:38:39-04:00"
                        updated_at: "2016-11-03T13:03:05-04:00"
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: day
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: false
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        initial_charge_after_trial: false
                        version_number: 7
                        update_return_params: ""
                        product_family:
                          id: 527890
                          name: Acme Projects
                          description: ""
                          handle: billing-plans
                          accounting_code: null
                        public_signup_pages:
                          - id: 281054
                            return_url: "http://www.example.com?successfulsignup"
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/kqvmfrbgd89q/basic"
                          - id: 281240
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/dkffht5dxfd8/basic"
                          - id: 282694
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/jwffwgdd95s8/basic"
                      credit_card:
                        id: 10202898
                        first_name: John
                        last_name: Doe
                        masked_card_number: XXXX-XXXX-XXXX-1111
                        card_type: visa
                        expiration_month: 12
                        expiration_year: 2020
                        customer_id: 14731081
                        current_vault: authorizenet
                        vault_token: "12345"
                        billing_address: null
                        billing_city: null
                        billing_state: null
                        billing_zip: null
                        billing_country: null
                        customer_vault_token: "67890"
                        billing_address_2: null
                        payment_type: credit_card
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Cancel-Subscription-Error-Response.yaml"
              examples:
                Example-1:
                  value:
                    error: The subscription is already canceled
                Example-2:
                  value:
                    errors:
                      - reason_code size cannot be greater than 255
                      - cancellation_message size cannot be greater than 65535
                Example-3:
                  value:
                    errors:
                      - subscription must be an Object
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      description: 'The DELETE action causes the cancellation of the Subscription. This means, the method sets the Subscription state to "canceled".'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Cancellation-Request.yaml"
    get:
      summary: Read Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 15236915
                      state: active
                      balance_in_cents: 0
                      total_revenue_in_cents: 14000
                      product_price_in_cents: 1000
                      product_version_number: 7
                      current_period_ends_at: "2016-11-15T14:48:10-05:00"
                      next_assessment_at: "2016-11-15T14:48:10-05:00"
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2016-11-14T14:48:12-05:00"
                      expires_at: null
                      created_at: "2016-11-14T14:48:10-05:00"
                      updated_at: "2016-11-14T15:24:41-05:00"
                      cancellation_message: null
                      cancellation_method: null
                      cancel_at_end_of_period: null
                      canceled_at: null
                      current_period_started_at: "2016-11-14T14:48:10-05:00"
                      previous_state: active
                      signup_payment_id: 162269766
                      signup_revenue: "260.00"
                      delayed_cancel_at: null
                      coupon_code: 5SNN6HFK3GBH
                      payment_collection_method: automatic
                      snap_day: null
                      reason_code: null
                      receives_invoice_emails: false
                      net_terms: 0
                      customer:
                        first_name: Curtis
                        last_name: Test
                        email: curtis@example.com
                        cc_emails: jeff@example.com
                        organization: ""
                        reference: null
                        id: 14714298
                        created_at: "2016-11-14T14:48:10-05:00"
                        updated_at: "2016-11-14T14:48:13-05:00"
                        address: 123 Anywhere Street
                        address_2: ""
                        city: Boulder
                        state: CO
                        zip: "80302"
                        country: US
                        phone: ""
                        verified: false
                        portal_customer_created_at: "2016-11-14T14:48:13-05:00"
                        portal_invite_last_sent_at: "2016-11-14T14:48:13-05:00"
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                        vat_number: "012345678"
                      product:
                        id: 3792003
                        name: $10 Basic Plan
                        handle: basic
                        description: lorem ipsum
                        accounting_code: basic
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: day
                        initial_charge_in_cents: null
                        expiration_interval: null
                        expiration_interval_unit: never
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        initial_charge_after_trial: false
                        return_params: ""
                        request_credit_card: false
                        require_credit_card: false
                        created_at: "2016-03-24T13:38:39-04:00"
                        updated_at: "2016-11-03T13:03:05-04:00"
                        archived_at: null
                        update_return_url: ""
                        update_return_params: ""
                        product_family:
                          id: 527890
                          name: Acme Projects
                          handle: billing-plans
                          accounting_code: null
                          description: ""
                        public_signup_pages:
                          - id: 281054
                            url: "https://general-goods.chargify.com/subscribe/kqvmfrbgd89q/basic"
                          - id: 281240
                            url: "https://general-goods.chargify.com/subscribe/dkffht5dxfd8/basic"
                          - id: 282694
                            url: "https://general-goods.chargify.com/subscribe/jwffwgdd95s8/basic"
                        taxable: false
                        version_number: 7
                        product_price_point_name: Default
                      credit_card:
                        id: 10191713
                        payment_type: credit_card
                        first_name: Curtis
                        last_name: Test
                        masked_card_number: XXXX-XXXX-XXXX-1
                        card_type: bogus
                        expiration_month: 1
                        expiration_year: 2026
                        billing_address: 123 Anywhere Street
                        billing_address_2: ""
                        billing_city: Boulder
                        billing_state: null
                        billing_country: ""
                        billing_zip: "80302"
                        current_vault: bogus
                        vault_token: "1"
                        customer_vault_token: null
                        customer_id: 14714298
                      payment_type: credit_card
                      referral_code: w7kjc9
                      next_product_id: null
                      coupon_use_count: 1
                      coupon_uses_allowed: 1
                      stored_credential_transaction_id: 166411599220288
                      on_hold_at: null
                      scheduled_cancellation_at: "2016-11-14T14:48:13-05:00"
      operationId: readSubscription
      description: |-
        Use this endpoint to find subscription details.

        ## Self-Service Page token

        Self-Service Page token for the subscription is not returned by default. If this information is desired, the include[]=self_service_page_token parameter must be provided with the request.
      parameters:
        - name: "include[]"
          in: query
          schema:
            type: array
            items:
              $ref: "../components/schemas/Subscription-Include.yaml"
            example:
              - coupons
              - self_service_page_token
          style: form
          explode: true
          description: "Allows including additional data in the response.
            Use in query: `include[]=coupons&include[]=self_service_page_token`."
  "/subscriptions/{subscription_id}/resume.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Resume Subscription
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 18220670
                      state: active
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2017-06-27T13:45:15-05:00"
                      created_at: "2017-06-27T13:45:13-05:00"
                      updated_at: "2017-06-30T09:26:50-05:00"
                      expires_at: null
                      balance_in_cents: 10000
                      current_period_ends_at: "2017-06-30T12:00:00-05:00"
                      next_assessment_at: "2017-06-30T12:00:00-05:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: automatic
                      snap_day: end
                      cancellation_method: null
                      current_period_started_at: "2017-06-27T13:45:13-05:00"
                      previous_state: active
                      signup_payment_id: 191819284
                      signup_revenue: "0.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 0
                      product_price_in_cents: 0
                      product_version_number: 1
                      payment_type: null
                      referral_code: d3pw7f
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      reason_code: null
                      automatically_resume_at: null
                      current_billing_amount_in_cents: 10000
                      customer:
                        id: 17780587
                        first_name: Catie
                        last_name: Test
                        organization: "Acme, Inc."
                        email: catie@example.com
                        created_at: "2017-06-27T13:01:05-05:00"
                        updated_at: "2017-06-30T09:23:10-05:00"
                        reference: 123ABC
                        address: 123 Anywhere Street
                        address_2: "Apartment #10"
                        city: Los Angeles
                        state: CA
                        zip: "90210"
                        country: US
                        phone: 555-555-5555
                        portal_invite_last_sent_at: "2017-06-27T13:45:16-05:00"
                        portal_invite_last_accepted_at: null
                        verified: true
                        portal_customer_created_at: "2017-06-27T13:01:08-05:00"
                        cc_emails: support@example.com
                        tax_exempt: true
                      product:
                        id: 4470347
                        name: Zero Dollar Product
                        handle: zero-dollar-product
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2017-03-23T10:54:12-05:00"
                        updated_at: "2017-04-20T15:18:46-05:00"
                        price_in_cents: 0
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: false
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        tax_code: ""
                        initial_charge_after_trial: false
                        version_number: 1
                        update_return_params: ""
                        product_family:
                          id: 997233
                          name: Acme Products
                          description: ""
                          handle: acme-products
                          accounting_code: null
                        public_signup_pages:
                          - id: 316810
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "Only subscriptions that are on hold can be resumed."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: resumeSubscription
      description: "Resume a paused (on-hold) subscription. If the normal next renewal date has not passed, the subscription will return to active and will renew on that date.  Otherwise, it will behave like a reactivation, setting the billing date to 'now' and charging the subscriber."
      parameters:
        - schema:
            $ref: "../components/schemas/Resumption-Charge.yaml"
          in: query
          name: "calendar_billing['resumption_charge']"
          description: (For calendar billing subscriptions only) The way that the resumed subscription's charge should be handled
  "/subscriptions/{subscription_id}/hold.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Hold / Pause Subscription
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 18220670
                      state: on_hold
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2017-06-27T13:45:15-05:00"
                      created_at: "2017-06-27T13:45:13-05:00"
                      updated_at: "2017-06-30T09:26:50-05:00"
                      expires_at: null
                      balance_in_cents: 10000
                      current_period_ends_at: "2017-06-30T12:00:00-05:00"
                      next_assessment_at: "2017-06-30T12:00:00-05:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: automatic
                      snap_day: end
                      cancellation_method: null
                      current_period_started_at: "2017-06-27T13:45:13-05:00"
                      previous_state: active
                      signup_payment_id: 191819284
                      signup_revenue: "0.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 0
                      product_price_in_cents: 0
                      product_version_number: 1
                      payment_type: null
                      referral_code: d3pw7f
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      reason_code: null
                      automatically_resume_at: null
                      current_billing_amount_in_cents: 10000
                      customer:
                        id: 17780587
                        first_name: Catie
                        last_name: Test
                        organization: "Acme, Inc."
                        email: catie@example.com
                        created_at: "2017-06-27T13:01:05-05:00"
                        updated_at: "2017-06-30T09:23:10-05:00"
                        reference: 123ABC
                        address: 123 Anywhere Street
                        address_2: "Apartment #10"
                        city: Los Angeles
                        state: CA
                        zip: "90210"
                        country: US
                        phone: 555-555-5555
                        portal_invite_last_sent_at: "2017-06-27T13:45:16-05:00"
                        portal_invite_last_accepted_at: null
                        verified: true
                        portal_customer_created_at: "2017-06-27T13:01:08-05:00"
                        cc_emails: support@example.com
                        tax_exempt: true
                      product:
                        id: 4470347
                        name: Zero Dollar Product
                        handle: zero-dollar-product
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2017-03-23T10:54:12-05:00"
                        updated_at: "2017-04-20T15:18:46-05:00"
                        price_in_cents: 0
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: false
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        tax_code: ""
                        initial_charge_after_trial: false
                        version_number: 1
                        update_return_params: ""
                        product_family:
                          id: 997233
                          name: Acme Products
                          description: ""
                          handle: acme-products
                          accounting_code: null
                        public_signup_pages:
                          - id: 316810
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - This subscription is not eligible to be put on hold.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: pauseSubscription
      description: |-
        This will place the subscription in the on_hold state and it will not renew.

        ## Limitations

        You may not place a subscription on hold if the `next_billing` date is within 24 hours.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Pause-Request.yaml"
            examples:
              Example:
                value:
                  hold:
                    automatically_resume_at: "2017-05-25T11:25:00Z"
    put:
      summary: Update Automatic Subscription Resumption
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 20359140
                      state: on_hold
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2018-01-05T17:15:50-06:00"
                      created_at: "2018-01-05T17:15:49-06:00"
                      updated_at: "2018-01-09T10:26:14-06:00"
                      expires_at: null
                      balance_in_cents: 0
                      current_period_ends_at: "2023-01-05T17:15:00-06:00"
                      next_assessment_at: "2023-01-05T17:15:00-06:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: automatic
                      snap_day: null
                      cancellation_method: null
                      current_period_started_at: "2018-01-05T17:15:49-06:00"
                      previous_state: active
                      signup_payment_id: 219829722
                      signup_revenue: "100.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 10009991
                      product_price_in_cents: 10000
                      product_version_number: 1
                      payment_type: credit_card
                      referral_code: 8y7jqr
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      reason_code: null
                      automatically_resume_at: "2019-01-20T00:00:00-06:00"
                      coupon_codes: []
                      customer:
                        id: 19948683
                        first_name: Vanessa
                        last_name: Test
                        organization: ""
                        email: vanessa@example.com
                        created_at: "2018-01-05T17:15:49-06:00"
                        updated_at: "2018-01-05T17:15:51-06:00"
                        reference: null
                        address: 123 Anywhere Ln
                        address_2: ""
                        city: Boston
                        state: MA
                        zip: "02120"
                        country: US
                        phone: 555-555-1212
                        portal_invite_last_sent_at: "2018-01-05T17:15:51-06:00"
                        portal_invite_last_accepted_at: null
                        verified: null
                        portal_customer_created_at: "2018-01-05T17:15:51-06:00"
                        cc_emails: null
                        tax_exempt: false
                      product:
                        id: 4535643
                        name: Annual Product
                        handle: annual-product
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2017-08-25T10:25:31-05:00"
                        updated_at: "2017-08-25T10:25:31-05:00"
                        price_in_cents: 10000
                        interval: 12
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: true
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        tax_code: ""
                        initial_charge_after_trial: false
                        version_number: 1
                        update_return_params: ""
                        product_family:
                          id: 1025627
                          name: Acme Products
                          description: ""
                          handle: acme-products
                          accounting_code: null
                        public_signup_pages: []
                      credit_card:
                        id: 13826563
                        first_name: Bomb 3
                        last_name: Test
                        masked_card_number: XXXX-XXXX-XXXX-1
                        card_type: bogus
                        expiration_month: 1
                        expiration_year: 2028
                        customer_id: 19948683
                        current_vault: bogus
                        vault_token: "1"
                        billing_address: 123 Anywhere Lane
                        billing_city: Boston
                        billing_state: Ma
                        billing_zip: "02120"
                        billing_country: US
                        customer_vault_token: null
                        billing_address_2: ""
                        payment_type: credit_card
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example-1:
                  value:
                    errors:
                      - "Subscription is not currently on hold."
                Example-2:
                  value:
                    errors:
                      - "Automatic resume date: must be at least 24 hours in the future."
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateAutomaticSubscriptionResumption
      description: |-
        Once a subscription has been paused / put on hold, you can update the date which was specified to automatically resume the subscription.

        To update a subscription's resume date, use this method to change or update the `automatically_resume_at` date.

        ### Remove the resume date

        Alternately, you can change the `automatically_resume_at` to `null` if you would like the subscription to not have a resume date.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Pause-Request.yaml"
            examples:
              Example:
                value:
                  hold:
                    automatically_resume_at: "2019-01-20T00:00:00"
  "/subscriptions/{subscription_id}/reactivate.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    put:
      summary: Reactivate Subscription
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 18220670
                      state: active
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2017-06-27T13:45:15-05:00"
                      created_at: "2017-06-27T13:45:13-05:00"
                      updated_at: "2017-06-30T09:26:50-05:00"
                      expires_at: null
                      balance_in_cents: 10000
                      current_period_ends_at: "2017-06-30T12:00:00-05:00"
                      next_assessment_at: "2017-06-30T12:00:00-05:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: automatic
                      snap_day: end
                      cancellation_method: null
                      current_period_started_at: "2017-06-27T13:45:13-05:00"
                      previous_state: active
                      signup_payment_id: 191819284
                      signup_revenue: "0.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 0
                      product_price_in_cents: 0
                      product_version_number: 1
                      payment_type: null
                      referral_code: d3pw7f
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      reason_code: null
                      automatically_resume_at: null
                      current_billing_amount_in_cents: 10000
                      customer:
                        id: 17780587
                        first_name: Catie
                        last_name: Test
                        organization: "Acme, Inc."
                        email: catie@example.com
                        created_at: "2017-06-27T13:01:05-05:00"
                        updated_at: "2017-06-30T09:23:10-05:00"
                        reference: 123ABC
                        address: 123 Anywhere Street
                        address_2: "Apartment #10"
                        city: Los Angeles
                        state: CA
                        zip: "90210"
                        country: US
                        phone: 555-555-5555
                        portal_invite_last_sent_at: "2017-06-27T13:45:16-05:00"
                        portal_invite_last_accepted_at: null
                        verified: true
                        portal_customer_created_at: "2017-06-27T13:01:08-05:00"
                        cc_emails: support@example.com
                        tax_exempt: true
                        vat_number: "012345678"
                      product:
                        id: 4470347
                        name: Zero Dollar Product
                        handle: zero-dollar-product
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2017-03-23T10:54:12-05:00"
                        updated_at: "2017-04-20T15:18:46-05:00"
                        price_in_cents: 0
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: false
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        tax_code: ""
                        initial_charge_after_trial: false
                        version_number: 1
                        update_return_params: ""
                        product_family:
                          id: 997233
                          name: Acme Products
                          description: ""
                          handle: acme-products
                          accounting_code: null
                        public_signup_pages:
                          - id: 316810
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - 'Cannot reactivate a subscription that is not marked "Canceled", "Unpaid", or "Trial Ended".'
                      - "Request was 'resume only', but this subscription cannot be resumed."
                      - The credit card on file could not be charged.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: reactivateSubscription
      description: |-
        Chargify offers the ability to reactivate a previously canceled subscription. For details on how the reactivation works, and how to reactivate subscriptions through the application, see [reactivation](https://chargify.zendesk.com/hc/en-us/articles/4407898737691).

        **Please note: The term
        "resume" is used also during another process in Chargify. This occurs when an on-hold subscription is "resumed". This returns the subscription to an active state.**

        + The response returns the subscription object in the `active` or `trialing` state.
        + The `canceled_at` and `cancellation_message` fields do not have values.
        + The method works for "Canceled" or "Trial Ended" subscriptions.
        + It will not work for items not marked as "Canceled", "Unpaid", or "Trial Ended".

        ## Resume the current billing period for a subscription

        A subscription is considered "resumable" if you are attempting to reactivate within the billing period the subscription was canceled in.

        A resumed subscription's billing date remains the same as before it was canceled. In other words, it does not start a new billing period. Payment may or may not be collected for a resumed subscription, depending on whether or not the subscription had a balance when it was canceled (for example, if it was canceled because of dunning).

        Consider a subscription which was created on June 1st, and would renew on July 1st. The subscription is then canceled on June 15.

        If a reactivation with `resume: true` were attempted _before_ what would have been the next billing date of July 1st, then Chargify would resume the subscription.

        If a reactivation with `resume: true` were attempted _after_ what would have been the next billing date of July 1st, then Chargify would not resume the subscription, and instead it would be reactivated with a new billing period.

        | Canceled | Reactivation | Resumable? |
        |---|---|---|
        | Jun 15 | June 28 | Yes |
        | Jun 15 | July 2 | No |

        ## Reactivation Scenarios

        ### Reactivating Canceled Subscription While Preserving Balance

        + Given you have a product that costs $20
        + Given you have a canceled subscription to the $20 product
            + 1 charge should exist for $20
            + 1 payment should exist for $20
        + When the subscription has canceled due to dunning, it retained a negative balance of $20

        #### Results

        The resulting charges upon reactivation will be:
        + 1 charge for $20 for the new product
        + 1 charge for $20 for the balance due
        + Total charges = $40

        + The subscription will transition to active
        + The subscription balance will be zero

        ### Reactivating a Canceled Subscription With Coupon

        + Given you have a canceled subscription
        + It has no current period defined
        + You have a coupon code "EARLYBIRD"
        + The coupon is set to recur for 6 periods

        PUT request sent to:
        `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?coupon_code=EARLYBIRD`

        #### Results

        + The subscription will transition to active
        + The subscription should have applied a coupon with code "EARLYBIRD"

        ### Reactivating Canceled Subscription With a Trial, Without the include_trial Flag

        + Given you have a canceled subscription
        + The product associated with the subscription has a trial

        + PUT request to
        `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json`


        #### Results
        + The subscription will transition to active

        ### Reactivating Canceled Subscription With Trial, With the include_trial Flag

        + Given you have a canceled subscription
        + The product associated with the subscription has a trial

        + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?include_trial=1`


        #### Results

        + The subscription will transition to trialing

        ### Reactivating Trial Ended Subscription

        + Given you have a trial_ended subscription
        + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json`

        #### Results

        + The subscription will transition to active

        ### Resuming a Canceled Subscription

        + Given you have a `canceled` subscription and it is resumable
        + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

        #### Results

        + The subscription will transition to active
        + The next billing date should not have changed

        ### Attempting to resume a subscription which is not resumable

        + Given you have a `canceled` subscription, and it is not resumable
        + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

        #### Results

        + The subscription will transition to active, with a new billing period.

        ### Attempting to resume but not reactivate a subscription which is not resumable

        + Given you have a `canceled` subscription, and it is not resumable
        + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume[require_resume]=true`
        + The response status should be "422 UNPROCESSABLE ENTITY"
        + The subscription should be canceled with the following response
        ```
          {
            "errors": ["Request was 'resume only', but this subscription cannot be resumed."]
          }
        ```

        #### Results

        + The subscription should remain `canceled`
        + The next billing date should not have changed

        ### Resuming Subscription Which Was Trialing

        + Given you have a `trial_ended` subscription, and it is resumable
        + And the subscription was canceled in the middle of a trial
        + And there is still time left on the trial
        + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

        #### Results

        + The subscription will transition to trialing
        + The next billing date should not have changed

        ### Resuming Subscription Which Was trial_ended

        + Given you have a `trial_ended` subscription, and it is resumable
        + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

        #### Results

        + The subscription will transition to active
        + The next billing date should not have changed
        + Any product-related charges should have been collected
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Reactivate-Subscription-Request.yaml"
            examples:
              Example:
                value:
                  calendar_billing:
                    reactivation_charge: prorated
                  include_trial: true
                  preserve_balance: true
                  coupon_code: 10OFF
                  use_credits_and_prepayments: true
                  resume: true
  "/subscriptions/{subscription_id}/migrations.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Migrate Subscription Product
      tags:
        - Subscription Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 15054201
                      state: trialing
                      trial_started_at: "2016-11-03T13:43:36-04:00"
                      trial_ended_at: "2016-11-10T12:43:36-05:00"
                      activated_at: "2016-11-02T10:20:57-04:00"
                      created_at: "2016-11-02T10:20:55-04:00"
                      updated_at: "2016-11-03T13:43:36-04:00"
                      expires_at: null
                      balance_in_cents: -13989
                      current_period_ends_at: "2016-11-10T12:43:36-05:00"
                      next_assessment_at: "2016-11-10T12:43:36-05:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: automatic
                      snap_day: null
                      cancellation_method: null
                      current_period_started_at: "2016-11-03T13:43:35-04:00"
                      previous_state: active
                      signup_payment_id: 160680121
                      signup_revenue: "0.00"
                      delayed_cancel_at: null
                      coupon_code: null
                      total_revenue_in_cents: 14000
                      product_price_in_cents: 1000
                      product_version_number: 6
                      payment_type: credit_card
                      referral_code: ghnhvy
                      coupon_use_count: null
                      coupon_uses_allowed: null
                      customer:
                        id: 14543792
                        first_name: Frankie
                        last_name: Test
                        organization: null
                        email: testfrankie111@test.com
                        created_at: "2016-11-02T10:20:55-04:00"
                        updated_at: "2016-11-02T10:20:58-04:00"
                        reference: null
                        address: null
                        address_2: null
                        city: null
                        state: null
                        zip: null
                        country: null
                        phone: "5555551212"
                        portal_invite_last_sent_at: "2016-11-02T10:20:58-04:00"
                        portal_invite_last_accepted_at: null
                        verified: false
                        portal_customer_created_at: "2016-11-02T10:20:58-04:00"
                        cc_emails: null
                      product:
                        id: 3861800
                        name: Trial Product
                        handle: trial-product
                        description: Trial period with payment expected at end of trial.
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2016-07-08T09:53:55-04:00"
                        updated_at: "2016-09-05T13:00:36-04:00"
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: 0
                        trial_interval: 7
                        trial_interval_unit: day
                        archived_at: null
                        require_credit_card: true
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        initial_charge_after_trial: false
                        version_number: 6
                        update_return_params: ""
                        product_family:
                          id: 527890
                          name: Acme Projects
                          description: ""
                          handle: billing-plans
                          accounting_code: null
                        public_signup_pages:
                          - id: 294791
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargify.com/subscribe/xv52yrcc3byx/trial-product"
                      credit_card:
                        id: 10088716
                        first_name: F
                        last_name: NB
                        masked_card_number: XXXX-XXXX-XXXX-1
                        card_type: bogus
                        expiration_month: 1
                        expiration_year: 2017
                        customer_id: 14543792
                        current_vault: bogus
                        vault_token: "1"
                        billing_address: 123 Montana Way
                        billing_city: Billings
                        billing_state: MT
                        billing_zip: "59101"
                        billing_country: US
                        customer_vault_token: null
                        billing_address_2: Apt. 10
                        payment_type: credit_card
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - No credit card was on file for the $200.00 balance
                      - This subscription is not eligible for a prorated migration
                      - Invalid Product
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: migrateSubscriptionProduct
      description: |-
        In order to create a migration, you must pass the `product_id` or `product_handle` in the object when you send a POST request. You may also pass either a `product_price_point_id` or `product_price_point_handle` to choose which price point the subscription is moved to. If no price point identifier is passed the subscription will be moved to the products default price point. The response will be the updated subscription.

        ## Valid Subscriptions

        Subscriptions should be in the `active` or `trialing` state in order to be migrated.

        (For backwards compatibility reasons, it is possible to migrate a subscription that is in the `trial_ended` state via the API, however this is not recommended.  Since `trial_ended` is an end-of-life state, the subscription should be canceled, the product changed, and then the subscription can be reactivated.)

        ## Migrations Documentation

        Full documentation on how to record Migrations in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407898373531).

        ## Failed Migrations

        One of the most common ways that a migration can fail is when the attempt is made to migrate a subscription to it's current product. Please be aware of this issue!

        ## Migration 3D Secure - Stripe

        It may happen that a payment needs 3D Secure Authentication when the subscription is migrated to a new product; this is referred to in our help docs as a [post-authentication flow](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405177432077#psd2-flows-pre-authentication-and-post-authentication). The server returns `422 Unprocessable Entity` in this case with the following response:

        ```json
        {
          "errors": [
            "Your card was declined. This transaction requires 3D secure authentication."
          ],
          "gateway_payment_id": "pi_1F0aGoJ2UDb3Q4av7zU3sHPh",
          "description": "This card requires 3D secure authentication. Redirect the customer to the URL from the action_link attribute to authenticate. Attach callback_url param to this URL if you want to be notified about the result of 3D Secure authentication. Attach redirect_url param to this URL if you want to redirect a customer back to your page after 3D Secure authentication. Example: https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com will do a POST request to https://localhost:4000 after payment is authenticated and will redirect a customer to https://yourpage.com after 3DS authentication.",
          "action_link": "http://acme.chargify.com/3d-secure/pi_1F0aGoJ2UDb3Q4av7zU3sHPh?one_time_token_id=242"
        }
        ```

        To let the customer go through 3D Secure Authentication, they need to be redirected to the URL specified in `action_link`.
        Optionally, you can specify `callback_url` parameter in the `action_link` URL if you’d like to be notified about the result of 3D Secure Authentication. The `callback_url` will return the following information:

        - whether the authentication was successful (`success`)
        - the gateway ID for the payment (`gateway_payment_id`)
        - the subscription ID (`subscription_id`)

        Lastly, you can also specify a `redirect_url` within the `action_link` URL if you’d like to redirect a customer back to your site.

        It is not possible to use `action_link` in an iframe inside a custom application. You have to redirect the customer directly to the `action_link`, then, to be notified about the result, use `redirect_url` or `callback_url`.

        The final URL that you send a customer to to complete 3D Secure may resemble the following, where the first half is the `action_link` and the second half contains a `redirect_url` and `callback_url`: `https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com`

        ### Example Redirect Flow

        You may wish to redirect customers to different pages depending on whether their SCA was performed successfully. Here's an example flow to use as a reference:

        1. Create a migration via API; it requires 3DS
        2. You receive a `gateway_payment_id` in the `action_link` along other params in the response.
        3. Use this `gateway_payment_id` to, for example, connect with your internal resources or generate a session_id
        4. Include 1 of those attributes inside the `callback_url` and `redirect_url` to be aware which “session” this applies to
        5. Redirect the customer to the `action_link` with `callback_url` and `redirect_url` applied
        6. After the customer finishes 3DS authentication, we let you know the result by making a request to applied `callback_url`.
        7. After that, we redirect the customer to the `redirect_url`; at this point the result of authentication is known
        8. Optionally, you can use the applied "msg" param in the `redirect_url` to determine whether it was successful or not.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Subscription-Product-Migration-Request.yaml"
            examples:
              Example:
                value:
                  migration:
                    product_id: 3801242
                    include_trial: false
                    include_initial_charge: false
                    include_coupons: true
                    preserve_period: true
  "/subscriptions/{subscription_id}/migrations/preview.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Preview Subscription Product Migration
      tags:
        - Subscription Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Migration-Preview-Response.yaml"
              examples:
                Example:
                  value:
                    migration:
                      prorated_adjustment_in_cents: 0
                      charge_in_cents: 5000
                      payment_due_in_cents: 0
                      credit_applied_in_cents: 0
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Subscription must be active
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: previewSubscriptionProductMigration
      description: |-
        ## Previewing a future date
        It is also possible to preview the migration for a date in the future, as long as it's still within the subscription's current billing period, by passing a `proration_date` along with the request (eg: `"proration_date": "2020-12-18T18:25:43.511Z"`).

        This will calculate the prorated adjustment, charge, payment and credit applied values assuming the migration is done at that date in the future as opposed to right now.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Subscription-Migration-Preview-Request.yaml"
  "/subscriptions/{subscription_id}/override.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    put:
      summary: Override Subscription
      tags:
        - Subscriptions
      responses:
        "204":
          description: No Content
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
              examples:
                Example:
                  value:
                    error: "Current period starts at: must be a valid date/time"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: overrideSubscription
      description: |-
        This API endpoint allows you to set certain subscription fields that are usually managed for you automatically. Some of the fields can be set via the normal Subscriptions Update API, but others can only be set using this endpoint.

        This endpoint is provided for cases where you need to “align” Chargify data with data that happened in your system, perhaps before you started using Chargify. For example, you may choose to import your historical subscription data, and would like the activation and cancellation dates in Chargify to match your existing historical dates. Chargify does not backfill historical events (i.e. from the Events API), but some static data can be changed via this API.

        Why are some fields only settable from this endpoint, and not the normal subscription create and update endpoints? Because we want users of this endpoint to be aware that these fields are usually managed by Chargify, and using this API means **you are stepping out on your own.**

        Changing these fields will not affect any other attributes. For example, adding an expiration date will not affect the next assessment date on the subscription.

        If you regularly need to override the current_period_starts_at for new subscriptions, this can also be accomplished by setting both `previous_billing_at` and `next_billing_at` at subscription creation. See the documentation on [Importing Subscriptions](./b3A6MTQxMDgzODg-create-subscription#subscriptions-import) for more information.

        ## Limitations

        When passing `current_period_starts_at` some validations are made:

        1. The subscription needs to be unbilled (no statements or invoices).
        2. The value passed must be a valid date/time. We recommend using the iso 8601 format.
        3. The value passed must be before the current date/time.

        If unpermitted parameters are sent, a 400 HTTP response is sent along with a string giving the reason for the problem.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Override-Subscription-Request.yaml"
            examples:
              Example:
                value:
                  subscription:
                    activated_at: "1999-12-01T10:28:34-05:00"
                    canceled_at: "2000-12-31T10:28:34-05:00"
                    cancellation_message: Original cancellation in 2000
                    expires_at: "2001-07-15T10:28:34-05:00"
        description: Only these fields are available to be set.
  "/subscriptions/{subscription_id}/delayed_cancel.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Initiate Delayed Cancellation
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Delayed-Cancellation-Response.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: initiateDelayedCancellation
      description: |-
        Chargify offers the ability to cancel a subscription at the end of the current billing period. This period is set by its current product.

        Requesting to cancel the subscription at the end of the period sets the `cancel_at_end_of_period` flag to true.

        Note that you cannot set `cancel_at_end_of_period` at subscription creation, or if the subscription is past due.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Cancellation-Request.yaml"
    delete:
      summary: Cancel Delayed Cancellation
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Delayed-Cancellation-Response.yaml"
              examples:
                Example:
                  value:
                    message: This subscription will no longer be canceled
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: cancelDelayedCancellation
      description: |-
        Removing the delayed cancellation on a subscription will ensure that it doesn't get canceled at the end of the period that it is in. The request will reset the `cancel_at_end_of_period` flag to `false`.

        This endpoint is idempotent. If the subscription was not set to cancel in the future, removing the delayed cancellation has no effect and the call will be successful.
  "/subscriptions/{subscription_id}/cancel_dunning.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Cancel Dunning
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
      operationId: cancelDunning
      description: "If a subscription is currently in dunning, the subscription will be set to active and the active Dunner will be resolved."
  "/subscriptions/{subscription_id}/renewals/preview.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Preview Renewal
      tags:
        - Subscription Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Renewal-Preview-Response.yaml"
              examples:
                Example:
                  value:
                    renewal_preview:
                      next_assessment_at: "2017-03-13T12:50:55-04:00"
                      subtotal_in_cents: 6000
                      total_tax_in_cents: 0
                      total_discount_in_cents: 0
                      total_in_cents: 6000
                      existing_balance_in_cents: 0
                      total_amount_due_in_cents: 6000
                      uncalculated_taxes: false
                      line_items:
                        - transaction_type: charge
                          kind: baseline
                          amount_in_cents: 5000
                          memo: Gold Product (03/13/2017 - 04/13/2017)
                          discount_amount_in_cents: 0
                          taxable_amount_in_cents: 0
                          product_id: 1
                          product_handle: gold-product
                          product_name: Gold Product
                          period_range_start: "01/10/2024"
                          period_range_end: "02/10/2024"
                        - transaction_type: charge
                          kind: quantity_based_component
                          amount_in_cents: 1000
                          memo: "Quantity Component: 10 Quantity Components"
                          discount_amount_in_cents: 0
                          taxable_amount_in_cents: 0
                          component_id: 104
                          component_handle: quantity-component
                          component_name: Quantity Component
                          period_range_start: "01/10/2024"
                          period_range_end: "02/10/2024"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Couldn't find Component by handle:unknown
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: previewRenewal
      description: |-
        The Chargify API allows you to preview a renewal by posting to the renewals endpoint. Renewal Preview is an object representing a subscription’s next assessment. You can retrieve it to see a snapshot of how much your customer will be charged on their next renewal.

        The "Next Billing" amount and "Next Billing" date are already represented in the UI on each Subscriber's Summary. For more information, please see our documentation [here](https://chargify.zendesk.com/hc/en-us/articles/4407884887835#next-billing).

        ## Optional Component Fields

        This endpoint is particularly useful due to the fact that it will return the computed billing amount for the base product and the components which are in use by a subscriber.

        By default, the preview will include billing details for all components _at their **current** quantities_. This means:

        * Current `allocated_quantity` for quantity-based components
        * Current enabled/disabled status for on/off components
        * Current metered usage `unit_balance` for metered components
        * Current metric quantity value for events recorded thus far for events-based components

        In the above statements, "current" means the quantity or value as of the call to the renewal preview endpoint. We do not predict end-of-period values for components, so metered or events-based usage may be less than it will eventually be at the end of the period.

        Optionally, **you may provide your own custom quantities** for any component to see a billing preview for non-current quantities. This is accomplished by sending a request body with data under the `components` key. See the request body documentation below.

        ## Subscription Side Effects

        You can request a `POST` to obtain this data from the endpoint without any side effects. Plain and simple, this will preview data, not log any changes against a subscription.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Renewal-Preview-Request.yaml"
            examples:
              Example:
                value:
                  components:
                    - component_id: 10708
                      quantity: 10000
                    - component_id: "handle:small-instance-hours"
                      quantity: 10000
                      price_point_id: 8712
                    - component_id: "handle:large-instance-hours"
                      quantity: 100
                      price_point_id: "handle:startup-pricing"
        description: ""
  "/subscriptions/{subscription_id}/invoices.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Create Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice-Response.yaml"
              examples:
                Example:
                  value:
                    invoice:
                      uid: inv_98nbmb93gxjz8
                      site_id: 5
                      customer_id: 13
                      subscription_id: 17
                      number: "1"
                      sequence_number: 1
                      issue_date: "2020-12-02"
                      due_date: "2020-12-02"
                      paid_date: null
                      status: open
                      collection_method: remittance
                      payment_instructions: ""
                      currency: USD
                      consolidation_level: none
                      parent_invoice_uid: null
                      parent_invoice_number: null
                      group_primary_subscription_id: null
                      product_name: Digitized discrete initiative
                      product_family_name: Networked bottom-line orchestration
                      role: adhoc
                      seller:
                        name: "Steuber, West and Hegmann 1"
                        address:
                          street: null
                          line2: null
                          city: null
                          state: null
                          zip: null
                          country: null
                        phone: (766) 316-0492
                      customer:
                        chargify_id: 13
                        first_name: Dean
                        last_name: Adams
                        organization: null
                        email: brandi1@example.com
                        vat_number: null
                        reference: null
                      memo: ""
                      billing_address:
                        street: null
                        line2: null
                        city: null
                        state: null
                        zip: null
                        country: null
                      shipping_address:
                        street: null
                        line2: null
                        city: null
                        state: null
                        zip: null
                        country: null
                      subtotal_amount: "1800.0"
                      discount_amount: "0.0"
                      tax_amount: "0.0"
                      total_amount: "1800.0"
                      credit_amount: "0.0"
                      paid_amount: "0.0"
                      refund_amount: "0.0"
                      due_amount: "1800.0"
                      line_items:
                        - uid: li_98nbmb9jgz84c
                          title: Some product
                          description: 12/02/2020 - 12/02/2020
                          quantity: "12.0"
                          unit_price: "150.0"
                          subtotal_amount: "1800.0"
                          discount_amount: "0.0"
                          tax_amount: "0.0"
                          total_amount: "1800.0"
                          tiered_unit_price: false
                          period_range_start: "2020-12-02"
                          period_range_end: "2020-12-02"
                          product_id: null
                          product_version: null
                          product_price_point_id: null
                          component_id: null
                          price_point_id: null
                      discounts: []
                      taxes: []
                      credits: []
                      payments: []
                      refunds: []
                      custom_fields: []
                      public_url: "https://www.test-chargifypay.com/invoice/inv_98nbmb93gxjz8?token=rmfmwvbdy4xmyw5f29j5gc6x"
        "201":
          description: Created
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      invoice:
                        - "can't be blank"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createInvoice
      description: |-
        This endpoint will allow you to create an ad hoc invoice.

        ### Basic Behavior

        You can create a basic invoice by sending an array of line items to this endpoint. Each line item, at a minimum, must include a title, a quantity and a unit price. Example:

        ```json
        {
          "invoice": {
            "line_items": [
              {
                "title": "A Product",
                "quantity": 12,
                "unit_price": "150.00"
              }
            ]
          }
        }
        ```

        ### Catalog items
        Instead of creating custom products like in above example, You can pass existing items like products, components.

        ```json
        {
          "invoice": {
            "line_items": [
              {
                "product_id": "handle:gold-product",
                "quantity": 2,
              }
            ]
          }
        }
        ```


        The price for each line item will be calculated as well as a total due amount for the invoice. Multiple line items can be sent.

        ### Line items types
        When defining line item, You can choose one of 3 types for one line item:
        #### Custom item
        Like in basic behavior example above, You can pass `title` and `unit_price` for custom item.
        #### Product id
        Product handle (with handle: prefix) or id from the scope of current subscription's site can be provided with `product_id`. By default `unit_price` is taken from product's default price point, but can be overwritten by passing `unit_price` or `product_price_point_id`. If `product_id` is used, following fields cannot be used: `title`, `component_id`.
        #### Component id
        Component handle (with handle: prefix) or id from the scope of current subscription's site can be provided with `component_id`. If `component_id` is used, following fields cannot be used: `title`, `product_id`. By default `unit_price` is taken from product's default price point, but can be overwritten by passing `unit_price` or `price_point_id`. At this moment price points are supportted only for quantity based, on/off and metered components. For prepaid and event based billing components `unit_price` is required.

        ### Coupons
        When creating ad hoc invoice, new discounts can be applied in following way:

        ```json
        {
          "invoice": {
            "line_items": [
              {
                "product_id": "handle:gold-product",
                "quantity": 1
              }
            ],
            "coupons": [
              {
                "code": "COUPONCODE",
                "percentage": 50.0
              }
            ]
          }
        }
        ```
        If You want to use existing coupon for discount creation, only `code` and optional `product_family_id` is needed

        ```json
        ...
         "coupons": [
              {
                "code": "FREESETUP",
                "product_family_id": 1
              }
          ]
        ...
        ```

        ### Coupon options
        #### Code
        Coupon `code` will be displayed on invoice discount section.
        Coupon code can only contain uppercase letters, numbers, and allowed special characters.
        Lowercase letters will be converted to uppercase. It can be used to select an existing coupon from the catalog, or as an ad hoc coupon when passed with `percentage` or `amount`.
        #### Percentage
        Coupon `percentage` can take values from 0 to 100 and up to 4 decimal places. It cannot be used with `amount`. Only for ad hoc coupons, will be ignored if `code` is used to select an existing coupon from the catalog.
        #### Amount
        Coupon `amount` takes number value. It cannot be used with `percentage`. Used only when not matching existing coupon by `code`.
        #### Description
        Optional `description` will be displayed with coupon `code`. Used only when not matching existing coupon by `code`.
        #### Product Family id
        Optional `product_family_id` handle (with handle: prefix) or id is used to match existing coupon within site, when codes are not unique.
        #### Compounding Strategy
        Optional `compounding_strategy` for percentage coupons, can take values `compound` or `full-price`.

        For amount coupons, discounts will be always calculated against the original item price, before other discounts are applied.

        `compound` strategy:
        Percentage-based discounts will be calculated against the remaining price, after prior discounts have been calculated. It is set by default.

        `full-price` strategy:
        Percentage-based discounts will always be calculated against the original item price, before other discounts are applied.

        ### Line Item Options

        #### Period Date Range

        A custom period date range can be defined for each line item with the `period_range_start` and `period_range_end` parameters. Dates must be sent in the `YYYY-MM-DD` format.
        `period_range_end` must be greater or equal `period_range_start`.

        #### Taxes

        The `taxable` parameter can be sent as `true` if taxes should be calculated for a specific line item. For this to work, the site should be configured to use and calculate taxes. Further, if the site uses Avalara for tax calculations, a `tax_code` parameter should also be sent. For existing catalog items: products/components taxes cannot be overwritten.

        #### Price Point
        Price point handle (with handle: prefix) or id from the scope of current subscription's site can be provided with `price_point_id` for components with `component_id` or `product_price_point_id` for products with `product_id` parameter. If price point is passed `unit_price` cannot be used. It can be used only with catalog items products and components.

        #### Description
        Optional `description` parameter, it will overwrite default generated description for line item.

        ### Invoice Options

        #### Issue Date

        By default, invoices will be created with a issue date set to today. `issue_date` parameter can be send to alter that. Only dates in the past can be send. `issue_date` should be send in `YYYY-MM-DD` format.

        #### Net Terms

        By default, invoices will be created with a due date matching the date of invoice creation. If a different due date is desired, the `net_terms` parameter can be sent indicating the number of days in advance the due date should be.

        #### Addresses

        The seller, shipping and billing addresses can be sent to override the site's defaults. Each address requires to send a `first_name` at a minimum in order to work. Please see below for the details on which parameters can be sent for each address object.

        #### Memo and Payment Instructions

        A custom memo can be sent with the `memo` parameter to override the site's default. Likewise, custom payment instructions can be sent with the `payment_instrucions` parameter.

        #### Status

        By default, invoices will be created with open status. Possible alternative is `draft`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Invoice-Request.yaml"
            examples:
              Minimal Invoice (Relies on site defaults):
                value:
                  invoice:
                    line_items:
                      - title: A Product
                        quantity: 12
                        unit_price: "150.00"
              Example:
                value:
                  invoice:
                    line_items:
                      - title: Widgets
                        quantity: 1
                        unit_price: "10.0"
                        taxable: true
                        tax_code: A1999
                        period_range_start: "2021-01-31"
                        period_range_end: "2021-02-28"
                    net_terms: 20
                    payment_instructions: Pay upon receipt
                    memo: This is a memo
                    seller_address:
                      first_name: string
                      last_name: string
                      phone: string
                      address: string
                      address_2: string
                      city: string
                      state: string
                      zip: string
                      country: string
                    billing_address:
                      first_name: string
                      last_name: string
                      phone: string
                      address: string
                      address_2: string
                      city: string
                      state: string
                      zip: string
                      country: string
                    shipping_address:
                      first_name: string
                      last_name: string
                      phone: string
                      address: string
                      address_2: string
                      city: string
                      state: string
                      zip: string
                      country: string
        description: ""
  "/subscriptions/{subscription_id}/prepayments.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Create Prepayment
      tags:
        - Subscription Invoice Account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Create-Prepayment-Response.yaml"
              examples:
                Example:
                  value:
                    prepayment:
                      id: 1
                      subscription_id: 1
                      amount_in_cents: 10000
                      memo: John Doe - Prepayment
                      created_at: "2020-07-31T05:52:32-04:00"
                      starting_balance_in_cents: 0
                      ending_balance_in_cents: -10000
      operationId: createPrepayment
      description: |
        ## Create Prepayment

        In order to specify a prepayment made against a subscription, specify the `amount, memo, details, method`.

        When the `method` specified is `"credit_card_on_file"`, the prepayment amount will be collected using the default credit card payment profile and applied to the prepayment account balance.  This is especially useful for manual replenishment of prepaid subscriptions.

        Please note that you **can't** pass `amount_in_cents`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Prepayment-Request.yaml"
            examples:
              Example:
                value:
                  prepayment:
                    amount: 100
                    details: John Doe signup for $100
                    memo: Signup for $100
                    method: check
    get:
      summary: List Prepayments
      tags:
        - Subscription Invoice Account
      operationId: listPrepayments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Prepayments-Response.yaml"
              examples:
                example-success-response:
                  value:
                    prepayments:
                      - id: 17
                        subscription_id: 3558750
                        amount_in_cents: 2000
                        remaining_amount_in_cents: 1100
                        refunded_amount_in_cents: 0
                        external: true
                        memo: test
                        details: test details
                        payment_type: cash
                        created_at: "2022-01-18T22:45:41+11:00"
        "404":
          description: Not Found
      description: This request will list a subscription's prepayments.
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          name: "filter[date_field]"
          description:
            "The type of filter you would like to apply to your search. created_at - Time when prepayment was created. application_at - Time when prepayment was applied to invoice.
            Use in query `filter[date_field]=created_at`."
        - schema:
            type: string
            format: date
            example: "2011-12-15"
          in: query
          name: "filter[start_date]"
          description:
            "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns prepayments with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified.
            Use in query `filter[start_date]=2011-12-15`."
        - schema:
            type: string
            format: date
            example: "2011-12-15"
          in: query
          name: "filter[end_date]"
          description:
            "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns prepayments with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified.
            Use in query `filter[end_date]=2011-12-15`."
  "/subscriptions/{subscription_id}/service_credits.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Issue Service Credit
      tags:
        - Subscription Invoice Account
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Service-Credit.yaml"
              examples:
                Example:
                  value:
                    id: 101
                    amount_in_cents: 1000
                    ending_balance_in_cents: 2000
                    entry_type: Credit
                    memo: Credit to group account
      operationId: issueServiceCredit
      description: Credit will be added to the subscription in the amount specified in the request body. The credit is subsequently applied to the next generated invoice.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Issue-Service-Credit-Request.yaml"
            examples:
              Example:
                value:
                  service_credit:
                    amount: "1"
                    memo: Courtesy credit
  "/subscriptions/{subscription_id}/service_credit_deductions.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Deduct Service Credit
      tags:
        - Subscription Invoice Account
      responses:
        "200":
          description: OK
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Amount cannot exceed current service credit account balance.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: deductServiceCredit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Deduct-Service-Credit-Request.yaml"
            examples:
              Example:
                value:
                  deduction:
                    amount: "1"
                    memo: Deduction
      description: Credit will be removed from the subscription in the amount specified in the request body. The credit amount being deducted must be equal to or less than the current credit balance.
  /subscription_groups/signup.json:
    post:
      operationId: signupWithSubscriptionGroup
      summary: Subscription Group Signup
      description: |-
        Create multiple subscriptions at once under the same customer and consolidate them into a subscription group.

        You must provide one and only one of the `payer_id`/`payer_reference`/`payer_attributes` for the customer attached to the group.

        You must provide one and only one of the `payment_profile_id`/`credit_card_attributes`/`bank_account_attributes` for the payment profile attached to the group.

        Only one of the `subscriptions` can have `"primary": true` attribute set.

        When passing product to a subscription you can use either `product_id` or `product_handle` or `offer_id`. You can also use `custom_price` instead.
      tags:
        - Subscription Groups
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Group-Signup-Response.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Subscription-Group-Signup-Error-Response.yaml"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Subscription-Group-Signup-Request.yaml"
            examples:
              Basic request:
                value:
                  subscription_group:
                    payment_profile_id: 123
                    payer_id: 123
                    subscriptions:
                      - product_id: 11
                        primary: true
                      - product_id: 12
                      - product_id: 13
              Create customer and payment profile in-place:
                value:
                  subscription_group:
                    payer_attributes:
                      first_name: John
                      last_name: Doe
                      email: john@example.com
                      organization: "Acme, Inc"
                    credit_card_attributes:
                      full_number: "4111111111111111"
                      expiration_month: "12"
                      expiration_year: "2031"
                    subscriptions:
                      - product_id: 123
                        primary: true
                      - product_handle: silver-plan
                      - product_id: 124
              Create credit card using Chargify.js token:
                value:
                  subscription_group:
                    payer_id: 123
                    credit_card_attributes:
                      chargify_token: tok_19gnjsa9433u9b22
                      last_four: "1111"
                      card_type: visa
                    subscriptions:
                      - product_id: 11
                        primary: true
                      - product_id: 12
                      - product_id: 13
              Create bank account using Chargify.js token:
                value:
                  subscription_group:
                    payer_id: 234
                    bank_account_attributes:
                      chargify_token: tok_19gnjsa9433u9b22
                    subscriptions:
                      - product_id: 11
                        primary: true
                      - product_id: 12
                      - product_id: 13
              Create group with subscription and customer metafields:
                value:
                  subscription_group:
                    payer_attributes:
                      first_name: John
                      last_name: Doe
                      email: john@example.com
                      organization: "Acme, Inc"
                      metafields:
                        win-over: ABCompany
                    credit_card_attributes:
                      full_number: "4111111111111111"
                      expiration_month: "12"
                      expiration_year: "2031"
                    subscriptions:
                      - product_id: 123
                        primary: true
                        metafields:
                          mrr: $99
                          discounted: "false"
                      - product_handle: silver-plan
                        metafields:
                          mrr: $49
                      - product_id: 124
              Create subscription with components:
                value:
                  subscription_group:
                    payment_profile_id: 123
                    payer_id: 123
                    subscriptions:
                      - product_id: 11
                        primary: true
                        components:
                          - component_id: 99
                            allocated_quantity: 10
                      - product_id: 12
                      - product_id: 13
              Create subscription with Custom Pricing:
                value:
                  subscription_group:
                    payment_profile_id: 123
                    payer_id: 123
                    subscriptions:
                      - product_id: 19
                        custom_price:
                          handle: custom-price
                          price_in_cents: 9900
                          interval: 1
                          interval_unit: month
                        primary: true
                      - product_id: 12
                        components:
                          - component_id: 29
                            allocated_quantity: 5
                            custom_price:
                              pricing_scheme: volume
                              prices:
                                - unit_price: "5"
                                  starting_quantity: "1"
                                  ending_quantity: "15"
                                - unit_price: "2"
                                  starting_quantity: "16"
                      - product_id: 13
    parameters: []
  /subscription_groups.json:
    post:
      summary: Create Subscription Group
      tags:
        - Subscription Groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Group-Response.yaml"
              examples:
                Example:
                  value:
                    subscription_group:
                      customer_id: 1
                      payment_profile:
                        id: 1
                        first_name: t
                        last_name: t
                        masked_card_number: XXXX-XXXX-XXXX-1
                      payment_collection_method: automatic
                      subscription_ids:
                        - 1
                        - 2
                      created_at: "2021-01-21T05:47:38-05:00"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-String-Error-Response.yaml"
              examples:
                Example:
                  value:
                    errors: Subscription is already in group
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createSubscriptionGroup
      description: Creates a subscription group with given members.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Subscription-Group-Request.yaml"
            examples:
              Example:
                value:
                  subscription_group:
                    subscription_id: 1
                    member_ids:
                      - 2
                      - 3
                      - 4
    get:
      summary: List Subscription Groups
      tags:
        - Subscription Groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Subscription-Groups-Response.yaml"
              examples:
                Example:
                  value:
                    subscription_groups:
                      - uid: grp_952mvqcnk53wq
                        scheme: 1
                        customer_id: 88498000
                        payment_profile_id: 93063018
                        subscription_ids:
                          - 42768907
                          - 82370782
                        primary_subscription_id: 69844395
                        next_assessment_at: "2021-05-05T16:00:21-04:00"
                        state: active
                        cancel_at_end_of_period: false
                        account_balances:
                          prepayments:
                            balance_in_cents: 0
                          service_credits:
                            balance_in_cents: 0
                          pending_discounts:
                            balance_in_cents: 0
                    meta:
                      current_page: 1
                      total_count: 1
      operationId: listSubscriptionGroups
      description: |-
        Returns an array of subscription groups for the site. The response is paginated and will return a `meta` key with pagination information.

        #### Account Balance Information

        Account balance information for the subscription groups is not returned by default. If this information is desired, the `include[]=account_balances` parameter must be provided with the request.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: string
          in: query
          name: include
          description: |-
            A list of additional information to include in the response. The following values are supported:

            - `account_balances`: Account balance information for the subscription groups. Use in query: `include[]=account_balances`
  "/subscription_groups/{uid}.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    get:
      summary: Read Subscription Group
      tags:
        - Subscription Groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Full-Subscription-Group-Response.yaml"
              examples:
                Example:
                  value:
                    uid: grp_939ktzq8v4477
                    scheme: 1
                    customer_id: 400
                    payment_profile_id: 567
                    subscription_ids:
                      - 101
                      - 102
                      - 103
                    primary_subscription_id: 101
                    next_assessment_at: "2020-08-01T14:00:00-05:00"
                    state: active
                    cancel_at_end_of_period: false
                    current_billing_amount_in_cents: 11500
                    customer:
                      first_name: Mark
                      last_name: Wannabewahlberg
                      organization: The Funky Bunch
                      email: markymark@example.com
                      reference: 4c92223b-bc16-4d0d-87ff-b177a89a2655
                    account_balances:
                      prepayments:
                        balance_in_cents: 0
                      service_credits:
                        balance_in_cents: 0
                      open_invoices:
                        balance_in_cents: 4400
                      pending_discounts:
                        balance_in_cents: 0
      operationId: readSubscriptionGroup
      description: |-
        Use this endpoint to find subscription group details.

        #### Current Billing Amount in Cents

        Current billing amount for the subscription group is not returned by default. If this information is desired, the `include[]=current_billing_amount_in_cents` parameter must be provided with the request.
    put:
      summary: Update Subscription Group Members
      tags:
        - Subscription Groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Group-Response.yaml"
              examples:
                Example:
                  value:
                    subscription_group:
                      customer_id: 1
                      payment_profile:
                        id: 1
                        first_name: t
                        last_name: t
                        masked_card_number: XXXX-XXXX-XXXX-1
                      payment_collection_method: automatic
                      subscription_ids:
                        - 1
                      created_at: "2021-01-21T05:47:38-05:00"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Subscription-Group-Update-Error-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      members:
                        - id: 10101
                          type: not_found
                          message: Subscription could not be found
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateSubscriptionGroupMembers
      description: |-
        Use this endpoint to update subscription group members.
        `"member_ids": []` should contain an array of both subscription IDs to set as group members and subscription IDs already present in the groups. Not including them will result in removing them from subscription group. To clean up members, just leave the array empty.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Subscription-Group-Request.yaml"
            examples:
              Example:
                value:
                  subscription_group:
                    member_ids:
                      - 1
                      - 2
                      - 3
    delete:
      summary: Delete Subscription Group
      tags:
        - Subscription Groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Delete-Subscription-Group-Response.yaml"
              examples:
                Example:
                  value:
                    uid: grp_99w5xp9y5xycy
                    deleted: true
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: deleteSubscriptionGroup
      description: |-
        Use this endpoint to delete subscription group.
        Only groups without members can be deleted
  /subscription_groups/lookup.json:
    get:
      summary: Find Subscription Group
      tags:
        - Subscription Groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Full-Subscription-Group-Response.yaml"
              examples:
                Example:
                  value:
                    uid: grp_939ktzq8v4477
                    scheme: 1
                    customer_id: 400
                    payment_profile_id: 567
                    subscription_ids:
                      - 101
                      - 102
                      - 103
                    primary_subscription_id: 101
                    next_assessment_at: "2020-08-01T14:00:00-05:00"
                    state: active
                    cancel_at_end_of_period: false
                    customer:
                      first_name: Mark
                      last_name: Wannabewahlberg
                      organization: The Funky Bunch
                      email: markymark@example.com
                      reference: 4c92223b-bc16-4d0d-87ff-b177a89a2655
                    account_balances:
                      prepayments:
                        balance_in_cents: 0
                      service_credits:
                        balance_in_cents: 0
                      open_invoices:
                        balance_in_cents: 4400
                      pending_discounts:
                        balance_in_cents: 0
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: findSubscriptionGroup
      description: |-
        Use this endpoint to find subscription group associated with subscription.

        If the subscription is not in a group endpoint will return 404 code.
      parameters:
        - schema:
            type: string
          in: query
          name: subscription_id
          required: true
          description: The Chargify id of the subscription associated with the subscription group
  "/subscription_groups/{uid}/cancel.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    post:
      summary: Cancel Grouped Subscriptions
      tags:
        - Subscription Group Status
      responses:
        "200":
          description: OK
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - One or more subscriptions are not on automatic billing
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: cancelSubscriptionsInGroup
      description: |-
        This endpoint will immediately cancel all subscriptions within the specified group. The group is identified by it's `uid` passed in the URL. To successfully cancel the group, the primary subscription must be on automatic billing. The group members as well must be on automatic billing or they must be prepaid.

        In order to cancel a subscription group while also charging for any unbilled usage on metered or prepaid components, the `charge_unbilled_usage=true` parameter must be included in the request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Cancel-Grouped-Subscriptions-Request.yaml"
            examples:
              Example:
                value:
                  charge_unbilled_usage: true
  "/subscription_groups/{uid}/delayed_cancel.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    post:
      summary: Initiate Delayed Group Cancellation
      tags:
        - Subscription Group Status
      responses:
        "200":
          description: OK
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Subscriptions group is in a past due state
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: initiateDelayedCancellationForGroup
      description: |-
        This endpoint will schedule all subscriptions within the specified group to be canceled at the end of their billing period. The group is identified by it's uid passed in the URL.

        All subscriptions in the group must be on automatic billing in order to successfully cancel them, and the group must not be in a "past_due" state.
    delete:
      summary: Cancel Delayed Group Cancellation
      tags:
        - Subscription Group Status
      responses:
        "200":
          description: OK
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Subscriptions group does not have a pending delayed cancellation
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: cancelDelayedCancellationForGroup
      description: Removing the delayed cancellation on a subscription group will ensure that the subscriptions do not get canceled at the end of the period. The request will reset the `cancel_at_end_of_period` flag to false on each member in the group.
  "/subscription_groups/{uid}/reactivate.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    post:
      summary: Reactivate / Resume Subscription Group
      tags:
        - Subscription Group Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Reactivate-Subscription-Group-Response.yaml"
              examples:
                Example:
                  value:
                    uid: grp_93wgm89cbjkw6
                    scheme: 1
                    customer_id: 1
                    payment_profile_id: 1
                    subscription_ids:
                      - 1
                      - 2
                    primary_subscription_id: 1
                    next_assessment_at: "2020-06-18T12:00:00-04:00"
                    state: active
                    cancel_at_end_of_period: false
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Must be inside the current billing period to resume this subscription group
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: reactivateSubscriptionGroup
      description: |-
        This endpoint will attempt to reactivate or resume a cancelled subscription group. Upon reactivation, any canceled invoices created after the beginning of the primary subscription's billing period will be reopened and payment will be attempted on them. If the subscription group is being reactivated (as opposed to resumed), new charges will also be assessed for the new billing period.

        Whether a subscription group is reactivated (a new billing period is created) or resumed (the current billing period is respected) will depend on the parameters that are sent with the request as well as the date of the request relative to the primary subscription's period.

        ## Reactivating within the current period

        If a subscription group is cancelled and reactivated within the primary subscription's current period, we can choose to either start a new billing period or maintain the existing one. If we want to maintain the existing billing period the `resume=true` option must be passed in request parameters.

        An exception to the above are subscriptions that are on calendar billing. These subscriptions cannot be reactivated within the current period. If the `resume=true` option is not passed the request will return an error.

        The `resume_members` option is ignored in this case. All eligible group members will be automatically resumed.


        ## Reactivating beyond the current period

        In this case, a subscription group can only be reactivated with a new billing period. If the `resume=true` option is passed it will be ignored.

        Member subscriptions can have billing periods that are longer than the primary (e.g. a monthly primary with annual group members). If the primary subscription in a group cannot be reactivated within the current period, but other group members can be, passing `resume_members=true` will resume the existing billing period for eligible group members. The primary subscription will begin a new billing period.

        For calendar billing subscriptions, the new billing period created will be a partial one, spanning from the date of reactivation to the next corresponding calendar renewal date.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Reactivate-Subscription-Group-Request.yaml"
            examples:
              Example:
                value:
                  resume: true
  "/subscription_groups/{uid}/payment_profiles/{payment_profile_id}.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
      - $ref: "../components/parameters/payment-profile-id-path.yaml"
    delete:
      summary: Delete Subscription Group Payment Profile
      responses:
        "204":
          description: No Content
      operationId: deleteSubscriptionGroupPaymentProfile
      description: |-
        This will delete a Payment Profile belonging to a Subscription Group.

        **Note**: If the Payment Profile belongs to multiple Subscription Groups and/or Subscriptions, it will be removed from all of them.
      tags:
        - Payment Profiles
  "/subscription_groups/{uid}/prepayments.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    post:
      summary: Create Subscription Group Prepayment
      tags:
        - Subscription Group Invoice Account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Group-Prepayment-Response.yaml"
              examples:
                Example:
                  value:
                    id: 6049554
                    amount_in_cents: 10000
                    ending_balance_in_cents: 5000
                    entry_type: Debit
                    memo: Debit from invoice account.
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Amount must be greater than 0
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createSubscriptionGroupPrepayment
      description: "A prepayment can be added for a subscription group identified by the group's `uid`. This endpoint requires a `amount`, `details`, `method`, and `memo`. On success, the prepayment will be added to the group's prepayment balance."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Subscription-Group-Prepayment-Request.yaml"
    get:
      summary: List Prepayments For Subscription Group
      tags:
        - Subscription Group Invoice Account
      operationId: listPrepaymentsForSubscriptionGroup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Subscription-Group-Prepayment-Response.yaml"
              examples:
                example-success-response:
                  value:
                    prepayments:
                      - prepayment:
                          id: 142
                          subscription_group_uid: grp_b4qhx3bvx72t8
                          amount_in_cents: 10000
                          remaining_amount_in_cents: 10000
                          details: test
                          external: true
                          memo: test
                          payment_type: cash
                          created_at: "2023-06-21T04:37:02-04:00"
        "404":
          description: Not Found
      security:
        - BasicAuth: []
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
        collectParameters: true
      parameters:
        - schema:
            $ref: "../components/schemas/List-Subscription-Group-Prepayment-Date-Field.yaml"
          in: query
          name: "filter[date_field]"
          description: |-
            The type of filter you would like to apply to your search.
            Use in query: `filter[date_field]=created_at`.
        - schema:
            type: string
            format: date
            example: "2011-12-15"
          in: query
          name: "filter[end_date]"
          description: |-
            The end date (format YYYY-MM-DD) with which to filter the date_field.
            Returns prepayments with a timestamp up to and including 11:59:59PM in your site's time zone on the date specified.
            Use in query: `filter[end_date]=2011-12-15`.
        - schema:
            type: string
            format: date
            example: "2011-12-15"
          in: query
          name: "filter[start_date]"
          description: |-
            The start date (format YYYY-MM-DD) with which to filter the date_field.
            Returns prepayments with a timestamp at or after midnight (12:00:00 AM) in your site's time zone on the date specified.
            Use in query: `filter[start_date]=2011-12-15`.
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
      description: This request will list a subscription group's prepayments.
  "/subscription_groups/{uid}/service_credits.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    post:
      summary: Issue Subscription Group Service Credit
      tags:
        - Subscription Group Invoice Account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Service-Credit-Response.yaml"
              examples:
                Example:
                  value:
                    service_credit:
                      id: 101
                      amount_in_cents: 1000
                      ending_balance_in_cents: 2000
                      entry_type: Credit
                      memo: Credit to group account
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Amount must be greater than 0
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: issueSubscriptionGroupServiceCredit
      description: Credit can be issued for a subscription group identified by the group's `uid`. Credit will be added to the group in the amount specified in the request body. The credit will be applied to group member invoices as they are generated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Issue-Service-Credit-Request.yaml"
            examples:
              Example:
                value:
                  service_credit:
                    amount: 10
                    memo: Credit the group account
  "/subscription_groups/{uid}/service_credit_deductions.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    post:
      summary: Deduct Subscription Group Service Credit
      tags:
        - Subscription Group Invoice Account
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Service-Credit.yaml"
              examples:
                Example:
                  value:
                    id: 100
                    amount_in_cents: 1000
                    ending_balance_in_cents: 0
                    entry_type: Debit
                    memo: Debit from group account
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Amount must be greater than 0
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: deductSubscriptionGroupServiceCredit
      description: Credit can be deducted for a subscription group identified by the group's `uid`. Credit will be deducted from the group in the amount specified in the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Deduct-Service-Credit-Request.yaml"
            examples:
              Example:
                value:
                  deduction:
                    amount: 10
                    memo: Deduct from group account
  /subscriptions/lookup.json:
    get:
      summary: Find Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
      operationId: findSubscription
      parameters:
        - schema:
            type: string
          in: query
          name: reference
          description: Subscription reference
      description: Use this endpoint to find a subscription by its reference.
  "/subscriptions/{subscription_id}/payment_profiles/{payment_profile_id}/change_payment_profile.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - $ref: "../components/parameters/payment-profile-id-path.yaml"
    post:
      summary: Change Subscription Default Payment Profile
      tags:
        - Payment Profiles
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Payment-Profile-Response.yaml"
              examples:
                Example:
                  value:
                    payment_profile:
                      id: 10211899
                      first_name: Amelia
                      last_name: Example
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 2
                      expiration_year: 2018
                      customer_id: 14399371
                      current_vault: bogus
                      vault_token: "1"
                      billing_address: ""
                      billing_city: ""
                      billing_state: ""
                      billing_zip: ""
                      billing_country: ""
                      customer_vault_token: null
                      billing_address_2: ""
                      payment_type: credit_card
                      site_gateway_setting_id: 1
                      gateway_handle: null
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - This is already the current payment profile
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: changeSubscriptionDefaultPaymentProfile
      description: |-
        This will change the default payment profile on the subscription to the existing payment profile with the id specified.

        You must elect to change the existing payment profile to a new payment profile ID in order to receive a satisfactory response from this endpoint.
  "/subscription_groups/{uid}/payment_profiles/{payment_profile_id}/change_payment_profile.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
      - $ref: "../components/parameters/payment-profile-id-path.yaml"
    post:
      summary: Change Subscription Group Default Payment Profile
      tags:
        - Payment Profiles
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Payment-Profile-Response.yaml"
              examples:
                Example:
                  value:
                    payment_profile:
                      id: 10211899
                      first_name: Amelia
                      last_name: Example
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 2
                      expiration_year: 2018
                      customer_id: 14399371
                      current_vault: bogus
                      vault_token: "1"
                      billing_address: ""
                      billing_city: ""
                      billing_state: ""
                      billing_zip: ""
                      billing_country: ""
                      customer_vault_token: null
                      billing_address_2: ""
                      payment_type: credit_card
                      site_gateway_setting_id: 1
                      gateway_handle: null
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - This is already the current payment profile
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: changeSubscriptionGroupDefaultPaymentProfile
      description: |-
        This will change the default payment profile on the subscription group to the existing payment profile with the id specified.

        You must elect to change the existing payment profile to a new payment profile ID in order to receive a satisfactory response from this endpoint.

        The new payment profile must belong to the subscription group's customer, otherwise you will receive an error.
  "/subscriptions/{subscription_id}/purge.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Purge Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
      operationId: purgeSubscription
      description: |-
        For sites in test mode, you may purge individual subscriptions.

        Provide the subscription ID in the url.  To confirm, supply the customer ID in the query string `ack` parameter. You may also delete the customer record and/or payment profiles by passing `cascade` parameters. For example, to delete just the customer record, the query params would be: `?ack={customer_id}&cascade[]=customer`

        If you need to remove subscriptions from a live site, please contact support to discuss your use case.

        ### Delete customer and payment profile

        The query params will be: `?ack={customer_id}&cascade[]=customer&cascade[]=payment_profile`
      parameters:
        - schema:
            type: integer
          in: query
          name: ack
          description: id of the customer.
          required: true
        - schema:
            type: array
            items:
              $ref: "../components/schemas/Subscription-Purge-Type.yaml"
            example:
              - customer
              - payment_profile
          in: query
          name: cascade[]
          style: form
          explode: true
          description: |-
            Options are "customer" or "payment_profile".
            Use in query: `cascade[]=customer&cascade[]=payment_profile`.
  "/subscriptions/{subscription_id}/prepaid_configurations.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Update Prepaid Subscription Configuration
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Prepaid-Configuration-Response.yaml"
              examples:
                Example:
                  value:
                    prepaid_configuration:
                      id: 55
                      initial_funding_amount_in_cents: 2500
                      auto_replenish: true
                      replenish_to_amount_in_cents: 50000
                      replenish_threshold_amount_in_cents: 10000
      operationId: updatePrepaidSubscriptionConfiguration
      description: Use this endpoint to update a subscription's prepaid configuration.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Upsert-Prepaid-Configuration-Request.yaml"
            examples:
              Example:
                value:
                  prepaid_configuration:
                    initial_funding_amount_in_cents: 50000
                    replenish_to_amount_in_cents: 50000
                    auto_replenish: true
                    replenish_threshold_amount_in_cents: 10000
  "/subscriptions/{subscription_id}/group.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Add Subscription to Group
      tags:
        - Subscription Groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Group-Response.yaml"
              examples:
                Example:
                  value:
                    subscription_group:
                      customer_id: 130690
                      payment_profile:
                        id: 32055
                        first_name: Marty
                        last_name: McFly
                        masked_card_number: XXXX-XXXX-XXXX-1111
                      subscription_ids:
                        - 32988
                        - 33060
                        - 32986
                      created_at: "2018-08-30T17:14:30-04:00"
      operationId: addSubscriptionToGroup
      description: |
        For sites making use of the [Relationship Billing](https://chargify.zendesk.com/hc/en-us/articles/4407737494171) and [Customer Hierarchy](https://chargify.zendesk.com/hc/en-us/articles/4407746683291) features, it is possible to add existing subscriptions to subscription groups.

        Passing `group` parameters with a `target` containing a `type` and optional `id` is all that's needed. When the `target` parameter specifies a `"customer"` or `"subscription"` that is already part of a hierarchy, the subscription will become a member of the customer's subscription group.  If the target customer or subscription is not part of a subscription group, a new group will be created and the subscription will become part of the group with the specified target customer set as the responsible payer for the group's subscriptions.

        **Please Note:** In order to add an existing subscription to a subscription group, it must belong to either the same customer record as the target, or be within the same customer hierarchy.

        Rather than specifying a customer, the `target` parameter could instead simply have a value of
        * `"self"` which indicates the subscription will be paid for not by some other customer, but by the subscribing customer,
        * `"parent"` which indicates the subscription will be paid for by the subscribing customer's parent within a customer hierarchy, or
        * `"eldest"` which indicates the subscription will be paid for by the root-level customer in the subscribing customer's hierarchy.

        To create a new subscription into a subscription group, please reference the following:
        [Create Subscription in a Subscription Group](https://developers.chargify.com/docs/api-docs/d571659cf0f24-create-subscription#subscription-in-a-subscription-group)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Add-To-Group-Request.yaml"
            examples:
              Example:
                value:
                  group:
                    target:
                      type: subscription
                      id: 32987
                    billing:
                      accrue: true
                      align_date: true
                      prorate: true
    delete:
      summary: Remove Subscription from Group
      tags:
        - Subscription Groups
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - You can not remove primary subscription when there are others in group
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: removeSubscriptionFromGroup
      description: "For sites making use of the [Relationship Billing](https://chargify.zendesk.com/hc/en-us/articles/4407737494171) and [Customer Hierarchy](https://chargify.zendesk.com/hc/en-us/articles/4407746683291) features, it is possible to remove existing subscription from subscription group."
  /subscriptions/preview.json:
    post:
      summary: Preview Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Preview-Response.yaml"
              examples:
                Example:
                  value:
                    subscription_preview:
                      current_billing_manifest:
                        line_items:
                          - transaction_type: charge
                            kind: baseline
                            amount_in_cents: 5000
                            memo: Gold Product (08/21/2018 - 09/21/2018)
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                            product_id: 1
                            product_handle: gold-product
                            product_name: Gold Product
                            period_range_start: "13 Oct 2023"
                            period_range_end: "13 Nov 2023"
                          - transaction_type: charge
                            kind: component
                            amount_in_cents: 28000
                            memo: "Component name: 14 Unit names"
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                            component_id: 462149
                            component_handle: handle
                            component_name: Component name
                          - transaction_type: charge
                            kind: component
                            amount_in_cents: 2000
                            memo: "Fractional Metered Components: 20.0 Fractional Metereds"
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                            component_id: 426665
                            component_handle: handle
                            component_name: Fractional Metered Components
                          - transaction_type: charge
                            kind: component
                            amount_in_cents: 0
                            memo: On/Off Component
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                            component_id: 426670
                            component_handle: handle
                            component_name: On/Off Component
                          - transaction_type: adjustment
                            kind: coupon
                            amount_in_cents: 0
                            memo: "Coupon: 1DOLLAR - You only get $1.00 off"
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                        total_in_cents: 35000
                        total_discount_in_cents: 0
                        total_tax_in_cents: 0
                        subtotal_in_cents: 35000
                        start_date: "2018-08-21T21:25:21Z"
                        end_date: "2018-09-21T21:25:21Z"
                        period_type: recurring
                        existing_balance_in_cents: 0
                      next_billing_manifest:
                        line_items:
                          - transaction_type: charge
                            kind: baseline
                            amount_in_cents: 5000
                            memo: Gold Product (09/21/2018 - 10/21/2018)
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                            product_id: 1
                            product_handle: gold-product
                            product_name: Gold Product
                          - transaction_type: charge
                            kind: component
                            amount_in_cents: 28000
                            memo: "Component name: 14 Unit names"
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                            component_id: 462149
                            component_handle: handle
                            component_name: Component name
                          - transaction_type: charge
                            kind: component
                            amount_in_cents: 0
                            memo: On/Off Component
                            discount_amount_in_cents: 0
                            taxable_amount_in_cents: 0
                            component_id: 426670
                            component_handle: handle
                            component_name: On/Off Component
                        total_in_cents: 33000
                        total_discount_in_cents: 0
                        total_tax_in_cents: 0
                        subtotal_in_cents: 33000
                        start_date: "2018-09-21T21:25:21Z"
                        end_date: "2018-10-21T21:25:21Z"
                        period_type: recurring
                        existing_balance_in_cents: 0
      operationId: previewSubscription
      description: |-
        The Chargify API allows you to preview a subscription by POSTing the same JSON or XML as for a subscription creation.

        The "Next Billing" amount and "Next Billing" date are represented in each Subscriber's Summary. For more information, please see our documentation [here](https://chargify.zendesk.com/hc/en-us/articles/4407884887835#next-billing).

        ## Side effects

        A subscription will not be created by sending a POST to this endpoint. It is meant to serve as a prediction.

        ## Taxable Subscriptions

        This endpoint will preview taxes applicable to a purchase. In order for taxes to be previewed, the following conditions must be met:

        + Taxes must be configured on the subscription
        + The preview must be for the purchase of a taxable product or component, or combination of the two.
        + The subscription payload must contain a full billing or shipping address in order to calculate tax

        For more information about creating taxable previews, please see our documentation guide on how to create [taxable subscriptions.](https://chargify.zendesk.com/hc/en-us/articles/4407904217755#creating-taxable-subscriptions)

        You do **not** need to include a card number to generate tax information when you are previewing a subscription. However, please note that when you actually want to create the subscription, you must include the credit card information if you want the billing address to be stored in Chargify. The billing address and the credit card information are stored together within the payment profile object. Also, you may not send a billing address to Chargify without payment profile information, as the address is stored on the card.

        You can pass shipping and billing addresses and still decide not to calculate taxes. To do that, pass `skip_billing_manifest_taxes: true` attribute.

        ## Non-taxable Subscriptions

        If you'd like to calculate subscriptions that do not include tax, please feel free to leave off the billing information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Subscription-Request.yaml"
            examples:
              Product Only:
                value:
                  subscription:
                    product_handle: gold-product
              With Components:
                value:
                  subscription:
                    product_handle: gold-product
                    coupon_code: 1DOLLAR
                    components:
                      - component_id: 462149
                        price_point_id: 200543
                        allocated_quantity: 14
                      - component_id: 426665
                        unit_balance: 20
                      - component_id: 426670
                        allocated_quantity: 1
              With Custom Taxes:
                value:
                  subscription:
                    product_handle: paid-annual-seats
                    customer_attributes:
                      address: 870 Massachusetts Ave
                      address_2: null
                      city: Boston
                      state: MA
                      zip: "02118"
                      country: US
              With Avalara Taxes:
                value:
                  subscription:
                    product_handle: paid-annual-seats
                    credit_card_attributes:
                      billing_address: 870 Massachusetts Ave
                      billing_address_2: null
                      billing_city: Boston
                      billing_state: MA
                      billing_zip: "02118"
                      billing_country: US
              With Custom Pricing:
                value:
                  subscription:
                    product_id: 1234
                    custom_price:
                      price_in_cents: 9900
                      interval: 1
                      interval_unit: month
                    components:
                      - component_id: 20
                        allocated_quantity: 10
                        custom_price:
                          pricing_scheme: stairstep
                          prices:
                            - unit_price: 5
                              starting_quantity: 1
                              ending_quantity: 15
                            - unit_price: 2
                              starting_quantity: 16
                      - component_id: 10
                        enabled: true
                        custom_price:
                          prices:
                            - unit_price: 1
                              starting_quantity: 1
  /chargify_js_keys.json:
    get:
      summary: List Chargify.js Public Keys
      tags:
        - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Public-Keys-Response.yaml"
              examples:
                Example:
                  value:
                    chargify_js_keys:
                      - public_key: chjs_ftrxt7c4fv6f74wchjs_5zyn7gnwv
                        requires_security_token: false
                        created_at: "2021-01-01T05:00:00-04:00"
                    meta:
                      total_count: 1
                      current_page: 1
                      total_pages: 1
                      per_page: 10
      operationId: listChargifyJsPublicKeys
      description: This endpoint returns public keys used for Chargify.js.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
  "/subscription_groups/{uid}/proforma_invoices.json":
    parameters:
      - $ref: "../components/parameters/group-uid-path.yaml"
    post:
      summary: Create Consolidated Proforma Invoices
      tags:
        - Proforma Invoices
      responses:
        "201":
          description: Created
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Consolidated proforma invoice generation already in progress
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createConsolidatedProformaInvoice
      description: |-
        This endpoint will trigger the creation of a consolidated proforma invoice asynchronously. It will return a 201 with no message, or a 422 with any errors. To find and view the new consolidated proforma invoice, you may poll the subscription group listing for proforma invoices; only one consolidated proforma invoice may be created per group at a time.

        If the information becomes outdated, simply void the old consolidated proforma invoice and generate a new one.

        ## Restrictions

        Proforma invoices are only available on Relationship Invoicing sites. To create a proforma invoice, the subscription must not be prepaid, and must be in a live state.
    get:
      summary: List Subscription Group Proforma Invoices
      tags:
        - Proforma Invoices
      operationId: listSubscriptionGroupProformaInvoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Proforma-Invoices-Response.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      description: |
        Only proforma invoices with a `consolidation_level` of parent are returned.

        By default, proforma invoices returned on the index will only include totals, not detailed breakdowns for `line_items`, `discounts`, `taxes`, `credits`, `payments`, `custom_fields`. To include breakdowns, pass the specific field as a key in the query with a value set to true.
  "/proforma_invoices/{proforma_invoice_uid}.json":
    parameters:
      - schema:
          type: string
        name: proforma_invoice_uid
        in: path
        required: true
        description: The uid of the proforma invoice
    get:
      summary: Read Proforma Invoice
      tags:
        - Proforma Invoices
      operationId: readProformaInvoice
      description: |-
        Use this endpoint to read the details of an existing proforma invoice.

        ## Restrictions

        Proforma invoices are only available on Relationship Invoicing sites.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Proforma-Invoice.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
  "/subscriptions/{subscription_id}/add_coupon.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Apply Coupons to Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      id: 21607180
                      state: active
                      trial_started_at: null
                      trial_ended_at: null
                      activated_at: "2018-04-20T14:20:57-05:00"
                      created_at: "2018-04-20T14:20:57-05:00"
                      updated_at: "2018-05-11T13:53:44-05:00"
                      expires_at: null
                      balance_in_cents: 49000
                      current_period_ends_at: "2018-05-12T11:33:03-05:00"
                      next_assessment_at: "2018-05-12T11:33:03-05:00"
                      canceled_at: null
                      cancellation_message: null
                      next_product_id: null
                      cancel_at_end_of_period: false
                      payment_collection_method: remittance
                      snap_day: null
                      cancellation_method: null
                      current_period_started_at: "2018-05-11T11:33:03-05:00"
                      previous_state: active
                      signup_payment_id: 237154761
                      signup_revenue: "0.00"
                      delayed_cancel_at: null
                      coupon_code: COUPONA
                      total_revenue_in_cents: 52762
                      product_price_in_cents: 100000
                      product_version_number: 2
                      payment_type: credit_card
                      referral_code: x45nc8
                      coupon_use_count: 0
                      coupon_uses_allowed: 1
                      reason_code: null
                      automatically_resume_at: null
                      coupon_codes:
                        - COUPONA
                        - COUPONB
                      customer:
                        id: 21259051
                        first_name: K
                        last_name: C
                        organization: ""
                        email: example@chargify.com
                        created_at: "2018-04-20T14:20:57-05:00"
                        updated_at: "2018-04-23T15:29:28-05:00"
                        reference: null
                        address: ""
                        address_2: ""
                        city: ""
                        state: ""
                        zip: ""
                        country: ""
                        phone: ""
                        portal_invite_last_sent_at: "2018-04-20T14:20:59-05:00"
                        portal_invite_last_accepted_at: null
                        verified: false
                        portal_customer_created_at: "2018-04-20T14:20:59-05:00"
                        cc_emails: ""
                        tax_exempt: false
                      product:
                        id: 4581816
                        name: Basic
                        handle: basic
                        description: ""
                        accounting_code: ""
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: "2017-11-02T15:00:11-05:00"
                        updated_at: "2018-04-10T09:02:59-05:00"
                        price_in_cents: 100000
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: 100000
                        trial_price_in_cents: 1000
                        trial_interval: 10
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: true
                        return_params: ""
                        taxable: false
                        update_return_url: ""
                        tax_code: ""
                        initial_charge_after_trial: false
                        version_number: 2
                        update_return_params: ""
                        product_family:
                          id: 1025627
                          name: My Product Family
                          description: ""
                          handle: acme-products
                          accounting_code: null
                        public_signup_pages:
                          - id: 333589
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargifypay.com/subscribe/hbwtd98j3hk2/basic"
                          - id: 335926
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargifypay.com/subscribe/g366zy67c7rm/basic"
                          - id: 345555
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargifypay.com/subscribe/txqyyqk7d8rz/basic"
                          - id: 345556
                            return_url: ""
                            return_params: ""
                            url: "https://general-goods.chargifypay.com/subscribe/2zss3qpf4249/basic"
                      credit_card:
                        id: 14839830
                        first_name: John
                        last_name: Doe
                        masked_card_number: XXXX-XXXX-XXXX-1
                        card_type: bogus
                        expiration_month: 1
                        expiration_year: 2028
                        customer_id: 21259051
                        current_vault: bogus
                        vault_token: "1"
                        billing_address: null
                        billing_city: null
                        billing_state: null
                        billing_zip: "99999"
                        billing_country: null
                        customer_vault_token: null
                        billing_address_2: null
                        payment_type: credit_card
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Subscription-Add-Coupon-Error.yaml"
              examples:
                Example-1:
                  value:
                    coupon_codes:
                      - "Coupon Codes: 'COUPONA' - That coupon is not stackable"
                      - "Coupon Codes: 'COUPONB' - That coupon is not stackable"
                    subscription:
                      - Coupon is invalid.
                Example-2:
                  value:
                    coupon_code:
                      - "Coupon Codes: 'COUPONA' - Coupon code could not be found."
                    subscription:
                      - Coupon is invalid.
                Example-3:
                  value:
                    codes:
                      - "Coupon Codes: Subscription already has at least one non-stackable coupon."
                    subscription:
                      - Coupon is invalid.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: applyCouponsToSubscription
      description: |-
        An existing subscription can accommodate multiple discounts/coupon codes. This is only applicable if each coupon is stackable. For more information on stackable coupons, we recommend reviewing our [coupon documentation.](https://chargify.zendesk.com/hc/en-us/articles/4407755909531#stackable-coupons)

        ## Query Parameters vs Request Body Parameters

        Passing in a coupon code as a query parameter will add the code to the subscription, completely replacing all existing coupon codes on the subscription.

        For this reason, using this query parameter on this endpoint has been deprecated in favor of using the request body parameters as described below. When passing in request body parameters, the list of coupon codes will simply be added to any existing list of codes on the subscription.
      parameters:
        - schema:
            type: string
          in: query
          name: code
          description: A code for the coupon that would be applied to a subscription
          deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Add-Coupons-Request.yaml"
            examples:
              Example:
                value:
                  codes:
                    - COUPON_1
                    - COUPON_2
  "/subscriptions/{subscription_id}/remove_coupon.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    delete:
      summary: Remove Coupon from Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
              examples:
                Example:
                  value: Coupon successfully removed
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Subscription-Remove-Coupon-Errors.yaml"
              examples:
                Example:
                  value:
                    subscription:
                      - There's no coupon applied to this subscription
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: removeCouponFromSubscription
      description: |-
        Use this endpoint to remove a coupon from an existing subscription.

        For more information on the expected behaviour of removing a coupon from a subscription, please see our documentation [here.](https://chargify.zendesk.com/hc/en-us/articles/4407896488987#removing-a-coupon)
      parameters:
        - schema:
            type: string
          in: query
          name: coupon_code
          description: The coupon code
  "/subscriptions/{subscription_id}/proforma_invoices.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Create Proforma Invoice
      tags:
        - Proforma Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Proforma-Invoice.yaml"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - this subscription is not eligible to create proforma invoices
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createProformaInvoice
      description: |-
        This endpoint will create a proforma invoice and return it as a response. If the information becomes outdated, simply void the old proforma invoice and generate a new one.

        If you would like to preview the next billing amounts without generating a full proforma invoice, please use the renewal preview endpoint.

        ## Restrictions

        Proforma invoices are only available on Relationship Invoicing sites. To create a proforma invoice, the subscription must not be in a group, must not be prepaid, and must be in a live state.
    get:
      summary: List Subscription Proforma Invoices
      tags:
        - Proforma Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Proforma-Invoices-Response.yaml"
      operationId: listProformaInvoices
      description: "By default, proforma invoices returned on the index will only include totals, not detailed breakdowns for `line_items`, `discounts`, `taxes`, `credits`, `payments`, or `custom_fields`. To include breakdowns, pass the specific field as a key in the query with a value set to `true`."
      x-operation-settings:
        collectParameters: true
      parameters:
        - schema:
            type: string
          in: query
          name: start_date
          description: "The beginning date range for the invoice's Due Date, in the YYYY-MM-DD format."
        - schema:
            type: string
          in: query
          name: end_date
          description: "The ending date range for the invoice's Due Date, in the YYYY-MM-DD format."
        - schema:
            $ref: "../components/schemas/Invoice-Status.yaml"
          in: query
          name: status
          description: "The current status of the invoice.  Allowed Values: draft, open, paid, pending, voided"
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: direction
          description: The sort direction of the returned invoices.
        - schema:
            type: boolean
            default: false
          in: query
          name: line_items
          description: Include line items data
        - schema:
            type: boolean
            default: false
          in: query
          name: discounts
          description: Include discounts data
        - schema:
            type: boolean
            default: false
          in: query
          name: taxes
          description: Include taxes data
        - schema:
            type: boolean
            default: false
          in: query
          name: credits
          description: Include credits data
        - schema:
            type: boolean
            default: false
          in: query
          name: payments
          description: Include payments data
        - schema:
            type: boolean
            default: false
          in: query
          name: custom_fields
          description: Include custom fields data
  "/proforma_invoices/{proforma_invoice_uid}/void.json":
    parameters:
      - schema:
          type: string
        name: proforma_invoice_uid
        in: path
        required: true
        description: The uid of the proforma invoice
    post:
      summary: Void Proforma Invoice
      tags:
        - Proforma Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Proforma-Invoice.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - You must provide a reason for voiding the proforma invoice.
                      - Only draft proforma invoices may be voided.
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: voidProformaInvoice
      description: |-
        This endpoint will void a proforma invoice that has the status "draft".

        ## Restrictions

        Proforma invoices are only available on Relationship Invoicing sites.

        Only proforma invoices that have the appropriate status may be reopened. If the invoice identified by {uid} does not have the appropriate status, the response will have HTTP status code 422 and an error message.

        A reason for the void operation is required to be included in the request body. If one is not provided, the response will have HTTP status code 422 and an error message.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Void-Invoice-Request.yaml"
        description: ""
  "/subscriptions/{subscription_id}/proforma_invoices/preview.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Preview Proforma Invoice
      tags:
        - Proforma Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Proforma-Invoice.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                example-1:
                  value:
                    errors:
                      - this subscription is not eligible to create proforma invoices
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: previewProformaInvoice
      description: |-
        Return a preview of the data that will be included on a given subscription's proforma invoice if one were to be generated. It will have similar line items and totals as a renewal preview, but the response will be presented in the format of a proforma invoice. Consequently it will include additional information such as the name and addresses that will appear on the proforma invoice.

        The preview endpoint is subject to all the same conditions as the proforma invoice endpoint. For example, previews are only available on the Relationship Invoicing architecture, and previews cannot be made for end-of-life subscriptions.

        If all the data returned in the preview is as expected, you may then create a static proforma invoice and send it to your customer. The data within a preview will not be saved and will not be accessible after the call is made.

        Alternatively, if you have some proforma invoices already, you may make a preview call to determine whether any billing information for the subscription's upcoming renewal has changed.
  "/invoices/{uid}/deliveries.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    post:
      summary: Send Invoice
      tags:
        - Invoices
      responses:
        "204":
          description: No Content
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - "cc_recipient_emails: must be a valid email address"
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: sendInvoice
      description: |-
        This endpoint allows for invoices to be programmatically delivered via email. This endpoint supports the delivery of both ad-hoc and automatically generated invoices. Additionally, this endpoint supports email delivery to direct recipients, carbon-copy (cc) recipients, and blind carbon-copy (bcc) recipients.

        Please note that if no recipient email addresses are specified in the request, then the subscription's default email configuration will be used. For example, if `recipient_emails` is left blank, then the invoice will be delivered to the subscription's customer email address.

        On success, a 204 no-content response will be returned. Please note that this does not indicate that email(s) have been delivered, but instead indicates that emails have been successfully queued for delivery. If _any_ invalid or malformed email address is found in the request body, the entire request will be rejected and a 422 response will be returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Send-Invoice-Request.yaml"
            examples:
              Example:
                value:
                  recipient_emails:
                    - user0@example.com
                  cc_recipient_emails:
                    - user1@example.com
                  bcc_recipient_emails:
                    - user2@example.com
  "/invoices/{uid}/customer_information/preview.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    post:
      summary: Preview Customer Information Changes
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Customer-Changes-Preview-Response.yaml"
              examples:
                Example:
                  value:
                    changes:
                      payer:
                        before:
                          last_name: Beatty
                        after:
                          last_name: Doe
                      shipping_address:
                        before:
                          line2: Suite 703
                        after:
                          line2: Suite 702
                      billing_address:
                        before:
                          line2: Suite 703
                        after:
                          line2: Suite 702
                      custom_fields:
                        before:
                          - owner_id: 1002
                            owner_type: Customer
                            name: Color
                            value: blue
                            metadatum_id: 20
                        after:
                          - owner_id: 1002
                            owner_type: Customer
                            name: Color
                            value: green
                            metadatum_id: 20
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Invoice not found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Invoice must have an open status
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: previewCustomerInformationChanges
      description: |-
        Customer information may change after an invoice is issued which may lead to a mismatch between customer information that are present on an open invoice and actual customer information. This endpoint allows to preview these differences, if any.

        The endpoint doesn't accept a request body. Customer information differences are calculated on the application side.
  "/invoices/{uid}/customer_information.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    put:
      summary: Update Customer Information
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
              examples:
                Example:
                  value:
                    uid: elit Ut
                    site_id: 46283786
                    customer_id: -62349460
                    subscription_id: 12801726
                    number: dolore et ut
                    sequence_number: -84210096
                    issue_date: 2017-01-01
                    due_date: 2017-01-30
                    paid_date: 2017-01-28
                    status: open
                    collection_method: automatic
                    payment_instructions: enim officia
                    currency: dolore
                    consolidation_level: none
                    product_name: occaecat veniam culpa
                    product_family_name: qui commodo ea dolore cillum
                    seller:
                      name: co
                      phone: ullamco in officia
                    customer:
                      chargify_id: -55826334
                      first_name: deserunt
                      last_name: velit dolore
                      email: aliquip sed velit Lorem
                    memo: ea cupidatat deserunt
                    billing_address:
                      street: qui commodo cupidatat sunt
                      line2: ut officia enim
                      city: velit minim dolore sint nulla
                      state: velit
                      zip: ullamco
                      country: irure est laborum deserun
                    shipping_address:
                      street: do fugiat dolore deserunt officia
                      line2: ipsum cillum
                      city: aliqua laboris incididunt ut
                      state: et fugiat sit
                      zip: dolore do
                      country: Excepteur consequat cillum
                    subtotal_amount: dolore mollit
                    discount_amount: aute
                    tax_amount: eu aliqua est velit ea
                    total_amount: ut non
                    credit_amount: sit
                    refund_amount: et eiusmod qui sed
                    paid_amount: amet nulla s
                    due_amount: non esse ullamco
                    line_items:
                      - description: qui
                        price_point_id: 123
                        tax_amount: occaecat deserunt veniam
                        subtotal_amount: commodo consequat tempor et Duis
                      - uid: ""
                        subtotal_amount: ven
                      - price_point_id: 94750853
                        product_id: 79058036
                        tax_amount: "1.0"
                        subtotal_amount: "128.5"
                      - unit_price: eiusmod consequat ut nostrud
                        tax_amount: quis nulla proident
                      - period_range_end: 2022-02-02
                        product_id: 57352537
                        description: minim in dolore Ut Excepteur
                        uid: sit qui in ullamco anim
                    discounts:
                      - title: nostrud
                    taxes:
                      - source_type: Tax
                        line_item_breakouts:
                          - uid: in ipsum
                            tax_amount: velit
                            taxable_amount: quis sint
                          - uid: co
                      - uid: enim irure in
                        title: incididunt est mollit irure
                    credits:
                      - uid: exercitation eiusmod
                        transaction_time: 2024-01-23T13:51:27Z
                        credit_note_number: qui fugiat labore laborum
                        credit_note_uid: ipsum sunt
                      - memo: dolor
                    refunds:
                      - memo: deserunt elit
                      - original_amount: Duis nulla
                    payments:
                      - prepayment: false
                        memo: enim Excepteur Lorem magna sit
                      - transaction_time: 2024-01-23T13:51:27Z
                        prepayment: false
                        payment_method:
                          details: labore ut et
                          kind: dolor qui
                          memo: ea commodo
                          type: fugiat veniam
                          card_brand: consequat
                          card_expiration: aliqua a
                          last_four: ut in consectetur sed
                          masked_card_number: minim ea ullamco nostrud tempor
                      - prepayment: true
                        transaction_id: 67527234
                      - original_amount: c
                        memo: dolore fugiat labore
                    custom_fields:
                      - name: CustomerStatus
                        value: Gold
                        owner_type: Customer
                        owner_id: 18482224
                        metadatum_id: 13924
                      - name: SubscriptionTag
                        value: Special Subscriber
                        owner_type: Subscription
                        owner_id: 21344
                        metadatum_id: 139245
                    public_url: dolo
                    previous_balance_data:
                      captured_at: "2024-01-09T11:22:23-05:00"
                      invoices:
                        - number: veniam dolore labore ipsum cupidatat
                          uid: tempor
                          outstanding_amount: Excepteur nostrud irur
                        - outstanding_amount: id
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Invoice not found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      - Invoice must have an open status
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateCustomerInformation
      description: |-
        This endpoint updates customer information on an open invoice and returns the updated invoice. If you would like to preview changes that will be applied, use the `/invoices/{uid}/customer_information/preview.json` endpoint before.

        The endpoint doesn't accept a request body. Customer information differences are calculated on the application side.
  "/one_time_tokens/{chargify_token}.json":
    get:
      summary: Read one time token details
      tags:
        - Payment Profiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Get-One-Time-Token-Response.yaml"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                example-1:
                  value:
                    errors:
                      - Chargify token not found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: readOneTimeToken
      x-internal: false
      description: |-
        One Time Tokens aka Chargify Tokens house the credit card or ACH (Authorize.Net or Stripe only) data for a customer.

        You can use One Time Tokens while creating a subscription or payment profile instead of passing all bank account or credit card data directly to a given API endpoint.

        To obtain a One Time Token you have to use [chargify.js](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDI0-overview).
    parameters:
      - schema:
          type: string
        name: chargify_token
        in: path
        required: true
        description: Chargify Token
  /subscriptions_components.json:
    get:
      summary: List Subscription Components for Site
      tags:
        - Subscription Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Subscription-Components-Response.yaml"
      operationId: listSubscriptionComponentsForSite
      description: This request will list components applied to each subscription.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            $ref: "../components/schemas/List-Subscription-Components-Sort.yaml"
          in: query
          name: sort
          description: "The attribute by which to sort. Use in query: `sort=updated_at`."
        - $ref: "../components/parameters/sort-direction.yaml"
        - schema:
            $ref: "../components/schemas/Subscription-List-Date-Field.yaml"
          in: query
          name: date_field
          description: "The type of filter you'd like to apply to your search. Use in query: `date_field=updated_at`."
        - schema:
            type: string
          in: query
          name: start_date
          description:
            "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified.
            Use in query `start_date=2011-12-15`."
        - schema:
            type: string
          in: query
          name: start_datetime
          description:
            "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.
            Use in query `start_datetime=2022-07-01 09:00:05`."
        - schema:
            type: string
          in: query
          name: end_date
          description:
            "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified.
            Use in query `end_date=2011-12-16`."
        - schema:
            type: string
          in: query
          description:
            "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.
            Use in query `end_datetime=2022-07-01 09:00:05`."
          name: end_datetime
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
            maxLength: 200
            minLength: 1
            minItems: 1
            maxItems: 200
          style: form
          explode: false
          in: query
          name: subscription_ids
          description:
            "Allows fetching components allocation with matching subscription id based on provided ids.
            Use in query `subscription_ids=1,2,3`."
        - schema:
            $ref: "../components/schemas/Include-Not-Null.yaml"
          in: query
          name: price_point_ids
          description:
            "Allows fetching components allocation only if price point id is present.
            Use in query `price_point_ids=not_null`."
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
          in: query
          name: product_family_ids
          description:
            "Allows fetching components allocation with matching product family id based on provided ids.
            Use in query `product_family_ids=1,2,3`."
          style: form
          explode: false
        - schema:
            $ref: "../components/schemas/List-Subscription-Components-Include.yaml"
          in: query
          name: include
          description: "Allows including additional data in the response.
            Use in query `include=subscription`."
        - schema:
            type: boolean
            example: true
          in: query
          name: "filter[use_site_exchange_rate]"
          description:
            "Allows fetching components allocation with matching use_site_exchange_rate based on provided value.
            Use in query `filter[use_site_exchange_rate]=true`."
        - schema:
            type: array
            items:
              type: string
            example:
              - EUR
              - USD
          in: query
          name: "filter[currencies]"
          description:
            "Allows fetching components allocation with matching currency based on provided values.
            Use in query `filter[currencies]=USD,EUR`."
          style: form
          explode: false
        - schema:
            type: array
            items:
              $ref: "../components/schemas/Subscription-State-Filter.yaml"
            example:
              - active
              - canceled
          in: query
          name: "filter[subscription][states]"
          style: form
          explode: false
          description:
            "Allows fetching components allocations that belong to the subscription with matching states based on provided values. To use this filter you also have to include the following param in the request `include=subscription`.
            Use in query `filter[subscription][states]=active,canceled&include=subscription`."
        - schema:
            $ref: "../components/schemas/Subscription-List-Date-Field.yaml"
          in: query
          name: "filter[subscription][date_field]"
          description: The type of filter you'd like to apply to your search. To use this filter you also have to include the following param in the request `include=subscription`.
        - schema:
            type: string
            format: date
          in: query
          name: "filter[subscription][start_date]"
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components that belong to the subscription with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified. To use this filter you also have to include the following param in the request `include=subscription`."
        - schema:
            type: string
            format: date-time
          in: query
          name: "filter[subscription][start_datetime]"
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components that belong to the subscription with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date. To use this filter you also have to include the following param in the request `include=subscription`."
        - schema:
            type: string
            format: date
          in: query
          name: "filter[subscription][end_date]"
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns components that belong to the subscription with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified. To use this filter you also have to include the following param in the request `include=subscription`."
        - schema:
            type: string
            format: date-time
          in: query
          name: "filter[subscription][end_datetime]"
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components that belong to the subscription with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date. To use this filter you also have to include the following param in the request `include=subscription`."
  "/components/{component_id}/price_points/{price_point_id}/segments.json":
    post:
      summary: Create Single Segment
      tags:
        - "Events-Based Billing: Segments"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Segment-Response.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Event-Based-Billing-Segment-Errors.yaml"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createSegment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Segment-Request.yaml"
            examples:
              Create a Single Segment (related Metric has 2 segmented properties):
                value:
                  segment:
                    segment_property_1_value: France
                    segment_property_2_value: Spain
                    pricing_scheme: volume
                    prices:
                      - starting_quantity: 1
                        ending_quantity: 10000
                        unit_price: 0.19
                      - starting_quantity: 10001
                        unit_price: 0.09
      description: |-
        This endpoint creates a new Segment for a Component with segmented Metric. It allows you to specify properties to bill upon and prices for each Segment. You can only pass as many "property_values" as the related Metric has segmenting properties defined.

        You may specify component and/or price point by using either the numeric ID or the `handle:gold` syntax.
    parameters:
      - schema:
          type: string
        name: component_id
        in: path
        required: true
        description: ID or Handle for the Component
      - schema:
          type: string
        name: price_point_id
        in: path
        required: true
        description: ID or Handle for the Price Point belonging to the Component
    get:
      summary: List Segments for a Price Point
      operationId: listSegmentsForPricePoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Segments-Response.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Event-Based-Billing-List-Segments-Errors.yaml"
      description: |-
        This endpoint allows you to fetch Segments created for a given Price Point. They will be returned in the order of creation.

        You can pass `page` and `per_page` parameters in order to access all of the segments. By default it will return `30` records. You can set `per_page` to `200` at most.

        You may specify component and/or price point by using either the numeric ID or the `handle:gold` syntax.
      x-operation-settings:
        collectParameters: true
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      parameters:
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page-default-30.yaml"
        - schema:
            type: string
            example: EU
          in: query
          name: "filter[segment_property_1_value]"
          description:
            "The value passed here would be used to filter segments. Pass a value related to `segment_property_1` on attached Metric. If empty string is passed, this filter would be rejected.
            Use in query `filter[segment_property_1_value]=EU`."
        - schema:
            type: string
          in: query
          name: "filter[segment_property_2_value]"
          description: "The value passed here would be used to filter segments. Pass a value related to `segment_property_2` on attached Metric. If empty string is passed, this filter would be rejected."
        - schema:
            type: string
          in: query
          name: "filter[segment_property_3_value]"
          description: "The value passed here would be used to filter segments. Pass a value related to `segment_property_3` on attached Metric. If empty string is passed, this filter would be rejected."
        - schema:
            type: string
          in: query
          name: "filter[segment_property_4_value]"
          description: "The value passed here would be used to filter segments. Pass a value related to `segment_property_4` on attached Metric. If empty string is passed, this filter would be rejected."
      tags:
        - "Events-Based Billing: Segments"
  "/components/{component_id}/price_points/{price_point_id}/segments/{id}.json":
    parameters:
      - schema:
          type: string
        name: component_id
        in: path
        required: true
        description: ID or Handle of the Component
      - schema:
          type: string
        name: price_point_id
        in: path
        required: true
        description: ID or Handle of the Price Point belonging to the Component
      - schema:
          type: number
        name: id
        in: path
        required: true
        description: The ID of the Segment
    put:
      summary: Update Single Segment
      tags:
        - "Events-Based Billing: Segments"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Segment-Response.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Event-Based-Billing-Segment-Errors.yaml"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: updateSegment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Update-Segment-Request.yaml"
      description: |-
        This endpoint updates a single Segment for a Component with a segmented Metric. It allows you to update the pricing for the segment.

        You may specify component and/or price point by using either the numeric ID or the `handle:gold` syntax.
    delete:
      summary: Delete Single Segment
      operationId: deleteSegment
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      description: |-
        This endpoint allows you to delete a Segment with specified ID.

        You may specify component and/or price point by using either the numeric ID or the `handle:gold` syntax.
      tags:
        - "Events-Based Billing: Segments"
  "/components/{component_id}/price_points/{price_point_id}/segments/bulk.json":
    parameters:
      - schema:
          type: string
        name: component_id
        in: path
        required: true
        description: ID or Handle for the Component
      - schema:
          type: string
        name: price_point_id
        in: path
        required: true
        description: ID or Handle for the Price Point belonging to the Component
    post:
      summary: Bulk Create Segments
      tags:
        - "Events-Based Billing: Segments"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Segments-Response.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Event-Based-Billing-Segment.yaml"
              examples:
                Error response when Pricing Scheme is missing:
                  value:
                    errors:
                      segments:
                        "1":
                          pricing_scheme:
                            - "Pricing scheme: cannot be blank"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: bulkCreateSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Bulk-Create-Segments.yaml"
      description: |-
        This endpoint allows you to create multiple segments in one request. The array of segments can contain up to `2000` records.

        If any of the records contain an error the whole request would fail and none of the requested segments get created. The error response contains a message for only the one segment that failed validation, with the corresponding index in the array.

        You may specify component and/or price point by using either the numeric ID or the `handle:gold` syntax.
    put:
      summary: Bulk Update Segments
      tags:
        - "Events-Based Billing: Segments"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Segments-Response.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Event-Based-Billing-Segment.yaml"
              examples:
                Error response when Pricing Scheme is missing:
                  value:
                    errors:
                      segments:
                        "1":
                          pricing_scheme:
                            - "Pricing scheme: cannot be blank"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: bulkUpdateSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Bulk-Update-Segments.yaml"
      description: |-
        This endpoint allows you to update multiple segments in one request. The array of segments can contain up to `1000` records.

        If any of the records contain an error the whole request would fail and none of the requested segments get updated. The error response contains a message for only the one segment that failed validation, with the corresponding index in the array.

        You may specify component and/or price point by using either the numeric ID or the `handle:gold` syntax.
  "/subscriptions/{subscription_id}/advance_invoice/issue.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Issue advance invoice
      tags:
        - Advance Invoice
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Nothing due:
                  value:
                    errors:
                      - Cannot generate an invoice in advance when nothing is due
                Already exists:
                  value:
                    errors:
                      - Advance invoice already exists
                Grouped:
                  value:
                    errors:
                      - Cannot generate an invoice in advance for subscription in the group
                End of life:
                  value:
                    errors:
                      - Cannot generate an invoice in advance for inactive subscription
                Calendar billing:
                  value:
                    errors:
                      - Cannot generate an invoice in advance for a calendar billing subscription
                Prepaid subscription:
                  value:
                    errors:
                      - Cannot generate an invoice in advance for a prepaid subscription
                Close to renewal:
                  value:
                    errors:
                      - Cannot generate an invoice in advance within an hour of renewal
                Custom exchange:
                  value:
                    errors:
                      - Cannot generate an invoice in advance for a subscription using the site level exchange rate
                Prepaid components:
                  value:
                    errors:
                      - Cannot generate an invoice in advance when a subscription uses prepaid components
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: issueAdvanceInvoice
      description: |
        Generate an invoice in advance for a subscription's next renewal date. [Please see our docs](reference/Chargify-API.v1.yaml/components/schemas/Invoice) for more information on advance invoices, including eligibility on generating one; for the most part, they function like any other invoice, except they are issued early and have special behavior upon being voided.
        A subscription may only have one advance invoice per billing period. Attempting to issue an advance invoice when one already exists will return an error.
        That said, regeneration of the invoice may be forced with the params `force: true`, which will void an advance invoice if one exists and generate a new one. If no advance invoice exists, a new one will be generated.
        We recommend using either the create or preview endpoints for proforma invoices to preview this advance invoice before using this endpoint to generate it.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Issue-Advance-Invoice-Request.yaml"
            examples:
              Force generation:
                value:
                  force: true
  "/subscriptions/{subscription_id}/advance_invoice.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    get:
      summary: Read advance invoice
      tags:
        - Advance Invoice
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
              examples: {}
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: readAdvanceInvoice
      description: "Once an advance invoice has been generated for a subscription's upcoming renewal, it can be viewed through this endpoint. There can only be one advance invoice per subscription per billing cycle."
  "/subscriptions/{subscription_id}/advance_invoice/void.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Void advance invoice
      tags:
        - Advance Invoice
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
      operationId: voidAdvanceInvoice
      description: |-
        Void a subscription's existing advance invoice. Once voided, it can later be regenerated if desired.
        A `reason` is required in order to void, and the invoice must have an open status. Voiding will cause any prepayments and credits that were applied to the invoice to be returned to the subscription. For a full overview of the impact of voiding, please [see our help docs](reference/Chargify-API.v1.yaml/components/schemas/Invoice).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Void-Invoice-Request.yaml"
  /subscriptions_mrr.json:
    get:
      summary: List MRR per subscription
      tags:
        - Insights
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Mrr-Response.yaml"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Subscriptions-MRR-Error-Response.yaml"
              examples:
                example-1:
                  value:
                    errors:
                      attribute:
                        - "supplied value is invalid, expected ISO 8601 format"
      operationId: listMrrPerSubscription
      deprecated: true
      description: "This endpoint returns your site's current MRR, including plan and usage breakouts split per subscription."
      x-operation-settings:
        ErrorTemplates:
          "400": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
        collectParameters: true
      parameters:
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
            minLength: 1
          in: query
          name: "filter[subscription_ids]"
          description: "Submit ids in order to limit results. Use in query: `filter[subscription_ids]=1,2,3`."
          style: form
          explode: false
        - schema:
            type: string
            example: "at_time=2022-01-10T10:00:00-05:00"
          in: query
          name: at_time
          description: "Submit a timestamp in ISO8601 format to request MRR for a historic time. Use in query: `at_time=2022-01-10T10:00:00-05:00`."
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: desc
          in: query
          name: direction
          description:
            "Controls the order in which results are returned. Records are ordered by subscription_id in ascending order by default.
            Use in query `direction=desc`."
  "/subscriptions/{subscription_id}/prepayments/{prepayment_id}/refunds.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
      - schema:
          type: string
        name: prepayment_id
        in: path
        required: true
        description: id of prepayment
    post:
      summary: Refund Prepayment
      tags:
        - Subscription Invoice Account
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Prepayment-Response.yaml"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Refund-Prepayment-Base-Errors-Response.yaml"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Refund-Prepayment-Aggregated-Errors-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      refund:
                        amount_in_cents:
                          - Refund amount exceeds prepayment amount
      x-operation-settings:
        ErrorTemplates:
          "400": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: refundPrepayment
      description: |-
        This endpoint will refund, completely or partially, a particular prepayment applied to a subscription. The `prepayment_id` will be the account transaction ID of the original payment. The prepayment must have some amount remaining in order to be refunded.

        The amount may be passed either as a decimal, with `amount`, or an integer in cents, with `amount_in_cents`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Refund-Prepayment-Request.yaml"
  /products.json:
    get:
      summary: List Products
      tags:
        - Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Product-Response.yaml"
              examples:
                example-1:
                  value:
                    - product:
                        id: 0
                        name: string
                        handle: string
                        description: string
                        accounting_code: string
                        request_credit_card: true
                        expiration_interval: 0
                        expiration_interval_unit: month
                        created_at: 2023-11-23T10:28:34-05:00
                        updated_at: 2023-11-23T10:28:34-05:00
                        price_in_cents: 0
                        interval: 0
                        interval_unit: month
                        initial_charge_in_cents: 0
                        trial_price_in_cents: 0
                        trial_interval: 0
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: true
                        return_params: string
                        taxable: true
                        update_return_url: string
                        initial_charge_after_trial: true
                        version_number: 0
                        update_return_params: string
                        product_family:
                          id: 0
                          name: string
                          handle: string
                          accounting_code: null
                          description: string
                          created_at: "2021-05-05T16:00:21-04:00"
                          updated_at: "2021-05-05T16:00:21-04:00"
                        public_signup_pages:
                          - id: 0
                            return_url: string
                            return_params: string
                            url: string
                        product_price_point_name: string
                        request_billing_address: true
                        require_billing_address: true
                        require_shipping_address: true
                        use_site_exchange_rate: true
                        tax_code: string
                        default_product_price_point_id: 0
      operationId: listProducts
      description: This method allows to retrieve a list of Products belonging to a Site.
      x-operation-settings:
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/basic-date-field.yaml"
        - schema:
            type: string
            format: date
          in: query
          name: end_date
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
            format: date-time
          in: query
          name: end_datetime
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date."
        - schema:
            type: string
            format: date
          in: query
          name: start_date
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
            format: date-time
          in: query
          name: start_datetime
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date."
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: boolean
            example: true
          in: query
          name: include_archived
          description: "Include archived products. Use in query: `include_archived=true`."
        - schema:
            $ref: "../components/schemas/List-Products-Include.yaml"
          in: query
          name: include
          description: "Allows including additional data in the response.
            Use in query `include=prepaid_product_price_point`."
        - schema:
            $ref: "../components/schemas/Include-Not-Null.yaml"
          in: query
          name: "filter[prepaid_product_price_point][product_price_point_id]"
          description:
            "Allows fetching products only if a prepaid product price point is present or not. To use this filter you also have to include the following param in the request `include=prepaid_product_price_point`.
            Use in query `filter[prepaid_product_price_point][product_price_point_id]=not_null`."
        - schema:
            type: boolean
            example: true
          in: query
          name: "filter[use_site_exchange_rate]"
          description:
            "Allows fetching products with matching use_site_exchange_rate based on provided value (refers to default price point).
            Use in query `filter[use_site_exchange_rate]=true`."
  "/invoices/{uid}/issue.json":
    parameters:
      - $ref: "../components/parameters/invoice-uid-path.yaml"
    post:
      summary: Issue Invoice
      tags:
        - Invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Invoice.yaml"
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: issueInvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Issue-Invoice-Request.yaml"
        description: ""
      description: |-
        This endpoint allows you to issue an invoice that is in "pending" status. For example, you can issue an invoice that was created when allocating new quantity on a component and using "accrue charges" option.

        You cannot issue a pending child invoice that was created for a member subscription in a group.

        For Remittance subscriptions, the invoice will go into "open" status and payment won't be attempted. The value for `on_failed_payment` would be rejected if sent. Any prepayments or service credits that exist on subscription will be automatically applied. Additionally, if setting is on, an email will be sent for issued invoice.

        For Automatic subscriptions, prepayments and service credits will apply to the invoice and before payment is attempted. On successful payment, the invoice will go into "paid" status and email will be sent to the customer (if setting applies). When payment fails, the next event depends on the `on_failed_payment` value:
        - `leave_open_invoice` - prepayments and credits applied to invoice; invoice status set to "open"; email sent to the customer for the issued invoice (if setting applies); payment failure recorded in the invoice history. This is the default option.
        - `rollback_to_pending` - prepayments and credits not applied; invoice remains in "pending" status; no email sent to the customer; payment failure recorded in the invoice history.
        - `initiate_dunning` - prepayments and credits applied to the invoice; invoice status set to "open"; email sent to the customer for the issued invoice (if setting applies); payment failure recorded in the invoice history; subscription will  most likely go into "past_due" or "canceled" state (depending upon net terms and dunning settings).
  /components_price_points.json:
    get:
      summary: List All Components Price Points
      tags:
        - Components
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Components-Price-Points-Response.yaml"
              examples:
                example:
                  value:
                    price_points:
                      - id: 1
                        name: "Auto-created"
                        type: "default"
                        pricing_scheme: "per_unit"
                        component_id: 2
                        handle: "auto-created"
                        archived_at: null
                        created_at: "2021-02-21T11:05:57-05:00"
                        updated_at: "2021-02-21T11:05:57-05:00"
                        prices:
                          - id: 3
                            component_id: 2
                            starting_quantity: 0
                            ending_quantity: null
                            unit_price: "1.0"
                            price_point_id: 1
                            formatted_unit_price: "$1.00"
                            segment_id: null
                        tax_included: false
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Invalid date format:
                  value:
                    errors:
                      - "start_date supplied value is invalid, expected ISO 8601 format"
      operationId: listAllComponentPricePoints
      description: This method allows to retrieve a list of Components Price Points belonging to a Site.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
        collectParameters: true
      parameters:
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          name: "filter[date_field]"
          description: "The type of filter you would like to apply to your search. Use in query: `filter[date_field]=created_at`."
        - schema:
            type: string
            format: date
          in: query
          name: "filter[end_date]"
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns price points with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          name: "filter[end_datetime]"
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns price points with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
        - schema:
            $ref: "../components/schemas/List-Components-Price-Points-Include.yaml"
          in: query
          name: include
          description: "Allows including additional data in the response. Use in query: `include=currency_prices`."
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
        - schema:
            type: string
            format: date
            example: "2011-12-17"
          in: query
          name: "filter[start_date]"
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns price points with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          name: "filter[start_datetime]"
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns price points with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: array
            items:
              $ref: "../components/schemas/Price-Point-Type.yaml"
            example:
              - catalog
              - default
              - custom
            default:
              - catalog
              - default
          style: form
          explode: false
          in: query
          name: "filter[type]"
          description: "Allows fetching price points with matching type. Use in query: `filter[type]=custom,catalog`."
        - $ref: "../components/parameters/sort-direction.yaml"
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
          in: query
          name: "filter[ids]"
          description: "Allows fetching price points with matching id based on provided values. Use in query: `filter[ids]=1,2,3`."
          style: form
          explode: false
        - schema:
            $ref: "../components/schemas/Include-Not-Null.yaml"
          in: query
          name: "filter[archived_at]"
          description: "Allows fetching price points only if archived_at is present or not. Use in query: `filter[archived_at]=not_null`."
  /products_price_points.json:
    get:
      summary: List All Products Price Points
      tags:
        - "Product: Price Points"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/List-Product-Price-Points-Response.yaml"
              examples:
                example:
                  value:
                    price_points:
                      - id: 0
                        name: My pricepoint
                        handle: handle
                        price_in_cents: 10
                        interval: 5
                        interval_unit: month
                        trial_price_in_cents: 10
                        trial_interval: 1
                        trial_interval_unit: month
                        trial_type: payment_expected
                        introductory_offer: true
                        initial_charge_in_cents: 0
                        initial_charge_after_trial: true
                        expiration_interval: 0
                        expiration_interval_unit: month
                        product_id: 1230
                        created_at: "2021-04-02T17:52:09-04:00"
                        updated_at: "2021-04-02T17:52:09-04:00"
                        use_site_exchange_rate: true
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                example:
                  value:
                    errors:
                      - "date_field must be one of: created_at, updated_at"
                      - "start_date supplied value is invalid, expected ISO 8601 format"
      operationId: listAllProductPricePoints
      description: This method allows retrieval of a list of Products Price Points belonging to a Site.
      x-operation-settings:
        ErrorTemplates:
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/sort-direction.yaml"
        - schema:
            $ref: "../components/schemas/Include-Not-Null.yaml"
          in: query
          name: "filter[archived_at]"
          description: "Allows fetching price points only if archived_at is present or not. Use in query: `filter[archived_at]=not_null`."
        - schema:
            $ref: "../components/schemas/Basic-Date-Field.yaml"
          in: query
          description: "The type of filter you would like to apply to your search. Use in query: `filter[date_field]=created_at`."
          name: "filter[date_field]"
        - schema:
            type: string
            format: date
            example: "2019-06-07"
          in: query
          name: "filter[end_date]"
          description: "The end date (format YYYY-MM-DD) with which to filter the date_field. Returns price points with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified."
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          name: "filter[end_datetime]"
          description: "The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns price points with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of end_date."
        - schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 2
              - 3
          in: query
          name: "filter[ids]"
          style: form
          explode: false
          description: "Allows fetching price points with matching id based on provided values. Use in query: `filter[ids]=1,2,3`."
        - schema:
            type: string
            format: date
            example: "2019-06-07"
          in: query
          description: "The start date (format YYYY-MM-DD) with which to filter the date_field. Returns price points with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified."
          name: "filter[start_date]"
        - schema:
            type: string
            format: date-time
            example: "2019-06-07T17:20:06Z"
          in: query
          name: "filter[start_datetime]"
          description: "The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns price points with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site's time zone will be used. If provided, this parameter will be used instead of start_date."
        - schema:
            type: array
            items:
              $ref: "../components/schemas/Price-Point-Type.yaml"
            default:
              - catalog
              - default
            example:
              - catalog
              - default
              - custom
          style: form
          explode: false
          in: query
          name: "filter[type]"
          description: "Allows fetching price points with matching type. Use in query: `filter[type]=catalog,custom`."
        - schema:
            $ref: "../components/schemas/List-Products-Price-Points-Include.yaml"
          in: query
          name: include
          description: "Allows including additional data in the response. Use in query: `include=currency_prices`."
        - $ref: "../components/parameters/page.yaml"
        - $ref: "../components/parameters/per-page.yaml"
  "/subscriptions/{subscription_id}/activate.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    put:
      summary: Activate Subscription
      tags:
        - Subscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Subscription-Response.yaml"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Generic error:
                  value:
                    errors:
                      base:
                        - "Purchase Declined. The subscription is now in the 'awaiting_signup' state."
      x-operation-settings:
        ErrorTemplates:
          "400": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: activateSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Activate-Subscription-Request.yaml"
      description: |
        Chargify offers the ability to activate awaiting signup and trialing subscriptions. This feature is only available on the Relationship Invoicing architecture. Subscriptions in a group may not be activated immediately.

        For details on how the activation works, and how to activate subscriptions through the application, see [activation](#).

        The `revert_on_failure` parameter controls the behavior upon activation failure.
        - If set to `true` and something goes wrong i.e. payment fails, then Chargify will not change the subscription's state. The subscription’s billing period will also remain the same.
        - If set to `false` and something goes wrong i.e. payment fails, then Chargify will continue through with the activation and enter an end of life state. For trialing subscriptions, that will either be trial ended (if the trial is no obligation), past due (if the trial has an obligation), or canceled (if the site has no dunning strategy, or has a strategy that says to cancel immediately). For awaiting signup subscriptions, that will always be canceled.

        The default activation failure behavior can be configured per activation attempt, or you may set a default value under Config > Settings > Subscription Activation Settings.

        ## Activation Scenarios

        ### Activate Awaiting Signup subscription

        - Given you have a product without trial
        - Given you have a site without dunning strategy

        ```mermaid
          flowchart LR
            AS[Awaiting Signup] --> A{Activate}
            A -->|Success| Active
            A -->|Failure| ROF{revert_on_failure}
            ROF -->|true| AS
            ROF -->|false| Canceled
        ```

        - Given you have a product with trial
        - Given you have a site with dunning strategy

        ```mermaid
          flowchart LR
            AS[Awaiting Signup] --> A{Activate}
            A -->|Success| Trialing
            A -->|Failure| ROF{revert_on_failure}
            ROF -->|true| AS
            ROF -->|false| PD[Past Due]
        ```

        ### Activate Trialing subscription

        You can read more about the behavior of trialing subscriptions [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404494617357#trialing-subscriptions-0-0).
        When the `revert_on_failure` parameter is set to `true`, the subscription's state will remain as Trialing, we will void the invoice from activation and return any prepayments and credits applied to the invoice back to the subscription.
  /subscriptions/proforma_invoices.json:
    post:
      summary: Create signup proforma invoice
      tags:
        - Proforma Invoices
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Proforma-Invoice.yaml"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Proforma-Bad-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      subscription:
                        base:
                          - "must be an object"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Product invalid:
                  value:
                    errors:
                      base:
                        - Couldn't find Product by 1
                Missing customer:
                  value:
                    errors:
                      customer:
                        - Missing required customer attributes
                Invalid type:
                  value:
                    errors:
                      base:
                        - currency must be a string
      x-operation-settings:
        ErrorTemplates:
          "400": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: createSignupProformaInvoice
      description: |-
        This endpoint is only available for Relationship Invoicing sites. It cannot be used to create consolidated proforma invoices or preview prepaid subscriptions.

        Create a proforma invoice to preview costs before a subscription's signup. Like other proforma invoices, it can be emailed to the customer, voided, and publicly viewed on the chargifypay domain.

        Pass a payload that resembles a subscription create or signup preview request. For example, you can specify components, coupons/a referral, offers, custom pricing, and an existing customer or payment profile to populate a shipping or billing address.

        A product and customer first name, last name, and email are the minimum requirements. We recommend associating the proforma invoice with a customer_id to easily find their proforma invoices, since the subscription_id will always be blank.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Subscription-Request.yaml"
            examples:
              Minimum payload:
                value:
                  subscription:
                    product_handle: gold-product
                    customer_attributes:
                      first_name: Myra
                      last_name: Maisel
                      email: mmaisel@example.com
              Minimum payload with referenced customer:
                value:
                  subscription:
                    product_handle: gold-product
                    customer_id: 12345
    parameters: []
  /subscriptions/proforma_invoices/preview.json:
    post:
      summary: Create signup proforma preview
      tags:
        - Proforma Invoices
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Signup-Proforma-Preview-Response.yaml"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Proforma-Bad-Response.yaml"
              examples:
                Example:
                  value:
                    errors:
                      subscription:
                        base:
                          - "must be an object"
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-Array-Map-Response.yaml"
              examples:
                Missing product:
                  value:
                    errors:
                      base:
                        - Couldn't find Product by 6067
                Missing customer:
                  value:
                    errors:
                      customer:
                        - Missing required customer attributes
                Invalid type:
                  value:
                    errors:
                      base:
                        - organization must be a string
      x-operation-settings:
        ErrorTemplates:
          "400": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: previewSignupProformaInvoice
      description: |-
        This endpoint is only available for Relationship Invoicing sites. It cannot be used to create consolidated proforma invoice previews or preview prepaid subscriptions.

        Create a signup preview in the format of a proforma invoice to preview costs before a subscription's signup. You have the option of optionally previewing the first renewal's costs as well. The proforma invoice preview will not be persisted.

        Pass a payload that resembles a subscription create or signup preview request. For example, you can specify components, coupons/a referral, offers, custom pricing, and an existing customer or payment profile to populate a shipping or billing address.

        A product and customer first name, last name, and email are the minimum requirements.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../components/schemas/Create-Subscription-Request.yaml"
            examples:
              Minimum example:
                value:
                  subscription:
                    product_handle: gold-plan
                    customer_attributes:
                      first_name: first
                      last_name: last
                      email: flast@example.com
              Minimum example with existing customer:
                value:
                  subscription:
                    product_handle: silver-plan
                    customer_id: 1234
        description: ""
      parameters:
        - schema:
            $ref: "../components/schemas/Create-Signup-Proforma-Preview-Include.yaml"
          in: query
          name: include
          description:
            "Choose to include a proforma invoice preview for the first renewal.
            Use in query `include=next_proforma_invoice`."
  "/api_exports/proforma_invoices/{batch_id}/rows.json":
    parameters:
      - $ref: "../components/parameters/batch-id-path.yaml"
    get:
      summary: List Exported Proforma Invoices
      tags:
        - API Exports
      operationId: listExportedProformaInvoices
      description: |-
        This API returns an array of exported proforma invoices for a provided `batch_id`. Pay close attention to pagination in order to control responses from the server.

        Example: `GET https://{subdomain}.chargify.com/api_exports/proforma_invoices/123/rows?per_page=10000&page=1`.
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/per-page-export.yaml"
        - $ref: "../components/parameters/page.yaml"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Proforma-Invoice.yaml"
        "404":
          description: Not Found
  "/api_exports/invoices/{batch_id}/rows.json":
    parameters:
      - $ref: "../components/parameters/batch-id-path.yaml"
    get:
      summary: List Exported Invoices
      tags:
        - API Exports
      operationId: listExportedInvoices
      description: |-
        This API returns an array of exported invoices for a provided `batch_id`. Pay close attention to pagination in order to control responses from the server.

        Example: `GET https://{subdomain}.chargify.com/api_exports/invoices/123/rows?per_page=10000&page=1`.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Invoice.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/per-page-export.yaml"
        - $ref: "../components/parameters/page.yaml"
  "/api_exports/subscriptions/{batch_id}/rows.json":
    parameters:
      - $ref: "../components/parameters/batch-id-path.yaml"
    get:
      summary: List Exported Subscriptions
      tags:
        - API Exports
      operationId: listExportedSubscriptions
      description: |-
        This API returns an array of exported subscriptions for a provided `batch_id`. Pay close attention to pagination in order to control responses from the server.

        Example: `GET https://{subdomain}.chargify.com/api_exports/subscriptions/123/rows?per_page=200&page=1`.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../components/schemas/Subscription.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
        collectParameters: true
      parameters:
        - $ref: "../components/parameters/per-page-export.yaml"
        - $ref: "../components/parameters/page.yaml"
  /api_exports/proforma_invoices.json:
    post:
      summary: Create Proforma Invoices Export
      tags:
        - API Exports
      operationId: exportProformaInvoices
      description: |-
        This API creates a proforma invoices export and returns a batchjob object.

        It is only available for Relationship Invoicing architecture.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Batch-Job-Response.yaml"
        "404":
          description: Not Found
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "409": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
  /api_exports/invoices.json:
    post:
      summary: Create Invoices Export
      tags:
        - API Exports
      operationId: exportInvoices
      description: This API creates an invoices export and returns a batchjob object.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Batch-Job-Response.yaml"
        "404":
          description: Not Found
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "409": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
    parameters: []
  /api_exports/subscriptions.json:
    post:
      summary: Create Subscriptions Export
      tags:
        - API Exports
      operationId: exportSubscriptions
      description: This API creates a subscriptions export and returns a batchjob object.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Batch-Job-Response.yaml"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Single-Error-Response.yaml"
      x-operation-settings:
        ErrorTemplates:
          "409": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
    parameters: []
  "/api_exports/proforma_invoices/{batch_id}.json":
    parameters:
      - $ref: "../components/parameters/batch-id-path.yaml"
    get:
      summary: Read Proforma Invoices Export
      tags:
        - API Exports
      operationId: readProformaInvoicesExport
      description: This API returns a batchjob object for proforma invoices export.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Batch-Job-Response.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
  "/api_exports/invoices/{batch_id}.json":
    parameters:
      - $ref: "../components/parameters/batch-id-path.yaml"
    get:
      summary: Read Invoices Export
      tags:
        - API Exports
      operationId: readInvoicesExport
      description: This API returns a batchjob object for invoices export.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Batch-Job-Response.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
  "/api_exports/subscriptions/{batch_id}.json":
    parameters:
      - $ref: "../components/parameters/batch-id-path.yaml"
    get:
      summary: Read Subscriptions Export
      tags:
        - API Exports
      operationId: readSubscriptionsExport
      description: This API returns a batchjob object for subscriptions export.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../components/schemas/Batch-Job-Response.yaml"
        "404":
          description: Not Found
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
  "/subscriptions/{subscription_id}/request_payment_profiles_update.json":
    parameters:
      - $ref: "../components/parameters/subscription-id-path.yaml"
    post:
      summary: Send request payment update email
      tags:
        - Payment Profiles
      responses:
        "201":
          description: Created
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: "../components/schemas/errors/Error-List-Response.yaml"
              examples:
                Too many requests:
                  value:
                    errors:
                      - "Too many requests. You can perform 5 requests within 00:30:00"
      x-operation-settings:
        ErrorTemplates:
          "404": "Not Found:'{$response.body}'"
          "422": "HTTP Response Not OK. Status code: {$statusCode}. Response: '{$response.body}'."
      operationId: sendRequestUpdatePaymentEmail
      description: |-
        You can send a "request payment update" email to the customer associated with the subscription.

        If you attempt to send a "request payment update" email more than five times within a 30-minute period, you will receive a `422` response with an error message in the body. This error message will indicate that the request has been rejected due to excessive attempts, and will provide instructions on how to resubmit the request.

        Additionally, if you attempt to send a "request payment update" email for a subscription that does not exist, you will receive a `404` error response. This error message will indicate that the subscription could not be found, and will provide instructions on how to correct the error and resubmit the request.

        These error responses are designed to prevent excessive or invalid requests, and to provide clear and helpful information to users who encounter errors during the request process.
servers:
  - url: "https://{subdomain}.{domain}"
    description: Production server
    variables:
      subdomain:
        default: subdomain
        description: The subdomain for your Chargify site.
      domain:
        default: chargify.com
        description: The Chargify server domain.
security:
  - BasicAuth: []
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: The `username` is a Maxio Advanced Billing API key. The `password` is `x`.
  schemas:
    Invoice-Event-Payment:
      title: Invoice Event Payment
      type: object
      description: A nested data structure detailing the method of payment
      anyOf:
        - $ref: "#/components/schemas/Payment-Method-Apple-Pay"
        - $ref: "#/components/schemas/Payment-Method-Bank-Account"
        - $ref: "#/components/schemas/Payment-Method-Credit-Card"
        - $ref: "#/components/schemas/Payment-Method-External"
        - $ref: "#/components/schemas/Payment-Method-Paypal"
      discriminator:
        propertyName: type
        mapping:
          apple_pay: "#/components/schemas/Payment-Method-Apple-Pay"
          bank_account: "#/components/schemas/Payment-Method-Bank-Account"
          credit_card: "#/components/schemas/Payment-Method-Credit-Card"
          external: "#/components/schemas/Payment-Method-External"
          paypal_account: "#/components/schemas/Payment-Method-Paypal"
    Payment-Method-Apple-Pay:
      $ref: "../components/schemas/invoice_event_specific_data/Payment-Method-Apple-Pay.yaml"
    Payment-Method-Bank-Account:
      $ref: "../components/schemas/invoice_event_specific_data/Payment-Method-Bank-Account.yaml"
    Payment-Method-Credit-Card:
      $ref: "../components/schemas/invoice_event_specific_data/Payment-Method-Credit-Card.yaml"
    Payment-Method-External:
      $ref: "../components/schemas/invoice_event_specific_data/Payment-Method-External.yaml"
    Payment-Method-Paypal:
      $ref: "../components/schemas/invoice_event_specific_data/Payment-Method-Paypal.yaml"