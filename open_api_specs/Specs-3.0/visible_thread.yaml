openapi: 3.0.1
info:
  title: VisibleThread API
  description: "## Introduction\nThe VisibleThread b API provides services for analyzing/searching\
    \ documents and web pages.\nTo use the service you need an API key. \n\n**Contact\
    \ us at support@visiblethread.com to request an API key**. \n\nThe services are\
    \ split into **Documents** and **Webscans**.\n\n### Documents\nUpload documents\
    \ and dictionaries so you can :\n- Measure the readability of your document\n\
    - search a document for all terms from a dictionary\n- retrieve all paragraphs\
    \ from a document or only matching paragraphs\n\n### Webscans\nAnalyze web pages\
    \ so you can: \n- Measure the readability of your web content\n- Identify & highlight\
    \ content issues e.g. long sentences, passive voice\n\nThe VisibleThread API allows\
    \ you to programatially submit webpage urls to be scanned, \ncheck on the results\
    \ of a scan, and view a list of previous scans you have performed.\n    \n-------------\n\
    \nThe VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com\
    \ \nEach request to the service requires your API key to be successful.\n\n##\
    \ Getting Started With Webscans\n\nSteps:\n1. Enter your API key above and hit\
    \ **Explore**. \n2. Run a new scan by submitting a **POST to /webscans** (title\
    \ and some webUrls are required).\n   The scan runs asynchronously in the background\
    \ but returns immediately with a JSON response containing an \"id\" that represents\
    \ your scan.\n3. Check on the status of a scan by submitting **GET /webscans/{scanId}**,\
    \ if the scan is still in progress it will return a HTTP 503. If \n   it is complete\
    \ it will return a HTTP 200 with the appropriate JSON outlining the urls scanned\
    \ and the summary statistics for each url.\n4. Retrieve all your previous scan\
    \ results by submitting **GET /webscans**.  \n5. Retrieve detailed results for\
    \ a url within a scan (readability, long sentence and passive language instances)\
    \ by submitting \n   **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId\
    \ are required)\n\n## Getting Started With Document scans:\n\nSteps:\n1. Enter\
    \ your API key above and hit **Explore**\n2. Run a new scan by submitting a **POST\
    \ to /documents** (document required). The scan runs asynchronously in the background\
    \ but returns\n   immediately with a JSON response containins an \"id\" that represents\
    \ your scan\n3. Check on the status of a scan by submitting **GET /documents/{scanId}**,\
    \ if the scan is still in progress it will return a HTTP 503. If \n   it is complete\
    \ it will return a HTTP 200 with the appropriate JSON outlining the document readability\
    \ results. It will contain detailed\n   analysis of each paragraph in the document\n\
    4. Retrieve all your previous scan results by submitting **GET /documents**\n\n\
    ### Searching a document for keywords\n\nThe VisibleThread API allows you to upload\
    \ a set of keywords or a 'dictionary'. You can then perform a search of a already\
    \ uploaded document \nusing that dictionary\n\nSteps (Assuming you have uploaded\
    \ your document using the steps above):\n1. Upload a csv file to use as a keyword\
    \ dictionary by submitting a **POST to /dictionaries** (csv file required). This\
    \ returns a JSON \n   response with the dictionary Id \n2. Search a document with\
    \ the dictionary by submitting a **POST to /searches** (document id and dictionary\
    \ id required). \n3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\"\
    \ . This will return JSON response containing \n   detailed results of searching\
    \ the document using the dictionary.\n4. To view the list of all searches you\
    \ have performed submit a **GET /searches**. \n\nBelow is a list of the available\
    \ API endpoints, documentation & a form to try out each operation."
  contact: {}
  version: "1.0"
  x-apisguru-categories:
  - text
  x-logo:
    url: https://twitter.com/VisibleThread/profile_image?size=original
  x-origin:
  - format: swagger
    url: https://api.visiblethread.com/example/vt.yaml
    version: "2.0"
  x-providerName: visiblethread.com
servers:
- url: https://api.visiblethread.com/api/v1
security:
- api_key: []
paths:
  /dictionaries:
    get:
      tags:
      - Documents
      summary: Get your list of dictionaries
      description: Get your list of dictionaries
      responses:
        "200":
          description: Successful response
          content: {}
    post:
      tags:
      - Documents
      summary: Upload a dictionary (CSV)
      description: 'Upload a dictionary (CSV format) to your VisibleThread account. '
      operationId: uploadDictionary
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: The uploaded CSV dictionary
                  format: binary
        required: true
      responses:
        "200":
          description: Successful response
          content: {}
        "405":
          description: Invalid input
          content: {}
  /documents:
    get:
      tags:
      - Documents
      summary: Get your list of documents
      description: Get your list of documents
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                title: Documents
                type: array
                items:
                  $ref: '#/components/schemas/DocumentListSummary'
    post:
      tags:
      - Documents
      summary: Upload a document
      description: "Upload a document to your VisibleThread account. \nWe return a\
        \ JSON response that contains a \"docId\" that represents your document. \
        \       \nYou can use this id in other requests to check on the analysis status\
        \ for the document and run a dictionary search and retrieve search\nresults. "
      operationId: uploadDoc
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: The uploaded file data
                  format: binary
                longSentenceWordCount:
                  type: integer
                  description: Optional setting what constitutes a long sentence (default
                    25)
                  format: int32
                veryLongSentenceWordCount:
                  type: integer
                  description: Optional setting what constitutes a very long sentence
                    (default 30)
                  format: int32
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewDocumentResponse'
        "405":
          description: Invalid input
          content: {}
        "413":
          description: The document exceeds the maximum supported file size (15mb)
          content: {}
  /documents/{docId}:
    get:
      tags:
      - Documents
      summary: Get data from a previously submitted document
      description: Get data from a previously submitted document identified by ***docId***
      operationId: getDocById
      parameters:
      - name: docId
        in: path
        description: Id of document to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: document response contained readability details for the document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponseDetailed'
        "404":
          description: document not found
          content: {}
        "415":
          description: the document is an unsupported file type
          content: {}
        "500":
          description: an unknown error occurred processing the document
          content: {}
        "503":
          description: "the document analysis has not yet completed, try again later"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponseNotReady'
  /searches:
    get:
      tags:
      - Documents
      summary: Get your list of searches
      description: Get your list of searches
      responses:
        "200":
          description: Successful response
          content: {}
    post:
      tags:
      - Documents
      summary: Run a search
      description: 'Run a search on document **docId** using dictionary **dictId** '
      operationId: runSearch
      requestBody:
        description: Run a search on document **docId** using dictionary**dictId**
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Search'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: object
        "405":
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /searches/{docId}/{dictionaryId}:
    get:
      tags:
      - Documents
      summary: Gets search results for a particular document/dictionary
      description: "Get detailed results for a scan/url (readability, long sentence\
        \ and passive language instances), identified by **scanId** & **urlId**"
      operationId: getSearchResults
      parameters:
      - name: docId
        in: path
        description: Id of document
        required: true
        schema:
          type: integer
          format: int64
      - name: dictionaryId
        in: path
        description: Id of dictionary
        required: true
        schema:
          type: integer
          format: int64
      - name: matchingOnly
        in: query
        description: Only returning paragraphs containing a match
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: scan response
          content: {}
  /webscans:
    get:
      tags:
      - Webscans
      summary: Get your list of scans
      description: Get your list of scans
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                title: Scans
                type: array
                items:
                  $ref: '#/components/schemas/ScanResponseSummary'
    post:
      tags:
      - Webscans
      summary: Run a new scan
      description: "The scan runs in the background but returns immediately with a\
        \ JSON response containing an \"id\" that represents your scan.        \n\
        You can use this id in other requests to retrieve your scan result. \n\nAlso,\
        \ an \"id\" is returned for each url which can be used to retrieve detailed\
        \ results for individual scan urls. "
      operationId: runScan
      requestBody:
        description: Scan title and webUrls to analyze
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewScan'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewScanResponse'
        "405":
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /webscans/{scanId}:
    get:
      tags:
      - Webscans
      summary: Get data from a previously run scan
      description: "Get data from a previously run scan, identified by **scanId**"
      operationId: getScanById
      parameters:
      - name: scanId
        in: path
        description: Id of scan to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: scan response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResponseDetailed'
        "404":
          description: webscan not found
          content: {}
        "503":
          description: "the web analysis has not yet completed, try again later"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebResponseNotReady'
  /webscans/{scanId}/webUrls/{urlId}:
    get:
      tags:
      - Webscans
      summary: Gets data for a particular scan/webUrl
      description: "Get detailed results for a scan/url (readability, long sentence\
        \ and passive language instances), identified by **scanId** & **urlId**"
      operationId: getScanUrlById
      parameters:
      - name: scanId
        in: path
        description: Id of scan
        required: true
        schema:
          type: integer
          format: int64
      - name: urlId
        in: path
        description: Id of url to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: scan response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebUrlDetail'
        "404":
          description: scan url not found
          content: {}
components:
  schemas:
    Adverbs:
      type: array
      items:
        type: object
        properties:
          end:
            type: integer
            example: 399
          start:
            type: integer
            example: 386
          text:
            type: string
            example: exceptionally
    Analysis:
      type: object
      properties:
        stats:
          $ref: '#/components/schemas/Stats'
        title:
          type: string
          example: My funky scan title
    DocumentListSummary:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: My Document.pdf
    DocumentResponseDetailed:
      type: object
      properties:
        completed:
          type: string
          format: date-time
        eta:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        paragraphs:
          type: array
          items:
            type: object
            properties:
              paragraphCounter:
                type: integer
                example: 12
              paragraphIndex:
                type: integer
                example: 22
              stats:
                type: object
                properties:
                  adverbs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Adverbs'
                  hiddenVerbs:
                    type: array
                    items:
                      $ref: '#/components/schemas/HiddenVerbs'
                  longSentences:
                    type: array
                    items:
                      $ref: '#/components/schemas/LongSentences'
                  passives:
                    type: array
                    items:
                      $ref: '#/components/schemas/Passives'
                  veryLongSentences:
                    type: array
                    items:
                      $ref: '#/components/schemas/VeryLongSentences'
              text:
                type: string
                example: "This is an exmaple sentence which was extracted from a web\
                  \ page during a scan previously run using the VisibleThread API\
                  \ service. This is a short, simple sentence."
        scanSettings:
          type: object
          properties:
            longSentenceWordCount:
              type: integer
              format: int32
            veryLongSentenceWordCount:
              type: integer
              format: int32
        started:
          type: string
          format: date-time
        stats:
          $ref: '#/components/schemas/Stats'
        title:
          type: string
    DocumentResponseNotReady:
      type: object
      properties:
        eta:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        started:
          type: string
          format: date-time
    HiddenVerbs:
      type: array
      items:
        type: object
        properties:
          end:
            type: integer
            example: 210
          noun:
            type: string
            example: investment
          start:
            type: integer
            example: 185
          text:
            type: string
            example: investment in intangibles
    LongSentences:
      type: array
      items:
        type: object
        properties:
          end:
            type: integer
            example: 130
          start:
            type: integer
            example: 0
          wordCount:
            type: integer
            example: 22
    NewDocumentResponse:
      required:
      - docId
      - scanSettings
      - task
      type: object
      properties:
        docId:
          type: integer
          format: int64
        scanSettings:
          type: object
          properties:
            longSentenceWordCount:
              type: integer
              format: int32
            veryLongSentenceWordCount:
              type: integer
              format: int32
        task:
          type: string
          example: parse
    NewScan:
      required:
      - title
      - webUrls
      type: object
      properties:
        scanSettings:
          type: object
          properties:
            longSentenceWordCount:
              type: integer
              format: int32
              example: 20
            veryLongSentenceWordCount:
              type: integer
              format: int32
              example: 30
        title:
          type: string
          example: My fancy scan title
        webUrls:
          type: array
          items:
            required:
            - url
            type: object
            properties:
              url:
                type: string
                example: http://visiblethread.com
    NewScanResponse:
      required:
      - id
      - title
      - webUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 56487
        title:
          type: string
          example: My fancy scan title
        webUrls:
          type: array
          items:
            required:
            - id
            - url
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 88596
              url:
                type: string
                example: http://visiblethread.com
    Passives:
      type: array
      items:
        type: object
        properties:
          end:
            type: integer
            example: 47
          passivePiece:
            type: string
            example: was extracted
          start:
            type: integer
            example: 34
          verb:
            type: string
            example: extracted
    ScanDetailed:
      required:
      - stats
      - title
      - webUrls
      type: object
      properties:
        stats:
          $ref: '#/components/schemas/Stats'
        title:
          type: string
          example: My fancy scan title
        webUrls:
          type: array
          items:
            $ref: '#/components/schemas/WebUrl'
    ScanResponseDetailed:
      type: object
      properties:
        completed:
          type: string
          format: date-time
        eta:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        scan:
          $ref: '#/components/schemas/ScanDetailed'
        started:
          type: string
          format: date-time
    ScanResponseSummary:
      type: object
      properties:
        completed:
          type: string
          format: date-time
        eta:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        scan:
          $ref: '#/components/schemas/ScanSummary'
        started:
          type: string
          format: date-time
    ScanSummary:
      required:
      - title
      - webUrls
      type: object
      properties:
        title:
          type: string
          example: My fancy scan title
        webUrls:
          type: array
          items:
            $ref: '#/components/schemas/WebUrlHeader'
    Search:
      required:
      - dictId
      - docId
      type: object
      properties:
        dictId:
          type: integer
          format: int64
          example: 47364
        docId:
          type: integer
          format: int64
          example: 56487
    Stats:
      type: object
      properties:
        avgSentenceLength:
          type: integer
        fleschKincaidGradeLevel:
          type: number
          format: float
        fleschReadingLevel:
          type: integer
        longSentenceCount:
          type: integer
        passiveSentenceCount:
          type: integer
        sentenceCount:
          type: integer
        wordCount:
          type: integer
    VeryLongSentences:
      type: array
      items:
        type: object
        properties:
          end:
            type: integer
            example: 130
          start:
            type: integer
            example: 0
          wordCount:
            type: integer
            example: 34
    WebResponseNotReady:
      type: object
      properties:
        eta:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        started:
          type: string
          format: date-time
    WebUrl:
      allOf:
      - $ref: '#/components/schemas/WebUrlHeader'
      - required:
        - analysis
        type: object
        properties:
          analysis:
            $ref: '#/components/schemas/Analysis'
    WebUrlDetail:
      required:
      - stats
      - title
      - url
      type: object
      properties:
        paragraphs:
          type: array
          items:
            type: object
            properties:
              paragraphCounter:
                type: integer
                example: 12
              paragraphIndex:
                type: integer
                example: 22
              stats:
                type: object
                properties:
                  adverbs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Adverbs'
                  hiddenVerbs:
                    type: array
                    items:
                      $ref: '#/components/schemas/HiddenVerbs'
                  longSentences:
                    type: array
                    items:
                      $ref: '#/components/schemas/LongSentences'
                  passives:
                    type: array
                    items:
                      $ref: '#/components/schemas/Passives'
                  veryLongSentences:
                    type: array
                    items:
                      $ref: '#/components/schemas/VeryLongSentences'
              text:
                type: string
                example: "This is an exmaple sentence which was extracted from a web\
                  \ page during a scan previously run using the VisibleThread API\
                  \ service. This is a short, simple sentence."
        stats:
          $ref: '#/components/schemas/Stats'
        title:
          type: string
          example: My fancy scan title
        url:
          type: string
          example: http://visiblethread.com
    WebUrlHeader:
      required:
      - id
      - url
      type: object
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
          example: http://visiblethread.com
  securitySchemes:
    api_key:
      type: apiKey
      name: apiKey
      in: header
x-original-swagger-version: "2.0"
