openapi: 3.0.1
info:
  title: kpack
  version: v0.1.3
servers:
- url: /
paths:
  /apis/kpack.io/v1alpha1/builders:
    get:
      tags:
      - kpack
      description: list or watch builders
      operationId: listAllBuilders
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuilderList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuilderList'
        "401":
          description: Unauthorized
          content: {}
  /apis/kpack.io/v1alpha1/builds:
    get:
      tags:
      - kpack
      description: list or watch builds
      operationId: listAllBuilds
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuildList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuildList'
        "401":
          description: Unauthorized
          content: {}
  /apis/kpack.io/v1alpha1/clusterbuilders:
    get:
      tags:
      - kpack
      description: list or watch cluster scoped clusterbuilders
      operationId: listAllClusterbuilders
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilderList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilderList'
        "401":
          description: Unauthorized
          content: {}
    post:
      tags:
      - kpack
      description: Creates a cluster scoped ClusterBuilder
      operationId: createClusterBuilder
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterbuilders/{name}:
    get:
      tags:
      - kpack
      description: Returns a cluster scoped ClusterBuilder
      operationId: getClusterBuilder
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace the specified cluster scoped ClusterBuilder
      operationId: replaceClusterBuilder
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to replace.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - kpack
      description: Deletes the specified cluster scoped ClusterBuilder
      operationId: deleteClusterBuilder
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy."
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: patch the specified cluster scoped ClusterBuilder
      operationId: patchClusterBuilder
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to patch.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterbuilders/{name}/status:
    get:
      tags:
      - kpack
      description: read status of the specified cluster scoped ClusterBuilder
      operationId: getClusterBuilderStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace status of the specified cluster scoped ClusterBuilder
      operationId: replaceClusterBuilderStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: partially update status of the specified cluster scoped ClusterBuilder
      operationId: patchClusterBuilderStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterstacks:
    get:
      tags:
      - kpack
      description: list or watch cluster scoped clusterstacks
      operationId: listAllClusterstacks
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackList'
        "401":
          description: Unauthorized
          content: {}
    post:
      tags:
      - kpack
      description: Creates a cluster scoped ClusterStack
      operationId: createClusterStack
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterstacks/{name}:
    get:
      tags:
      - kpack
      description: Returns a cluster scoped ClusterStack
      operationId: getClusterStack
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace the specified cluster scoped ClusterStack
      operationId: replaceClusterStack
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to replace.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - kpack
      description: Deletes the specified cluster scoped ClusterStack
      operationId: deleteClusterStack
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy."
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: patch the specified cluster scoped ClusterStack
      operationId: patchClusterStack
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to patch.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterstacks/{name}/status:
    get:
      tags:
      - kpack
      description: read status of the specified cluster scoped ClusterStack
      operationId: getClusterStackStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace status of the specified cluster scoped ClusterStack
      operationId: replaceClusterStackStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: partially update status of the specified cluster scoped ClusterStack
      operationId: patchClusterStackStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterstores:
    get:
      tags:
      - kpack
      description: list or watch cluster scoped clusterstores
      operationId: listAllClusterstores
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStoreList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStoreList'
        "401":
          description: Unauthorized
          content: {}
    post:
      tags:
      - kpack
      description: Creates a cluster scoped ClusterStore
      operationId: createClusterStore
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterstores/{name}:
    get:
      tags:
      - kpack
      description: Returns a cluster scoped ClusterStore
      operationId: getClusterStore
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace the specified cluster scoped ClusterStore
      operationId: replaceClusterStore
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to replace.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - kpack
      description: Deletes the specified cluster scoped ClusterStore
      operationId: deleteClusterStore
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy."
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: patch the specified cluster scoped ClusterStore
      operationId: patchClusterStore
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to patch.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/clusterstores/{name}/status:
    get:
      tags:
      - kpack
      description: read status of the specified cluster scoped ClusterStore
      operationId: getClusterStoreStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace status of the specified cluster scoped ClusterStore
      operationId: replaceClusterStoreStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: partially update status of the specified cluster scoped ClusterStore
      operationId: patchClusterStoreStatus
      parameters:
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/images:
    get:
      tags:
      - kpack
      description: list or watch images
      operationId: listAllImages
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ImageList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ImageList'
        "401":
          description: Unauthorized
          content: {}
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/builders:
    get:
      tags:
      - kpack
      description: list or watch namespace scoped builders
      operationId: listNamespacedBuilders
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuilderList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuilderList'
        "401":
          description: Unauthorized
          content: {}
    post:
      tags:
      - kpack
      description: Creates a namespace scoped Builder
      operationId: createBuilder
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/builders/{name}:
    get:
      tags:
      - kpack
      description: Returns a namespace scoped custom object
      operationId: getBuilder
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A single Resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace the specified namespace scoped custom object
      operationId: replaceBuilder
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to replace.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - kpack
      description: Deletes the specified namespace scoped Builder
      operationId: deleteBuilder
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy."
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: patch the specified namespace scoped Builder
      operationId: patchBuilder
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to patch.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/builders/{name}/status:
    get:
      tags:
      - kpack
      description: read status of the specified namespace scoped Builder
      operationId: getBuilderStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace status of the specified namespace scoped Builder
      operationId: replaceBuilderStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: partially update status of the specified namespace scoped Builder
      operationId: patchBuilderStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/builds:
    get:
      tags:
      - kpack
      description: list or watch namespace scoped builds
      operationId: listNamespacedBuilds
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuildList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.BuildList'
        "401":
          description: Unauthorized
          content: {}
    post:
      tags:
      - kpack
      description: Creates a namespace scoped Build
      operationId: createBuild
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/builds/{name}:
    get:
      tags:
      - kpack
      description: Returns a namespace scoped custom object
      operationId: getBuild
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A single Resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace the specified namespace scoped custom object
      operationId: replaceBuild
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to replace.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - kpack
      description: Deletes the specified namespace scoped Build
      operationId: deleteBuild
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy."
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: patch the specified namespace scoped Build
      operationId: patchBuild
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to patch.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/builds/{name}/status:
    get:
      tags:
      - kpack
      description: read status of the specified namespace scoped Build
      operationId: getBuildStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace status of the specified namespace scoped Build
      operationId: replaceBuildStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: partially update status of the specified namespace scoped Build
      operationId: patchBuildStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/images:
    get:
      tags:
      - kpack
      description: list or watch namespace scoped images
      operationId: listNamespacedImages
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ImageList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.ImageList'
        "401":
          description: Unauthorized
          content: {}
    post:
      tags:
      - kpack
      description: Creates a namespace scoped Image
      operationId: createImage
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/images/{name}:
    get:
      tags:
      - kpack
      description: Returns a namespace scoped custom object
      operationId: getImage
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A single Resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace the specified namespace scoped custom object
      operationId: replaceImage
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to replace.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - kpack
      description: Deletes the specified namespace scoped Image
      operationId: deleteImage
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy."
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: patch the specified namespace scoped Image
      operationId: patchImage
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to patch.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/images/{name}/status:
    get:
      tags:
      - kpack
      description: read status of the specified namespace scoped Image
      operationId: getImageStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace status of the specified namespace scoped Image
      operationId: replaceImageStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: partially update status of the specified namespace scoped Image
      operationId: patchImageStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/sourceresolvers:
    get:
      tags:
      - kpack
      description: list or watch namespace scoped sourceresolvers
      operationId: listNamespacedSourceresolvers
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolverList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolverList'
        "401":
          description: Unauthorized
          content: {}
    post:
      tags:
      - kpack
      description: Creates a namespace scoped SourceResolver
      operationId: createSourceResolver
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/sourceresolvers/{name}:
    get:
      tags:
      - kpack
      description: Returns a namespace scoped custom object
      operationId: getSourceResolver
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A single Resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace the specified namespace scoped custom object
      operationId: replaceSourceResolver
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to replace.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - kpack
      description: Deletes the specified namespace scoped SourceResolver
      operationId: deleteSourceResolver
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy."
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: patch the specified namespace scoped SourceResolver
      operationId: patchSourceResolver
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        description: The JSON schema of the Resource to patch.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/namespaces/{namespace}/sourceresolvers/{name}/status:
    get:
      tags:
      - kpack
      description: read status of the specified namespace scoped SourceResolver
      operationId: getSourceResolverStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "401":
          description: Unauthorized
          content: {}
    put:
      tags:
      - kpack
      description: replace status of the specified namespace scoped SourceResolver
      operationId: replaceSourceResolverStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
    patch:
      tags:
      - kpack
      description: partially update status of the specified namespace scoped SourceResolver
      operationId: patchSourceResolverStatus
      parameters:
      - name: namespace
        in: path
        description: The custom resource's namespace
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: the custom object's name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/yaml:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        "401":
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /apis/kpack.io/v1alpha1/sourceresolvers:
    get:
      tags:
      - kpack
      description: list or watch sourceresolvers
      operationId: listAllSourceresolvers
      parameters:
      - name: pretty
        in: query
        description: "If 'true', then the output is pretty printed."
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the 'continue' field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history. When specified for list: - if unset, then the result is returned\
          \ from remote storage based on quorum-read flag; - if it's 0, then we simply\
          \ return what we currently have in cache, no guarantee; - if set to non\
          \ zero, then the result is at least as fresh as given rv."
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: "Timeout for the list/watch call. This limits the duration of\
          \ the call, regardless of any activity or inactivity."
        schema:
          type: integer
      - name: watch
        in: query
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications."
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolverList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolverList'
        "401":
          description: Unauthorized
          content: {}
components:
  schemas:
    io.k8s.api.core.v1.Affinity:
      type: object
      properties:
        nodeAffinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeAffinity'
        podAffinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinity'
        podAntiAffinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodAntiAffinity'
      description: Affinity is a group of affinity scheduling rules.
    io.k8s.api.core.v1.ConfigMapKeySelector:
      required:
      - key
      type: object
      properties:
        key:
          type: string
          description: The key to select.
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        optional:
          type: boolean
          description: Specify whether the ConfigMap or it's key must be defined
      description: Selects a key from a ConfigMap.
    io.k8s.api.core.v1.ContainerState:
      type: object
      properties:
        running:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateRunning'
        terminated:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateTerminated'
        waiting:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateWaiting'
      description: "ContainerState holds a possible state of container. Only one of\
        \ its members may be specified. If none of them is specified, the default\
        \ one is ContainerStateWaiting."
    io.k8s.api.core.v1.ContainerStateRunning:
      type: object
      properties:
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: ContainerStateRunning is a running state of a container.
    io.k8s.api.core.v1.ContainerStateTerminated:
      required:
      - exitCode
      type: object
      properties:
        containerID:
          type: string
          description: Container's ID in the format 'docker://<container_id>'
        exitCode:
          type: integer
          description: Exit status from the last termination of the container
          format: int32
        finishedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        message:
          type: string
          description: Message regarding the last termination of the container
        reason:
          type: string
          description: (brief) reason from the last termination of the container
        signal:
          type: integer
          description: Signal from the last termination of the container
          format: int32
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: ContainerStateTerminated is a terminated state of a container.
    io.k8s.api.core.v1.ContainerStateWaiting:
      type: object
      properties:
        message:
          type: string
          description: Message regarding why the container is not yet running.
        reason:
          type: string
          description: (brief) reason the container is not yet running.
      description: ContainerStateWaiting is a waiting state of a container.
    io.k8s.api.core.v1.EnvVar:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the environment variable. Must be a C_IDENTIFIER.
        value:
          type: string
          description: "Variable references $(VAR_NAME) are expanded using the previous\
            \ defined environment variables in the container and any service environment\
            \ variables. If a variable cannot be resolved, the reference in the input\
            \ string will be unchanged. The $(VAR_NAME) syntax can be escaped with\
            \ a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\
            \ regardless of whether the variable exists or not. Defaults to \"\"."
        valueFrom:
          $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVarSource'
      description: EnvVar represents an environment variable present in a Container.
    io.k8s.api.core.v1.EnvVarSource:
      type: object
      properties:
        configMapKeyRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapKeySelector'
        fieldRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector'
        resourceFieldRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector'
        secretKeyRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretKeySelector'
      description: EnvVarSource represents a source for the value of an EnvVar.
    io.k8s.api.core.v1.LocalObjectReference:
      type: object
      properties:
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
      description: LocalObjectReference contains enough information to let you locate
        the referenced object inside the same namespace.
    io.k8s.api.core.v1.NodeAffinity:
      type: object
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "The scheduler will prefer to schedule pods to nodes that satisfy\
            \ the affinity expressions specified by this field, but it may choose\
            \ a node that violates one or more of the expressions. The node that is\
            \ most preferred is the one with the greatest sum of weights, i.e. for\
            \ each node that meets all of the scheduling requirements (resource request,\
            \ requiredDuringScheduling affinity expressions, etc.), compute a sum\
            \ by iterating through the elements of this field and adding \"weight\"\
            \ to the sum if the node matches the corresponding matchExpressions; the\
            \ node(s) with the highest sum are the most preferred."
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PreferredSchedulingTerm'
        requiredDuringSchedulingIgnoredDuringExecution:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelector'
      description: Node affinity is a group of node affinity scheduling rules.
    io.k8s.api.core.v1.NodeSelector:
      required:
      - nodeSelectorTerms
      type: object
      properties:
        nodeSelectorTerms:
          type: array
          description: Required. A list of node selector terms. The terms are ORed.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm'
      description: "A node selector represents the union of the results of one or\
        \ more label queries over a set of nodes; that is, it represents the OR of\
        \ the selectors represented by the node selector terms."
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.NodeSelectorRequirement:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: The label key that the selector applies to.
        operator:
          type: string
          description: "Represents a key's relationship to a set of values. Valid\
            \ operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
        values:
          type: array
          description: "An array of string values. If the operator is In or NotIn,\
            \ the values array must be non-empty. If the operator is Exists or DoesNotExist,\
            \ the values array must be empty. If the operator is Gt or Lt, the values\
            \ array must have a single element, which will be interpreted as an integer.\
            \ This array is replaced during a strategic merge patch."
          items:
            type: string
      description: "A node selector requirement is a selector that contains values,\
        \ a key, and an operator that relates the key and values."
    io.k8s.api.core.v1.NodeSelectorTerm:
      type: object
      properties:
        matchExpressions:
          type: array
          description: A list of node selector requirements by node's labels.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement'
        matchFields:
          type: array
          description: A list of node selector requirements by node's fields.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement'
      description: A null or empty node selector term matches no objects. The requirements
        of them are ANDed. The TopologySelectorTerm type implements a subset of the
        NodeSelectorTerm.
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.ObjectFieldSelector:
      required:
      - fieldPath
      type: object
      properties:
        apiVersion:
          type: string
          description: "Version of the schema the FieldPath is written in terms of,\
            \ defaults to \"v1\"."
        fieldPath:
          type: string
          description: Path of the field to select in the specified API version.
      description: ObjectFieldSelector selects an APIVersioned field of an object.
    io.k8s.api.core.v1.ObjectReference:
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
        fieldPath:
          type: string
          description: "If referring to a piece of an object instead of an entire\
            \ object, this string should contain a valid JSON/Go field access statement,\
            \ such as desiredState.manifest.containers[2]. For example, if the object\
            \ reference is to a container within a pod, this would take on a value\
            \ like: \"spec.containers{name}\" (where \"name\" refers to the name of\
            \ the container that triggered the event) or if no container name is specified\
            \ \"spec.containers[2]\" (container with index 2 in this pod). This syntax\
            \ is chosen only to have some well-defined way of referencing a part of\
            \ an object."
        kind:
          type: string
          description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        namespace:
          type: string
          description: "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
        resourceVersion:
          type: string
          description: "Specific resourceVersion to which this reference is made,\
            \ if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
        uid:
          type: string
          description: "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
      description: ObjectReference contains enough information to let you inspect
        or modify the referred object.
    io.k8s.api.core.v1.PodAffinity:
      type: object
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "The scheduler will prefer to schedule pods to nodes that satisfy\
            \ the affinity expressions specified by this field, but it may choose\
            \ a node that violates one or more of the expressions. The node that is\
            \ most preferred is the one with the greatest sum of weights, i.e. for\
            \ each node that meets all of the scheduling requirements (resource request,\
            \ requiredDuringScheduling affinity expressions, etc.), compute a sum\
            \ by iterating through the elements of this field and adding \"weight\"\
            \ to the sum if the node has pods which matches the corresponding podAffinityTerm;\
            \ the node(s) with the highest sum are the most preferred."
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        requiredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "If the affinity requirements specified by this field are not\
            \ met at scheduling time, the pod will not be scheduled onto the node.\
            \ If the affinity requirements specified by this field cease to be met\
            \ at some point during pod execution (e.g. due to a pod label update),\
            \ the system may or may not try to eventually evict the pod from its node.\
            \ When there are multiple elements, the lists of nodes corresponding to\
            \ each podAffinityTerm are intersected, i.e. all terms must be satisfied."
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm'
      description: Pod affinity is a group of inter pod affinity scheduling rules.
    io.k8s.api.core.v1.PodAffinityTerm:
      required:
      - topologyKey
      type: object
      properties:
        labelSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        namespaceSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        namespaces:
          type: array
          description: namespaces specifies a static list of namespace names that
            the term applies to. The term is applied to the union of the namespaces
            listed in this field and the ones selected by namespaceSelector. null
            or empty namespaces list and null namespaceSelector means "this pod's
            namespace"
          items:
            type: string
        topologyKey:
          type: string
          description: "This pod should be co-located (affinity) or not co-located\
            \ (anti-affinity) with the pods matching the labelSelector in the specified\
            \ namespaces, where co-located is defined as running on a node whose value\
            \ of the label with key topologyKey matches that of any node on which\
            \ any of the selected pods is running. Empty topologyKey is not allowed."
      description: "Defines a set of pods (namely those matching the labelSelector\
        \ relative to the given namespace(s)) that this pod should be co-located (affinity)\
        \ or not co-located (anti-affinity) with, where co-located is defined as running\
        \ on a node whose value of the label with key <topologyKey> matches that of\
        \ any node on which a pod of the set of pods is running"
    io.k8s.api.core.v1.PodAntiAffinity:
      type: object
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "The scheduler will prefer to schedule pods to nodes that satisfy\
            \ the anti-affinity expressions specified by this field, but it may choose\
            \ a node that violates one or more of the expressions. The node that is\
            \ most preferred is the one with the greatest sum of weights, i.e. for\
            \ each node that meets all of the scheduling requirements (resource request,\
            \ requiredDuringScheduling anti-affinity expressions, etc.), compute a\
            \ sum by iterating through the elements of this field and adding \"weight\"\
            \ to the sum if the node has pods which matches the corresponding podAffinityTerm;\
            \ the node(s) with the highest sum are the most preferred."
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        requiredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "If the anti-affinity requirements specified by this field\
            \ are not met at scheduling time, the pod will not be scheduled onto the\
            \ node. If the anti-affinity requirements specified by this field cease\
            \ to be met at some point during pod execution (e.g. due to a pod label\
            \ update), the system may or may not try to eventually evict the pod from\
            \ its node. When there are multiple elements, the lists of nodes corresponding\
            \ to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm'
      description: Pod anti affinity is a group of inter pod anti affinity scheduling
        rules.
    io.k8s.api.core.v1.PreferredSchedulingTerm:
      required:
      - preference
      - weight
      type: object
      properties:
        preference:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm'
        weight:
          type: integer
          description: "Weight associated with matching the corresponding nodeSelectorTerm,\
            \ in the range 1-100."
          format: int32
      description: An empty preferred scheduling term matches all objects with implicit
        weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no
        objects (i.e. is also a no-op).
    io.k8s.api.core.v1.ResourceFieldSelector:
      required:
      - resource
      type: object
      properties:
        containerName:
          type: string
          description: "Container name: required for volumes, optional for env vars"
        divisor:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
        resource:
          type: string
          description: "Required: resource to select"
      description: "ResourceFieldSelector represents container resources (cpu, memory)\
        \ and their output format"
    io.k8s.api.core.v1.ResourceRequirements:
      type: object
      properties:
        limits:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: "Limits describes the maximum amount of compute resources allowed.\
            \ More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
        requests:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: "Requests describes the minimum amount of compute resources\
            \ required. If Requests is omitted for a container, it defaults to Limits\
            \ if that is explicitly specified, otherwise to an implementation-defined\
            \ value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
      description: ResourceRequirements describes the compute resource requirements.
    io.k8s.api.core.v1.SecretKeySelector:
      required:
      - key
      type: object
      properties:
        key:
          type: string
          description: The key of the secret to select from.  Must be a valid secret
            key.
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        optional:
          type: boolean
          description: Specify whether the Secret or it's key must be defined
      description: SecretKeySelector selects a key of a Secret.
    io.k8s.api.core.v1.Toleration:
      type: object
      properties:
        effect:
          type: string
          description: "Effect indicates the taint effect to match. Empty means match\
            \ all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule\
            \ and NoExecute."
        key:
          type: string
          description: "Key is the taint key that the toleration applies to. Empty\
            \ means match all taint keys. If the key is empty, operator must be Exists;\
            \ this combination means to match all values and all keys."
        operator:
          type: string
          description: "Operator represents a key's relationship to the value. Valid\
            \ operators are Exists and Equal. Defaults to Equal. Exists is equivalent\
            \ to wildcard for value, so that a pod can tolerate all taints of a particular\
            \ category."
        tolerationSeconds:
          type: integer
          description: "TolerationSeconds represents the period of time the toleration\
            \ (which must be of effect NoExecute, otherwise this field is ignored)\
            \ tolerates the taint. By default, it is not set, which means tolerate\
            \ the taint forever (do not evict). Zero and negative values will be treated\
            \ as 0 (evict immediately) by the system."
          format: int64
        value:
          type: string
          description: "Value is the taint value the toleration matches to. If the\
            \ operator is Exists, the value should be empty, otherwise just a regular\
            \ string."
      description: "The pod this Toleration is attached to tolerates any taint that\
        \ matches the triple <key,value,effect> using the matching operator <operator>."
    io.k8s.api.core.v1.WeightedPodAffinityTerm:
      required:
      - podAffinityTerm
      - weight
      type: object
      properties:
        podAffinityTerm:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm'
        weight:
          type: integer
          description: "weight associated with matching the corresponding podAffinityTerm,\
            \ in the range 1-100."
          format: int32
      description: The weights of all of the matched WeightedPodAffinityTerm fields
        are added per-node to find the most preferred node(s)
    io.k8s.apimachinery.pkg.api.resource.Quantity:
      type: string
      description: |-
        Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and Int64() accessors.

        The serialization format is:

        <quantity>        ::= <signedNumber><suffix>
          (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
        <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
          (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
        <decimalSI>       ::= m | "" | k | M | G | T | P | E
          (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
        <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

        No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

        When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

        Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
          a. No precision is lost
          b. No fractional digits will be emitted
          c. The exponent (or suffix) is as large as possible.
        The sign will be omitted unless the number is negative.

        Examples:
          1.5 will be serialized as "1500m"
          1.5Gi will be serialized as "1536Mi"

        Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

        Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

        This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
    io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
        gracePeriodSeconds:
          type: integer
          description: "The duration in seconds before the object should be deleted.\
            \ Value must be non-negative integer. The value zero indicates delete\
            \ immediately. If this value is nil, the default grace period for the\
            \ specified type will be used. Defaults to a per object value if not specified.\
            \ zero means delete immediately."
          format: int64
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
        orphanDependents:
          type: boolean
          description: "Deprecated: please use the PropagationPolicy, this field will\
            \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
            \ the \"orphan\" finalizer will be added to/removed from the object's\
            \ finalizers list. Either this field or PropagationPolicy may be set,\
            \ but not both."
        preconditions:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions'
        propagationPolicy:
          type: string
          description: "Whether and how garbage collection will be performed. Either\
            \ this field or OrphanDependents may be set, but not both. The default\
            \ policy is decided by the existing finalizer set in the metadata.finalizers\
            \ and the resource-specific default policy. Acceptable values are: 'Orphan'\
            \ - orphan the dependents; 'Background' - allow the garbage collector\
            \ to delete the dependents in the background; 'Foreground' - a cascading\
            \ policy that deletes all dependents in the foreground."
      description: DeleteOptions may be provided when deleting an API object.
      x-kubernetes-group-version-kind:
      - group: ""
        kind: DeleteOptions
        version: v1
      - group: admission.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: admissionregistration.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apiextensions.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apiregistration.k8s.io
        kind: DeleteOptions
        version: v1
      - group: apiregistration.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apps
        kind: DeleteOptions
        version: v1
      - group: apps
        kind: DeleteOptions
        version: v1beta1
      - group: apps
        kind: DeleteOptions
        version: v1beta2
      - group: auditregistration.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: authentication.k8s.io
        kind: DeleteOptions
        version: v1
      - group: authentication.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: authorization.k8s.io
        kind: DeleteOptions
        version: v1
      - group: authorization.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: autoscaling
        kind: DeleteOptions
        version: v1
      - group: autoscaling
        kind: DeleteOptions
        version: v2beta1
      - group: autoscaling
        kind: DeleteOptions
        version: v2beta2
      - group: batch
        kind: DeleteOptions
        version: v1
      - group: batch
        kind: DeleteOptions
        version: v1beta1
      - group: batch
        kind: DeleteOptions
        version: v2alpha1
      - group: certificates.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: coordination.k8s.io
        kind: DeleteOptions
        version: v1
      - group: coordination.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: events.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: extensions
        kind: DeleteOptions
        version: v1beta1
      - group: imagepolicy.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: networking.k8s.io
        kind: DeleteOptions
        version: v1
      - group: networking.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: policy
        kind: DeleteOptions
        version: v1beta1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: settings.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1beta1
    io.k8s.apimachinery.pkg.apis.meta.v1.Fields:
      type: object
      description: "Fields stores a set of fields in a data structure like a Trie.\
        \ To understand how this is used, see: https://github.com/kubernetes-sigs/structured-merge-diff"
    io.k8s.apimachinery.pkg.apis.meta.v1.Initializer:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: name of the process that is responsible for initializing this
            object.
      description: Initializer is information about an initializer that has not yet
        completed.
    io.k8s.apimachinery.pkg.apis.meta.v1.Initializers:
      required:
      - pending
      type: object
      properties:
        pending:
          type: array
          description: "Pending is a list of initializers that must execute in order\
            \ before this object is visible. When the last pending initializer is\
            \ removed, and no failing result is set, the initializers struct will\
            \ be set to nil and the object is considered as initialized and visible\
            \ to all clients."
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Initializer'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: name
        result:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      description: Initializers tracks the progress of initialization.
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: matchExpressions is a list of label selector requirements.
            The requirements are ANDed.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
        matchLabels:
          type: object
          additionalProperties:
            type: string
          description: "matchLabels is a map of {key,value} pairs. A single {key,value}\
            \ in the matchLabels map is equivalent to an element of matchExpressions,\
            \ whose key field is \"key\", the operator is \"In\", and the values array\
            \ contains only \"value\". The requirements are ANDed."
      description: A label selector is a label query over a set of resources. The
        result of matchLabels and matchExpressions are ANDed. An empty label selector
        matches all objects. A null label selector matches no objects.
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: key is the label key that the selector applies to.
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: key
        operator:
          type: string
          description: "operator represents a key's relationship to a set of values.\
            \ Valid operators are In, NotIn, Exists and DoesNotExist."
        values:
          type: array
          description: "values is an array of string values. If the operator is In\
            \ or NotIn, the values array must be non-empty. If the operator is Exists\
            \ or DoesNotExist, the values array must be empty. This array is replaced\
            \ during a strategic merge patch."
          items:
            type: string
      description: "A label selector requirement is a selector that contains values,\
        \ a key, and an operator that relates the key and values."
    io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
      type: object
      properties:
        continue:
          type: string
          description: "continue may be set if the user set a limit on the number\
            \ of items returned, and indicates that the server has more data available.\
            \ The value is opaque and may be used to issue another request to the\
            \ endpoint that served this list to retrieve the next set of available\
            \ objects. Continuing a consistent list may not be possible if the server\
            \ configuration has changed or more than a few minutes have passed. The\
            \ resourceVersion field returned when using this continue value will be\
            \ identical to the value in the first response, unless you have received\
            \ this token from an error message."
        resourceVersion:
          type: string
          description: "String that identifies the server's internal version of this\
            \ object that can be used by clients to determine when objects have changed.\
            \ Value must be treated as opaque by clients and passed unmodified back\
            \ to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
        selfLink:
          type: string
          description: selfLink is a URL representing this object. Populated by the
            system. Read-only.
      description: "ListMeta describes metadata that synthetic resources must have,\
        \ including lists and various status objects. A resource may have only one\
        \ of {ObjectMeta, ListMeta}."
    io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      type: object
      properties:
        apiVersion:
          type: string
          description: APIVersion defines the version of this resource that this field
            set applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field set
            because it cannot be automatically converted.
        fields:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Fields'
        manager:
          type: string
          description: Manager is an identifier of the workflow managing these fields.
        operation:
          type: string
          description: Operation is the type of operation which lead to this ManagedFieldsEntry
            being created. The only valid values for this field are 'Apply' and 'Update'.
        time:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group\
        \ version of the resource that the fieldset applies to."
    io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: "Annotations is an unstructured key value map stored with a\
            \ resource that may be set by external tools to store and retrieve arbitrary\
            \ metadata. They are not queryable and should be preserved when modifying\
            \ objects. More info: http://kubernetes.io/docs/user-guide/annotations"
        clusterName:
          type: string
          description: The name of the cluster which the object belongs to. This is
            used to distinguish resources with same name and namespace in different
            clusters. This field is not set anywhere right now and apiserver is going
            to ignore it if set in create or update request.
        creationTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        deletionGracePeriodSeconds:
          type: integer
          description: Number of seconds allowed for this object to gracefully terminate
            before it will be removed from the system. Only set when deletionTimestamp
            is also set. May only be shortened. Read-only.
          format: int64
        deletionTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        finalizers:
          type: array
          description: "Must be empty before the object is deleted from the registry.\
            \ Each entry is an identifier for the responsible component that will\
            \ remove the entry from the list. If the deletionTimestamp of the object\
            \ is non-nil, entries in this list can only be removed."
          items:
            type: string
          x-kubernetes-patch-strategy: merge
        generateName:
          type: string
          description: |-
            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

            If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
        generation:
          type: integer
          description: A sequence number representing a specific generation of the
            desired state. Populated by the system. Read-only.
          format: int64
        initializers:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Initializers'
        labels:
          type: object
          additionalProperties:
            type: string
          description: "Map of string keys and values that can be used to organize\
            \ and categorize (scope and select) objects. May match selectors of replication\
            \ controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        managedFields:
          type: array
          description: |-
            ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.

            This field is alpha and can be changed or removed without notice.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        name:
          type: string
          description: "Name must be unique within a namespace. Is required when creating\
            \ resources, although some resources may allow a client to request the\
            \ generation of an appropriate name automatically. Name is primarily intended\
            \ for creation idempotence and configuration definition. Cannot be updated.\
            \ More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        namespace:
          type: string
          description: |-
            Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        ownerReferences:
          type: array
          description: "List of objects depended by this object. If ALL objects in\
            \ the list have been deleted, this object will be garbage collected. If\
            \ this object is managed by a controller, then an entry in this list will\
            \ point to this controller, with the controller field set to true. There\
            \ cannot be more than one managing controller."
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: uid
        resourceVersion:
          type: string
          description: |-
            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
        selfLink:
          type: string
          description: SelfLink is a URL representing this object. Populated by the
            system. Read-only.
        uid:
          type: string
          description: |-
            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
      description: "ObjectMeta is metadata that all persisted resources must have,\
        \ which includes all objects users must create."
    io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
      required:
      - apiVersion
      - kind
      - name
      - uid
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
        blockOwnerDeletion:
          type: boolean
          description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer,\
            \ then the owner cannot be deleted from the key-value store until this\
            \ reference is removed. Defaults to false. To set this field, a user needs\
            \ \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity)\
            \ will be returned."
        controller:
          type: boolean
          description: "If true, this reference points to the managing controller."
        kind:
          type: string
          description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
        name:
          type: string
          description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        uid:
          type: string
          description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
      description: "OwnerReference contains enough information to let you identify\
        \ an owning object. An owning object must be in the same namespace as the\
        \ dependent, or be cluster-scoped, so there is no namespace field."
    io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
      type: object
      description: Patch is provided to give a concrete name and type to the Kubernetes
        PATCH request body.
    io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions:
      type: object
      properties:
        resourceVersion:
          type: string
          description: Specifies the target ResourceVersion
        uid:
          type: string
          description: Specifies the target UID.
      description: "Preconditions must be fulfilled before an operation (update, delete,\
        \ etc.) is carried out."
    io.k8s.apimachinery.pkg.apis.meta.v1.Status:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
        code:
          type: integer
          description: "Suggested HTTP return code for this status, 0 if not set."
          format: int32
        details:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
        message:
          type: string
          description: A human-readable description of the status of this operation.
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        reason:
          type: string
          description: A machine-readable description of why this operation is in
            the "Failure" status. If this value is empty there is no information available.
            A Reason clarifies an HTTP status code but does not override it.
        status:
          type: string
          description: "Status of the operation. One of: \"Success\" or \"Failure\"\
            . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
      description: Status is a return value for calls that don't return other objects.
      x-kubernetes-group-version-kind:
      - group: ""
        kind: Status
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
      type: object
      properties:
        field:
          type: string
          description: |-
            The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"
        message:
          type: string
          description: A human-readable description of the cause of the error.  This
            field may be presented as-is to a reader.
        reason:
          type: string
          description: A machine-readable description of the cause of the error. If
            this value is empty there is no information available.
      description: "StatusCause provides more information about an api.Status failure,\
        \ including cases when multiple errors are encountered."
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
      type: object
      properties:
        causes:
          type: array
          description: The Causes array includes more details associated with the
            StatusReason failure. Not all StatusReasons may provide detailed causes.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause'
        group:
          type: string
          description: The group attribute of the resource associated with the status
            StatusReason.
        kind:
          type: string
          description: "The kind attribute of the resource associated with the status\
            \ StatusReason. On some operations may differ from the requested resource\
            \ Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
        name:
          type: string
          description: The name attribute of the resource associated with the status
            StatusReason (when there is a single name which can be described).
        retryAfterSeconds:
          type: integer
          description: "If specified, the time in seconds before the operation should\
            \ be retried. Some errors may indicate the client must take an alternate\
            \ action - for those errors this field may indicate how long to wait before\
            \ taking the alternate action."
          format: int32
        uid:
          type: string
          description: "UID of the resource. (when there is a single resource which\
            \ can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
      description: "StatusDetails is a set of additional properties that MAY be set\
        \ by the server to provide additional information about a response. The Reason\
        \ field of a Status object defines what attributes will be set. Clients must\
        \ ignore fields that do not match the defined type of each attribute, and\
        \ should assume that any attribute may be empty, invalid, or under defined."
    io.k8s.apimachinery.pkg.apis.meta.v1.Time:
      type: string
      description: Time is a wrapper around time.Time which supports correct marshaling
        to YAML and JSON.  Wrappers are provided for many of the factory methods that
        the time package offers.
      format: date-time
    kpack.build.v1alpha1.Build:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha1.BuildSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha1.BuildStatus'
    kpack.build.v1alpha1.BuildList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha1.Build'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha1.BuildSpec:
      required:
      - source
      type: object
      properties:
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.CNBBinding'
          x-kubernetes-list-type: ""
        builder:
          $ref: '#/components/schemas/kpack.core.v1alpha1.BuildBuilderSpec'
        cacheName:
          type: string
        env:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVar'
          x-kubernetes-list-type: ""
        lastBuild:
          $ref: '#/components/schemas/kpack.build.v1alpha1.LastBuild'
        notary:
          $ref: '#/components/schemas/kpack.core.v1alpha1.NotaryConfig'
        resources:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceRequirements'
        serviceAccount:
          type: string
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.SourceConfig'
        tags:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
    kpack.build.v1alpha1.BuildStatus:
      type: object
      properties:
        buildMetadata:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackMetadata'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        latestImage:
          type: string
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        podName:
          type: string
        stack:
          $ref: '#/components/schemas/kpack.core.v1alpha1.BuildStack'
        stepStates:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerState'
          x-kubernetes-list-type: ""
        stepsCompleted:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
    kpack.build.v1alpha1.Builder:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha1.NamespacedBuilderSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha1.BuilderStatus'
    kpack.build.v1alpha1.BuilderList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha1.Builder'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha1.BuilderSpec:
      type: object
      properties:
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.OrderEntry'
          x-kubernetes-list-type: ""
        stack:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        store:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        tag:
          type: string
    kpack.build.v1alpha1.BuilderStatus:
      type: object
      properties:
        builderMetadata:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackMetadata'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        latestImage:
          type: string
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        observedStackGeneration:
          type: integer
          format: int64
        observedStoreGeneration:
          type: integer
          format: int64
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.OrderEntry'
        os:
          type: string
        stack:
          $ref: '#/components/schemas/kpack.core.v1alpha1.BuildStack'
    kpack.build.v1alpha1.ClusterBuilder:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilderSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha1.BuilderStatus'
    kpack.build.v1alpha1.ClusterBuilderList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterBuilder'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha1.ClusterBuilderSpec:
      type: object
      properties:
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.OrderEntry'
          x-kubernetes-list-type: ""
        serviceAccountRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        stack:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        store:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        tag:
          type: string
    kpack.build.v1alpha1.ClusterStack:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackStatus'
    kpack.build.v1alpha1.ClusterStackList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStack'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha1.ClusterStackSpec:
      type: object
      properties:
        buildImage:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackSpecImage'
        id:
          type: string
        runImage:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackSpecImage'
    kpack.build.v1alpha1.ClusterStackSpecImage:
      type: object
      properties:
        image:
          type: string
    kpack.build.v1alpha1.ClusterStackStatus:
      type: object
      properties:
        buildImage:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackStatusImage'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        groupId:
          type: integer
          format: int32
        id:
          type: string
        mixins:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        runImage:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackStatusImage'
        userId:
          type: integer
          format: int32
    kpack.build.v1alpha1.ClusterStackStatusImage:
      type: object
      properties:
        image:
          type: string
        latestImage:
          type: string
    kpack.build.v1alpha1.ClusterStore:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStoreSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStoreStatus'
    kpack.build.v1alpha1.ClusterStoreList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStore'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha1.ClusterStoreSpec:
      type: object
      properties:
        sources:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.ImageSource'
          x-kubernetes-list-type: ""
    kpack.build.v1alpha1.ClusterStoreStatus:
      type: object
      properties:
        buildpacks:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackStatus'
          x-kubernetes-list-type: ""
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
    kpack.build.v1alpha1.Image:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ImageSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ImageStatus'
    kpack.build.v1alpha1.ImageBuild:
      type: object
      properties:
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.CNBBinding'
          x-kubernetes-list-type: ""
        env:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVar'
          x-kubernetes-list-type: ""
        resources:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceRequirements'
    kpack.build.v1alpha1.ImageList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha1.Image'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha1.ImageSpec:
      required:
      - source
      - tag
      type: object
      properties:
        build:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ImageBuild'
        builder:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        cacheSize:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
        failedBuildHistoryLimit:
          type: integer
          format: int64
        imageTaggingStrategy:
          type: string
        notary:
          $ref: '#/components/schemas/kpack.core.v1alpha1.NotaryConfig'
        serviceAccount:
          type: string
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.SourceConfig'
        successBuildHistoryLimit:
          type: integer
          format: int64
        tag:
          type: string
          default: ""
    kpack.build.v1alpha1.ImageStatus:
      type: object
      properties:
        buildCacheName:
          type: string
        buildCounter:
          type: integer
          format: int64
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        latestBuildImageGeneration:
          type: integer
          format: int64
        latestBuildReason:
          type: string
        latestBuildRef:
          type: string
        latestImage:
          type: string
        latestStack:
          type: string
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
    kpack.build.v1alpha1.LastBuild:
      type: object
      properties:
        image:
          type: string
        stackId:
          type: string
    kpack.build.v1alpha1.NamespacedBuilderSpec:
      type: object
      properties:
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.OrderEntry'
          x-kubernetes-list-type: ""
        serviceAccount:
          type: string
        stack:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        store:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        tag:
          type: string
    kpack.build.v1alpha1.ResolvedClusterStack:
      type: object
      properties:
        buildImage:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackStatusImage'
        groupId:
          type: integer
          format: int32
        id:
          type: string
        mixins:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
        runImage:
          $ref: '#/components/schemas/kpack.build.v1alpha1.ClusterStackStatusImage'
        userId:
          type: integer
          format: int32
    kpack.build.v1alpha1.SourceResolver:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolverSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolverStatus'
    kpack.build.v1alpha1.SourceResolverList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha1.SourceResolver'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha1.SourceResolverSpec:
      required:
      - source
      type: object
      properties:
        serviceAccount:
          type: string
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.SourceConfig'
    kpack.build.v1alpha1.SourceResolverStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.ResolvedSourceConfig'
    kpack.build.v1alpha2.Build:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildStatus'
    kpack.build.v1alpha2.BuildCache:
      type: object
      properties:
        image:
          type: string
    kpack.build.v1alpha2.BuildCacheConfig:
      type: object
      properties:
        registry:
          $ref: '#/components/schemas/kpack.build.v1alpha2.RegistryCache'
        volume:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildPersistentVolumeCache'
    kpack.build.v1alpha2.BuildList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.Build'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.BuildPersistentVolumeCache:
      type: object
      properties:
        persistentVolumeClaimName:
          type: string
    kpack.build.v1alpha2.BuildSpec:
      required:
      - source
      type: object
      properties:
        activeDeadlineSeconds:
          type: integer
          format: int64
        affinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Affinity'
        builder:
          $ref: '#/components/schemas/kpack.core.v1alpha1.BuildBuilderSpec'
        cache:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildCacheConfig'
        cnbBindings:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.CNBBinding'
          x-kubernetes-list-type: ""
        cosign:
          $ref: '#/components/schemas/kpack.build.v1alpha2.CosignConfig'
        creationTime:
          type: string
        defaultProcess:
          type: string
        env:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVar'
          x-kubernetes-list-type: ""
        lastBuild:
          $ref: '#/components/schemas/kpack.build.v1alpha2.LastBuild'
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
        notary:
          $ref: '#/components/schemas/kpack.core.v1alpha1.NotaryConfig'
        priorityClassName:
          type: string
        projectDescriptorPath:
          type: string
        resources:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceRequirements'
        runImage:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildSpecImage'
        runtimeClassName:
          type: string
        schedulerName:
          type: string
        serviceAccountName:
          type: string
        services:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          x-kubernetes-list-type: ""
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.SourceConfig'
        tags:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
        tolerations:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Toleration'
          x-kubernetes-list-type: ""
    kpack.build.v1alpha2.BuildSpecImage:
      type: object
      properties:
        image:
          type: string
    kpack.build.v1alpha2.BuildStack:
      type: object
      properties:
        id:
          type: string
        runImage:
          type: string
    kpack.build.v1alpha2.BuildStatus:
      type: object
      properties:
        buildMetadata:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackMetadata'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        latestCacheImage:
          type: string
        latestImage:
          type: string
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        podName:
          type: string
        stack:
          $ref: '#/components/schemas/kpack.core.v1alpha1.BuildStack'
        stepStates:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerState'
          x-kubernetes-list-type: ""
        stepsCompleted:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
    kpack.build.v1alpha2.Builder:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.NamespacedBuilderSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuilderStatus'
    kpack.build.v1alpha2.BuilderBuildpackRef:
      required:
      - id
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
        fieldPath:
          type: string
          description: "If referring to a piece of an object instead of an entire\
            \ object, this string should contain a valid JSON/Go field access statement,\
            \ such as desiredState.manifest.containers[2]. For example, if the object\
            \ reference is to a container within a pod, this would take on a value\
            \ like: \"spec.containers{name}\" (where \"name\" refers to the name of\
            \ the container that triggered the event) or if no container name is specified\
            \ \"spec.containers[2]\" (container with index 2 in this pod). This syntax\
            \ is chosen only to have some well-defined way of referencing a part of\
            \ an object."
        id:
          type: string
          default: ""
        image:
          type: string
        kind:
          type: string
          description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        namespace:
          type: string
          description: "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
        optional:
          type: boolean
        resourceVersion:
          type: string
          description: "Specific resourceVersion to which this reference is made,\
            \ if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        uid:
          type: string
          description: "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
        version:
          type: string
    kpack.build.v1alpha2.BuilderList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.Builder'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.BuilderOrderEntry:
      type: object
      properties:
        group:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.BuilderBuildpackRef'
          x-kubernetes-list-type: ""
    kpack.build.v1alpha2.BuilderSpec:
      type: object
      properties:
        additionalLabels:
          type: object
          additionalProperties:
            type: string
            default: ""
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.BuilderOrderEntry'
          x-kubernetes-list-type: ""
        stack:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        store:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        tag:
          type: string
    kpack.build.v1alpha2.BuilderStatus:
      type: object
      properties:
        builderMetadata:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackMetadata'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        latestImage:
          type: string
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        observedStackGeneration:
          type: integer
          format: int64
        observedStoreGeneration:
          type: integer
          format: int64
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.OrderEntry'
        os:
          type: string
        signaturePaths:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.CosignSignature'
        stack:
          $ref: '#/components/schemas/kpack.core.v1alpha1.BuildStack'
    kpack.build.v1alpha2.Buildpack:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildpackSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildpackStatus'
    kpack.build.v1alpha2.BuildpackList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.Buildpack'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.BuildpackSpec:
      type: object
      properties:
        image:
          type: string
        serviceAccountName:
          type: string
    kpack.build.v1alpha2.BuildpackStatus:
      type: object
      properties:
        buildpacks:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackStatus'
          x-kubernetes-list-type: ""
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
    kpack.build.v1alpha2.ClusterBuilder:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterBuilderSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuilderStatus'
    kpack.build.v1alpha2.ClusterBuilderList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterBuilder'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.ClusterBuilderSpec:
      type: object
      properties:
        additionalLabels:
          type: object
          additionalProperties:
            type: string
            default: ""
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.BuilderOrderEntry'
          x-kubernetes-list-type: ""
        serviceAccountRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        stack:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        store:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        tag:
          type: string
    kpack.build.v1alpha2.ClusterBuildpack:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterBuildpackSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterBuildpackStatus'
    kpack.build.v1alpha2.ClusterBuildpackList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterBuildpack'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.ClusterBuildpackSpec:
      type: object
      properties:
        image:
          type: string
        serviceAccountRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
    kpack.build.v1alpha2.ClusterBuildpackStatus:
      type: object
      properties:
        buildpacks:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackStatus'
          x-kubernetes-list-type: ""
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
    kpack.build.v1alpha2.ClusterStack:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackStatus'
    kpack.build.v1alpha2.ClusterStackList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStack'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.ClusterStackSpec:
      type: object
      properties:
        buildImage:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackSpecImage'
        id:
          type: string
        runImage:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackSpecImage'
        serviceAccountRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
    kpack.build.v1alpha2.ClusterStackSpecImage:
      type: object
      properties:
        image:
          type: string
    kpack.build.v1alpha2.ClusterStackStatus:
      type: object
      properties:
        buildImage:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackStatusImage'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        groupId:
          type: integer
          format: int32
        id:
          type: string
        mixins:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        runImage:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackStatusImage'
        userId:
          type: integer
          format: int32
    kpack.build.v1alpha2.ClusterStackStatusImage:
      type: object
      properties:
        image:
          type: string
        latestImage:
          type: string
    kpack.build.v1alpha2.ClusterStore:
      required:
      - spec
      - status
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStoreSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStoreStatus'
    kpack.build.v1alpha2.ClusterStoreList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStore'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.ClusterStoreSpec:
      type: object
      properties:
        serviceAccountRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        sources:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.ImageSource'
          x-kubernetes-list-type: ""
    kpack.build.v1alpha2.ClusterStoreStatus:
      type: object
      properties:
        buildpacks:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackStatus'
          x-kubernetes-list-type: ""
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
    kpack.build.v1alpha2.CosignAnnotation:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    kpack.build.v1alpha2.CosignConfig:
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.CosignAnnotation'
          x-kubernetes-list-type: ""
    kpack.build.v1alpha2.CosignSignature:
      required:
      - signingSecret
      - targetDigest
      type: object
      properties:
        signingSecret:
          type: string
          default: ""
        targetDigest:
          type: string
          default: ""
    kpack.build.v1alpha2.Image:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ImageSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ImageStatus'
    kpack.build.v1alpha2.ImageBuild:
      type: object
      properties:
        affinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Affinity'
        buildTimeout:
          type: integer
          format: int64
        cnbBindings:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.CNBBinding'
          x-kubernetes-list-type: ""
        creationTime:
          type: string
        env:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVar'
          x-kubernetes-list-type: ""
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
        resources:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceRequirements'
        runtimeClassName:
          type: string
        schedulerName:
          type: string
        services:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          x-kubernetes-list-type: ""
        tolerations:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Toleration'
          x-kubernetes-list-type: ""
    kpack.build.v1alpha2.ImageBuilder:
      required:
      - name
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        name:
          type: string
          default: ""
    kpack.build.v1alpha2.ImageCacheConfig:
      type: object
      properties:
        registry:
          $ref: '#/components/schemas/kpack.build.v1alpha2.RegistryCache'
        volume:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ImagePersistentVolumeCache'
    kpack.build.v1alpha2.ImageList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.Image'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.ImagePersistentVolumeCache:
      type: object
      properties:
        size:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
        storageClassName:
          type: string
    kpack.build.v1alpha2.ImageSpec:
      required:
      - source
      - tag
      type: object
      properties:
        additionalTags:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
        build:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ImageBuild'
        builder:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        cache:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ImageCacheConfig'
        cosign:
          $ref: '#/components/schemas/kpack.build.v1alpha2.CosignConfig'
        defaultProcess:
          type: string
        failedBuildHistoryLimit:
          type: integer
          format: int64
        imageTaggingStrategy:
          type: string
        notary:
          $ref: '#/components/schemas/kpack.core.v1alpha1.NotaryConfig'
        projectDescriptorPath:
          type: string
        serviceAccountName:
          type: string
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.SourceConfig'
        successBuildHistoryLimit:
          type: integer
          format: int64
        tag:
          type: string
          default: ""
    kpack.build.v1alpha2.ImageStatus:
      type: object
      properties:
        buildCacheName:
          type: string
        buildCounter:
          type: integer
          format: int64
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        latestBuildImageGeneration:
          type: integer
          format: int64
        latestBuildReason:
          type: string
        latestBuildRef:
          type: string
        latestImage:
          type: string
        latestStack:
          type: string
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
    kpack.build.v1alpha2.LastBuild:
      type: object
      properties:
        cache:
          $ref: '#/components/schemas/kpack.build.v1alpha2.BuildCache'
        image:
          type: string
        stackId:
          type: string
    kpack.build.v1alpha2.NamespacedBuilderSpec:
      type: object
      properties:
        additionalLabels:
          type: object
          additionalProperties:
            type: string
            default: ""
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.BuilderOrderEntry'
          x-kubernetes-list-type: ""
        serviceAccount:
          type: string
        serviceAccountName:
          type: string
        stack:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        store:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
        tag:
          type: string
    kpack.build.v1alpha2.RegistryCache:
      required:
      - tag
      type: object
      properties:
        tag:
          type: string
          default: ""
    kpack.build.v1alpha2.ResolvedClusterStack:
      type: object
      properties:
        buildImage:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackStatusImage'
        groupId:
          type: integer
          format: int32
        id:
          type: string
        mixins:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
        runImage:
          $ref: '#/components/schemas/kpack.build.v1alpha2.ClusterStackStatusImage'
        userId:
          type: integer
          format: int32
    kpack.build.v1alpha2.SourceResolver:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/kpack.build.v1alpha2.SourceResolverSpec'
        status:
          $ref: '#/components/schemas/kpack.build.v1alpha2.SourceResolverStatus'
    kpack.build.v1alpha2.SourceResolverList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/kpack.build.v1alpha2.SourceResolver'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    kpack.build.v1alpha2.SourceResolverSpec:
      required:
      - source
      type: object
      properties:
        serviceAccount:
          type: string
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.SourceConfig'
    kpack.build.v1alpha2.SourceResolverStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        source:
          $ref: '#/components/schemas/kpack.core.v1alpha1.ResolvedSourceConfig'
    kpack.core.v1alpha1.Blob:
      required:
      - url
      type: object
      properties:
        stripComponents:
          type: integer
          format: int64
        url:
          type: string
          default: ""
    kpack.core.v1alpha1.BuildBuilderSpec:
      type: object
      properties:
        image:
          type: string
        imagePullSecrets:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: ""
          x-kubernetes-patch-merge-key: name
    kpack.core.v1alpha1.BuildStack:
      type: object
      properties:
        id:
          type: string
        runImage:
          type: string
    kpack.core.v1alpha1.BuildpackInfo:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          default: ""
        version:
          type: string
    kpack.core.v1alpha1.BuildpackMetadata:
      required:
      - id
      - version
      type: object
      properties:
        homepage:
          type: string
        id:
          type: string
          default: ""
        version:
          type: string
          default: ""
    kpack.core.v1alpha1.BuildpackRef:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          default: ""
        optional:
          type: boolean
        version:
          type: string
    kpack.core.v1alpha1.BuildpackStack:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          default: ""
        mixins:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: ""
    kpack.core.v1alpha1.BuildpackStatus:
      required:
      - id
      type: object
      properties:
        api:
          type: string
        buildpackage:
          $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackageInfo'
        diffId:
          type: string
        digest:
          type: string
        homepage:
          type: string
        id:
          type: string
          default: ""
        order:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.OrderEntry'
          x-kubernetes-list-type: ""
        size:
          type: integer
          format: int64
        stacks:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackStack'
          x-kubernetes-list-type: ""
        storeImage:
          $ref: '#/components/schemas/kpack.core.v1alpha1.ImageSource'
        version:
          type: string
    kpack.core.v1alpha1.BuildpackageInfo:
      type: object
      properties:
        homepage:
          type: string
        id:
          type: string
        version:
          type: string
    kpack.core.v1alpha1.CNBBinding:
      type: object
      properties:
        metadataRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
        name:
          type: string
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
    kpack.core.v1alpha1.Condition:
      required:
      - status
      - type
      type: object
      properties:
        lastTransitionTime:
          type: string
          description: LastTransitionTime is the last time the condition transitioned
            from one status to another. We use VolatileTime in place of metav1.Time
            to exclude this from creating equality.Semantic differences (all other
            things held constant).
        message:
          type: string
          description: A human readable message indicating details about the transition.
        reason:
          type: string
          description: The reason for the condition's last transition.
        severity:
          type: string
          description: "Severity with which to treat failures of this type of condition.\
            \ When this is not specified, it defaults to Error."
        status:
          type: string
          description: "Status of the condition, one of True, False, Unknown."
          default: ""
        type:
          type: string
          description: Type of condition.
          default: ""
      description: "Conditions defines a readiness condition for a Knative resource.\
        \ See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties"
    kpack.core.v1alpha1.Git:
      required:
      - revision
      - url
      type: object
      properties:
        initializeSubmodules:
          type: boolean
        revision:
          type: string
          default: ""
        url:
          type: string
          default: ""
    kpack.core.v1alpha1.ImageSource:
      type: object
      properties:
        image:
          type: string
    kpack.core.v1alpha1.NotaryConfig:
      type: object
      properties:
        v1:
          $ref: '#/components/schemas/kpack.core.v1alpha1.NotaryV1Config'
    kpack.core.v1alpha1.NotarySecretRef:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          default: ""
    kpack.core.v1alpha1.NotaryV1Config:
      required:
      - secretRef
      - url
      type: object
      properties:
        secretRef:
          $ref: '#/components/schemas/kpack.core.v1alpha1.NotarySecretRef'
        url:
          type: string
          default: ""
    kpack.core.v1alpha1.OrderEntry:
      type: object
      properties:
        group:
          type: array
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.BuildpackRef'
          x-kubernetes-list-type: ""
    kpack.core.v1alpha1.Registry:
      required:
      - image
      type: object
      properties:
        image:
          type: string
          default: ""
        imagePullSecrets:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: ""
          x-kubernetes-patch-merge-key: name
    kpack.core.v1alpha1.ResolvedBlobSource:
      required:
      - url
      type: object
      properties:
        stripComponents:
          type: integer
          format: int64
        subPath:
          type: string
        url:
          type: string
          default: ""
    kpack.core.v1alpha1.ResolvedGitSource:
      required:
      - revision
      - type
      - url
      type: object
      properties:
        initializeSubmodules:
          type: boolean
        revision:
          type: string
          default: ""
        subPath:
          type: string
        type:
          type: string
          default: ""
        url:
          type: string
          default: ""
    kpack.core.v1alpha1.ResolvedRegistrySource:
      required:
      - image
      type: object
      properties:
        image:
          type: string
          default: ""
        imagePullSecrets:
          type: array
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: ""
          x-kubernetes-patch-merge-key: name
        subPath:
          type: string
    kpack.core.v1alpha1.ResolvedSourceConfig:
      type: object
      properties:
        blob:
          $ref: '#/components/schemas/kpack.core.v1alpha1.ResolvedBlobSource'
        git:
          $ref: '#/components/schemas/kpack.core.v1alpha1.ResolvedGitSource'
        registry:
          $ref: '#/components/schemas/kpack.core.v1alpha1.ResolvedRegistrySource'
    kpack.core.v1alpha1.SourceConfig:
      type: object
      properties:
        blob:
          $ref: '#/components/schemas/kpack.core.v1alpha1.Blob'
        git:
          $ref: '#/components/schemas/kpack.core.v1alpha1.Git'
        registry:
          $ref: '#/components/schemas/kpack.core.v1alpha1.Registry'
        subPath:
          type: string
    kpack.core.v1alpha1.Status:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/kpack.core.v1alpha1.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
      description: "Status shows how we expect folks to embed Conditions in their\
        \ Status field. WARNING: Adding fields to this struct will add them to all\
        \ Knative resources."
    kpack.core.v1alpha1.VolatileTime:
      required:
      - inner
      type: object
      properties:
        inner:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: VolatileTime wraps metav1.Time
x-original-swagger-version: "2.0"
