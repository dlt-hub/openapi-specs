openapi: 3.0.1
info:
  title: Instagram API
  description: |
    Description of Instagram RESTful API.

    Current limitations:
      * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
      for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.
      * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)
      that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and
      started in [Sandbox Mode](http://instagram.com/developer/sandbox/).
      * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.

    **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses
    containing media objects no longer return the `data` field in `comments` and `likes` nodes.

    Last update: 2015-11-28
  termsOfService: https://instagram.com/about/legal/terms/api/
  contact:
    name: Instagram
    url: https://instagram.com/developer/support
  version: 1.0.0
  x-apisguru-categories:
  - social
  - media
  x-logo:
    url: https://twitter.com/instagram/profile_image?size=original
  x-origin:
  - format: swagger
    url: https://raw.githubusercontent.com/darklynx/swagger-api-collection/master/api/yaml/instagram.yaml
    version: "2.0"
  x-providerName: instagram.com
  x-unofficialSpec: true
externalDocs:
  description: Instagram Developer Documentation
  url: https://instagram.com/developer
servers:
- url: https://api.instagram.com/v1
tags:
- name: users
  description: Get information about users
- name: relationships
  description: Relationships to other users outgoing and incoming
- name: media
  description: Get information about media
- name: comments
  description: Manage comments
- name: likes
  description: Manage likes
- name: tags
  description: Get information about tags
- name: locations
  description: Get information about locations
- name: geographies
  description: Get geographies
paths:
  /geographies/{geo-id}/media/recent:
    get:
      tags:
      - geographies
      summary: Get recent media from a custom geo-id.
      description: |
        Get recent media from a geography subscription that you created.

        **Note:** You can only access Geographies that were explicitly created by your OAuth client. Check the
        Geography Subscriptions section of the [real-time updates page](https://instagram.com/developer/realtime/).
        When you create a subscription to some geography that you define, you will be returned a unique `geo-id` that
        can be used in this query. To backfill photos from the location covered by this geography, use the
        [media search endpoint](https://instagram.com/developer/endpoints/media/).

        **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
      parameters:
      - name: geo-id
        in: path
        description: The geography ID.
        required: true
        schema:
          type: string
      - name: count
        in: query
        description: Max number of media to return.
        schema:
          type: integer
          format: int32
      - name: min_id
        in: query
        description: Return media before this `min_id`.
        schema:
          type: string
      responses:
        "200":
          description: List of recent media entries from a geography subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaListResponse'
      deprecated: true
      security:
      - api_key: []
      - instagram_auth:
        - basic
  /locations/search:
    get:
      tags:
      - locations
      summary: Search for a location by geographic coordinate.
      description: Search for a location by geographic coordinate.
      parameters:
      - name: distance
        in: query
        description: "Default is 1000m (distance=1000), max distance is 5000."
        schema:
          type: integer
          format: int32
      - name: facebook_places_id
        in: query
        description: "Returns a location mapped off of a Facebook places id. If used,\
          \ a Foursquare id and `lat`, `lng` are not required."
        schema:
          type: string
      - name: foursquare_id
        in: query
        description: |
          Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use
          `lat` and `lng`. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.
        schema:
          type: string
      - name: lat
        in: query
        description: "Latitude of the center search coordinate. If used, `lng` is\
          \ required."
        schema:
          type: number
          format: double
      - name: lng
        in: query
        description: "Longitude of the center search coordinate. If used, `lat` is\
          \ required."
        schema:
          type: number
          format: double
      - name: foursquare_v2_id
        in: query
        description: |
          Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use
          `lat` and `lng`.
        schema:
          type: string
      responses:
        "200":
          description: List of found locations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationSearchResponse'
      security:
      - api_key: []
      - instagram_auth:
        - public_content
  /locations/{location-id}:
    get:
      tags:
      - locations
      summary: Get information about a location.
      description: Get information about a location.
      parameters:
      - name: location-id
        in: path
        description: The location ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Location information response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationInfoResponse'
      security:
      - api_key: []
      - instagram_auth:
        - public_content
  /locations/{location-id}/media/recent:
    get:
      tags:
      - locations
      summary: Get a list of recent media objects from a given location.
      description: Get a list of recent media objects from a given location.
      parameters:
      - name: location-id
        in: path
        description: The location ID.
        required: true
        schema:
          type: string
      - name: min_timestamp
        in: query
        description: Return media after this UNIX timestamp.
        schema:
          type: integer
          format: int64
      - name: max_timestamp
        in: query
        description: Return media before this UNIX timestamp.
        schema:
          type: integer
          format: int64
      - name: min_id
        in: query
        description: Return media before this `min_id`.
        schema:
          type: string
      - name: max_id
        in: query
        description: Return media after this `max_id`.
        schema:
          type: string
      responses:
        "200":
          description: List of media entries from this location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaListResponse'
      security:
      - api_key: []
      - instagram_auth:
        - public_content
  /media/popular:
    get:
      tags:
      - media
      summary: Get a list of currently popular media.
      description: |
        Get a list of what media is most popular at the moment. Can return mix of `image` and `video` types.

        **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
      responses:
        "200":
          description: Found media resources (without likes information).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaSearchResponse'
      deprecated: true
      security:
      - api_key: []
      - instagram_auth:
        - basic
  /media/search:
    get:
      tags:
      - media
      summary: Search for media in a given area.
      description: |
        Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days.
        Defaults time stamps cover the last 5 days. Can return mix of `image` and `video` types.
      parameters:
      - name: lat
        in: query
        description: "Latitude of the center search coordinate. If used, `lng` is\
          \ required."
        required: true
        schema:
          type: number
          format: double
      - name: lng
        in: query
        description: "Longitude of the center search coordinate. If used, `lat` is\
          \ required."
        required: true
        schema:
          type: number
          format: double
      - name: min_timestamp
        in: query
        description: A unix timestamp. All media returned will be taken later than
          this timestamp.
        schema:
          type: integer
          format: int64
      - name: max_timestamp
        in: query
        description: A unix timestamp. All media returned will be taken earlier than
          this timestamp.
        schema:
          type: integer
          format: int64
      - name: distance
        in: query
        description: "Default is 1km (distance=1000), max distance is 5km."
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Found media resources (without likes information) in a given
            area.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaSearchResponse'
      security:
      - api_key: []
      - instagram_auth:
        - public_content
  /media/shortcode/{shortcode}:
    get:
      tags:
      - media
      summary: Get information about a media object.
      description: |
        This endpoint returns the same response as `GET /media/{media-id}`.

        A media object's shortcode can be found in its shortlink URL. An example shortlink is
        `http://instagram.com/p/D/`, its corresponding shortcode is `D`.
      parameters:
      - name: shortcode
        in: path
        description: The short code of the media resource.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Media resource information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaEntryResponse'
      security:
      - api_key: []
      - instagram_auth:
        - basic
        - public_content
  /media/{media-id}:
    get:
      tags:
      - media
      summary: Get information about a media object.
      description: |
        Get information about a media object. The returned type key will allow you to differentiate between image and
        video media.

        **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells
        you whether the current user has liked this media item.
      parameters:
      - name: media-id
        in: path
        description: The ID of the media resource.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Media resource information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaEntryResponse'
      security:
      - api_key: []
      - instagram_auth:
        - basic
        - public_content
  /media/{media-id}/comments:
    get:
      tags:
      - comments
      summary: Get a list of recent comments on a media object.
      description: Get a list of recent comments on a media object.
      parameters:
      - name: media-id
        in: path
        description: The ID of the media resource.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of comments of the media resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsResponse'
      security:
      - api_key: []
      - instagram_auth:
        - basic
        - public_content
    post:
      tags:
      - comments
      summary: Create a comment on a media object.
      description: |
        Create a comment on a media object with the following rules:

          * The total length of the comment cannot exceed 300 characters.
          * The comment cannot contain more than 4 hashtags.
          * The comment cannot contain more than 1 URL.
          * The comment cannot consist of all capital letters.
      parameters:
      - name: media-id
        in: path
        description: The ID of the media resource.
        required: true
        schema:
          type: string
      - name: text
        in: query
        description: Text to post as a comment on the media object as specified in
          `media-id`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Result of posting a comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      security:
      - api_key: []
      - instagram_auth:
        - comments
  /media/{media-id}/comments/{comment-id}:
    delete:
      tags:
      - comments
      summary: Remove a comment.
      description: |
        Remove a comment either on the authenticated user's media object or authored by the authenticated user.
      parameters:
      - name: media-id
        in: path
        description: The ID of the media resource.
        required: true
        schema:
          type: string
      - name: comment-id
        in: path
        description: The ID of the comment entry.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Result of deleting a comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      security:
      - api_key: []
      - instagram_auth:
        - comments
  /media/{media-id}/likes:
    get:
      tags:
      - likes
      summary: Get a list of users who have liked this media.
      description: Get a list of users who have liked this media.
      parameters:
      - name: media-id
        in: path
        description: The ID of the media resource.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of users who liked the media resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersInfoResponse'
      security:
      - api_key: []
      - instagram_auth:
        - basic
        - public_content
    post:
      tags:
      - likes
      summary: Set a like on this media by the current user.
      description: Set a like on this media by the currently authenticated user.
      parameters:
      - name: media-id
        in: path
        description: The ID of the media resource.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Result of setting a like.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      security:
      - api_key: []
      - instagram_auth:
        - likes
    delete:
      tags:
      - likes
      summary: Remove a like on this media by the current user.
      description: Remove a like on this media by the currently authenticated user.
      parameters:
      - name: media-id
        in: path
        description: The ID of the media resource.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Result of removing a like.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      security:
      - api_key: []
      - instagram_auth:
        - likes
  /tags/search:
    get:
      tags:
      - tags
      summary: Search for tags by name.
      description: Search for tags by name.
      parameters:
      - name: q
        in: query
        description: "A valid tag name without a leading \\#. (eg. snowy, nofilter)"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of found tags and their statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSearchResponse'
      security:
      - api_key: []
      - instagram_auth:
        - public_content
  /tags/{tag-name}:
    get:
      tags:
      - tags
      summary: Get information about a tag object.
      description: Get information about a tag object.
      parameters:
      - name: tag-name
        in: path
        description: The tag name.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Tag information response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagInfoResponse'
      security:
      - api_key: []
      - instagram_auth:
        - public_content
  /tags/{tag-name}/media/recent:
    get:
      tags:
      - tags
      summary: Get a list of recently tagged media.
      description: |
        Get a list of recently tagged media. Use the `max_tag_id` and `min_tag_id` parameters in the pagination
        response to paginate through these objects.
      parameters:
      - name: tag-name
        in: path
        description: The tag name.
        required: true
        schema:
          type: string
      - name: count
        in: query
        description: Count of tagged media to return.
        schema:
          type: integer
      - name: min_tag_id
        in: query
        description: Return media before this `min_tag_id`.
        schema:
          type: string
      - name: max_tag_id
        in: query
        description: Return media after this `max_tag_id`.
        schema:
          type: string
      responses:
        "200":
          description: List of media entries with this tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMediaListResponse'
      security:
      - api_key: []
      - instagram_auth:
        - public_content
  /users/search:
    get:
      tags:
      - users
      summary: Search for a user by name.
      description: Search for a user by name.
      parameters:
      - name: q
        in: query
        description: A query string.
        required: true
        schema:
          type: string
      - name: count
        in: query
        description: Number of users to return.
        schema:
          type: integer
      responses:
        "200":
          description: List of found users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersInfoResponse'
      security:
      - api_key: []
      - instagram_auth:
        - basic
  /users/self/feed:
    get:
      tags:
      - users
      summary: See the authenticated user's feed.
      description: |
        See the authenticated user's feed.

        **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015
      parameters:
      - name: count
        in: query
        description: Count of media to return.
        schema:
          type: integer
      - name: min_id
        in: query
        description: Return media later than this `min_id`.
        schema:
          type: string
      - name: max_id
        in: query
        description: Return media earlier than this `max_id`.
        schema:
          type: string
      responses:
        "200":
          description: Users feed entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaListResponse'
      deprecated: true
      security:
      - api_key: []
      - instagram_auth:
        - basic
  /users/self/media/liked:
    get:
      tags:
      - users
      summary: See the list of media liked by the authenticated user.
      description: |
        See the list of media liked by the authenticated user. Private media is returned as long as the authenticated
        user has permission to view that media. Liked media lists are only available for the currently authenticated
        user.
      parameters:
      - name: count
        in: query
        description: Count of media to return.
        schema:
          type: integer
      - name: max_like_id
        in: query
        description: Return media liked before this id.
        schema:
          type: string
      responses:
        "200":
          description: Users media entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaListResponse'
      security:
      - api_key: []
      - instagram_auth:
        - basic
  /users/self/requested-by:
    get:
      tags:
      - relationships
      summary: List the users who have requested this user's permission to follow.
      description: List the users who have requested this user's permission to follow.
      responses:
        "200":
          description: List of users who have requested this user's permission to
            follow.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersInfoResponse'
      security:
      - api_key: []
      - instagram_auth:
        - follower_list
  /users/{user-id}:
    get:
      tags:
      - users
      summary: Get basic information about a user.
      description: |
        Get basic information about a user. To get information about the owner of the access token, you can use
        **self** instead of the `user-id`.

        Security scope `public_content` is required to read information about other users.
      parameters:
      - name: user-id
        in: path
        description: "The ID of a user to get information about, or **self** to retrieve\
          \ information about authenticated user."
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User basic information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: "Not Found, user with such ID does not exist."
          content: {}
      security:
      - api_key: []
      - instagram_auth:
        - basic
        - public_content
  /users/{user-id}/followed-by:
    get:
      tags:
      - relationships
      summary: Get the list of users this user is followed by.
      description: |
        Get the list of users this user is followed by. To get users followed by the owner of the access token, you
        can use **self** instead of the `user-id`.
      parameters:
      - name: user-id
        in: path
        description: "The ID of a user, or **self** to retrieve information about\
          \ authenticated user."
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of users this user is followed by.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPagingResponse'
      security:
      - api_key: []
      - instagram_auth:
        - follower_list
  /users/{user-id}/follows:
    get:
      tags:
      - relationships
      summary: Get the list of users this user follows.
      description: |
        Get the list of users this user follows. To get follows of the owner of the access token, you can use **self**
        instead of the `user-id`.
      parameters:
      - name: user-id
        in: path
        description: "The ID of a user, or **self** to retrieve information about\
          \ authenticated user."
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of users this user follows.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPagingResponse'
      security:
      - api_key: []
      - instagram_auth:
        - follower_list
  /users/{user-id}/media/recent:
    get:
      tags:
      - users
      summary: Get the most recent media published by a user.
      description: |
        Get the most recent media published by a user. To get the most recent media published by the owner of the
        access token, you can use **self** instead of the `user-id`.

        Security scope `public_content` is required to read information about other users.
      parameters:
      - name: user-id
        in: path
        description: "The ID of a user to get recent media of, or **self** to retrieve\
          \ media of authenticated user."
        required: true
        schema:
          type: string
      - name: count
        in: query
        description: Count of media to return.
        schema:
          type: integer
      - name: max_timestamp
        in: query
        description: Return media before this UNIX timestamp.
        schema:
          type: integer
          format: int64
      - name: min_timestamp
        in: query
        description: Return media after this UNIX timestamp.
        schema:
          type: integer
          format: int64
      - name: min_id
        in: query
        description: Return media later than this `min_id`.
        schema:
          type: string
      - name: max_id
        in: query
        description: Return media earlier than this `max_id`.
        schema:
          type: string
      responses:
        "200":
          description: Users media entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaListResponse'
      security:
      - api_key: []
      - instagram_auth:
        - basic
        - public_content
  /users/{user-id}/relationship:
    get:
      tags:
      - relationships
      summary: Get information about a relationship to another user.
      description: Get information about a relationship to another user.
      parameters:
      - name: user-id
        in: path
        description: The ID of a user to get information about.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Relationship information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
      security:
      - api_key: []
      - instagram_auth:
        - follower_list
    post:
      tags:
      - relationships
      summary: Modify the relationship between the current user and the target user.
      description: Modify the relationship between the current user and the target
        user.
      parameters:
      - name: user-id
        in: path
        description: The ID of the target user.
        required: true
        schema:
          type: string
      - name: action
        in: query
        description: Type of action to apply for relationship with the user.
        required: true
        schema:
          type: string
          enum:
          - follow
          - unfollow
          - block
          - unblock
          - approve
          - ignore
      responses:
        "200":
          description: Relationship information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipPostResponse'
      security:
      - api_key: []
      - instagram_auth:
        - relationships
components:
  schemas:
    CaptionData:
      type: object
      properties:
        created_time:
          type: string
          description: Caption creation UNIX timestamp
        from:
          $ref: '#/components/schemas/UserShortInfo'
        id:
          type: string
          description: ID of this caption
        text:
          type: string
          description: Caption text
    CommentEntry:
      type: object
      properties:
        created_time:
          type: string
          description: Comment creation UNIX timestamp
        from:
          $ref: '#/components/schemas/UserShortInfo'
        id:
          type: string
          description: ID of this comment
        text:
          type: string
          description: Text of the comment
    CommentsCollection:
      type: object
      properties:
        count:
          type: integer
          description: "Nember of comments available, data does not necessary contain\
            \ all comments"
        data:
          type: array
          description: "Collection of comment entries; **warning:** deprecated for\
            \ Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/)"
          items:
            $ref: '#/components/schemas/CommentEntry'
    CommentsResponse:
      type: object
      properties:
        data:
          type: array
          description: Collection of comments
          items:
            $ref: '#/components/schemas/CommentEntry'
        meta:
          $ref: '#/components/schemas/MetaData'
    CursorPaginationInfo:
      type: object
      properties:
        next_cursor:
          type: string
          description: The cursor ID of the next page
        next_url:
          type: string
          description: URL to retrieve next page of entries
    IdPaginationInfo:
      type: object
      properties:
        next_max_id:
          type: string
          description: The max ID of the next page
        next_url:
          type: string
          description: URL to retrieve next page of entries
    ImageInfo:
      type: object
      properties:
        height:
          type: integer
          description: Image/video height in pixels
        url:
          type: string
          description: URL of the image/video resource
        width:
          type: integer
          description: Image/video width in pixels
    ImagesData:
      type: object
      properties:
        low_resolution:
          $ref: '#/components/schemas/ImageInfo'
        standard_resolution:
          $ref: '#/components/schemas/ImageInfo'
        thumbnail:
          $ref: '#/components/schemas/ImageInfo'
    LikesCollection:
      type: object
      properties:
        count:
          type: integer
          description: "Nember of likes available, data does not necessary contain\
            \ all comments"
        data:
          type: array
          description: "Collection of users who liked; **warning:** deprecated for\
            \ Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/)"
          items:
            $ref: '#/components/schemas/UserShortInfo'
    LocationInfo:
      type: object
      properties:
        id:
          type: string
          description: ID of this location (in some responses it has a type of 'integer')
        latitude:
          type: number
          description: Location latitude
          format: double
        longitude:
          type: number
          description: Location longitude
          format: double
        name:
          type: string
          description: Location name
    LocationInfoResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LocationInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
    LocationSearchResponse:
      type: object
      properties:
        data:
          type: array
          description: List of found locations
          items:
            $ref: '#/components/schemas/LocationInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
    MediaEntry:
      type: object
      properties:
        attribution:
          type: string
          description: ??? Unknown ???
        caption:
          $ref: '#/components/schemas/CaptionData'
        comments:
          $ref: '#/components/schemas/CommentsCollection'
        created_time:
          type: string
          description: Media creation UNIX timestamp
        filter:
          type: string
          description: Filter of this media entry
        id:
          type: string
          description: ID of a media entry
        images:
          $ref: '#/components/schemas/ImagesData'
        likes:
          $ref: '#/components/schemas/LikesCollection'
        link:
          type: string
          description: Fixed URL of this media entry
        location:
          $ref: '#/components/schemas/LocationInfo'
        tags:
          type: array
          description: List of tags assigned to this media
          items:
            type: string
        type:
          type: string
          description: Type of this media entry
          enum:
          - image
          - video
        user:
          $ref: '#/components/schemas/UserShortInfo'
        user_has_liked:
          type: boolean
          description: Indicates whether authenticated user has liked this media or
            not
        users_in_photo:
          type: array
          description: Users located on this media entry
          items:
            $ref: '#/components/schemas/UserInPhoto'
        videos:
          $ref: '#/components/schemas/VideosData'
    MediaEntryResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MediaEntry'
        meta:
          $ref: '#/components/schemas/MetaData'
    MediaListResponse:
      type: object
      properties:
        data:
          type: array
          description: List of media entries
          items:
            $ref: '#/components/schemas/MediaEntry'
        meta:
          $ref: '#/components/schemas/MetaData'
        pagination:
          $ref: '#/components/schemas/IdPaginationInfo'
    MediaSearchResponse:
      type: object
      properties:
        data:
          type: array
          description: Found media entries; some end-points do not return likes informtaion
          items:
            $ref: '#/components/schemas/MediaEntry'
        meta:
          $ref: '#/components/schemas/MetaData'
    MetaData:
      type: object
      properties:
        code:
          type: integer
          description: HTTP result code
          format: int32
    Position:
      type: object
      properties:
        x:
          type: number
          description: X position (horizontal)
          format: float
        "y":
          type: number
          description: Y position (vertical)
          format: float
    RelationshipInfo:
      type: object
      properties:
        incoming_status:
          type: string
          description: Status of incoming relationship
          enum:
          - none
          - followed_by
          - requested_by
        outgoing_status:
          type: string
          description: Status of outgoing relationship
          enum:
          - none
          - follows
          - requested
        target_user_is_private:
          type: boolean
          description: Indicates whether target user is private or not
    RelationshipPostResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RelationshipStatus'
        meta:
          $ref: '#/components/schemas/MetaData'
    RelationshipResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RelationshipInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
    RelationshipStatus:
      type: object
      properties:
        outgoing_status:
          type: string
          description: Status of outgoing relationship
          enum:
          - none
          - follows
          - requested
    StatusResponse:
      type: object
      properties:
        data:
          type: string
          description: No data - 'null'
        meta:
          $ref: '#/components/schemas/MetaData'
    TagInfo:
      type: object
      properties:
        media_count:
          type: integer
          description: Overall number of media entries taged with this name
          format: int64
        name:
          type: string
          description: Tag name
    TagInfoResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TagInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
    TagMediaListResponse:
      type: object
      properties:
        data:
          type: array
          description: List of media entries with this tag
          items:
            $ref: '#/components/schemas/MediaEntry'
        meta:
          $ref: '#/components/schemas/MetaData'
        pagination:
          $ref: '#/components/schemas/TagPaginationInfo'
    TagPaginationInfo:
      type: object
      properties:
        deprecation_warning:
          type: string
          description: "The deprication warning, if information is available"
        min_tag_id:
          type: string
          description: The min ID of a tag for the next page
        next_max_id:
          type: string
          description: Depricated. Use min_tag_id instead
        next_max_tag_id:
          type: string
          description: The max ID of a tag for the next page
        next_min_id:
          type: string
          description: Depricated. Use max_tag_id instead
        next_url:
          type: string
          description: URL to retrieve next page of entries
    TagSearchResponse:
      type: object
      properties:
        data:
          type: array
          description: List of found tags with brief statistics
          items:
            $ref: '#/components/schemas/TagInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
    UserCounts:
      type: object
      properties:
        followed_by:
          type: integer
          description: Number of followers of this user
          format: int32
        follows:
          type: integer
          description: Number of users followed by this user
          format: int32
        media:
          type: integer
          description: Number of user media
          format: int32
    UserInPhoto:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Position'
        user:
          $ref: '#/components/schemas/UserShortInfo'
    UserInfo:
      type: object
      properties:
        bio:
          type: string
          description: User biography
        counts:
          $ref: '#/components/schemas/UserCounts'
        full_name:
          type: string
          description: User full name
        id:
          type: string
          description: User ID
        profile_picture:
          type: string
          description: URL to user profile picture
        username:
          type: string
          description: "User name, nickname"
        website:
          type: string
          description: URL to user web-site
    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
    UserShortInfo:
      type: object
      properties:
        full_name:
          type: string
          description: User full name
        id:
          type: string
          description: User ID
        profile_picture:
          type: string
          description: URL to user profile picture
        username:
          type: string
          description: "User name, nickname"
    UsersInfoResponse:
      type: object
      properties:
        data:
          type: array
          description: User short information entries
          items:
            $ref: '#/components/schemas/UserShortInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
    UsersPagingResponse:
      type: object
      properties:
        data:
          type: array
          description: List of user short information entries
          items:
            $ref: '#/components/schemas/UserShortInfo'
        meta:
          $ref: '#/components/schemas/MetaData'
        pagination:
          $ref: '#/components/schemas/CursorPaginationInfo'
    VideosData:
      type: object
      properties:
        low_resolution:
          $ref: '#/components/schemas/ImageInfo'
        standard_resolution:
          $ref: '#/components/schemas/ImageInfo'
  securitySchemes:
    api_key:
      type: apiKey
      name: access_token
      in: query
    instagram_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://instagram.com/oauth/authorize/
          scopes:
            basic: to read a user's profile info and media (granted by default)
            comments: to post and delete comments on a user's behalf
            follower_list: to read the list of followers and followed-by users
            likes: to like and unlike media on a user's behalf
            public_content: to read any public profile info and media on a user’s
              behalf
            relationships: to follow and unfollow accounts on a user's behalf
x-original-swagger-version: "2.0"
