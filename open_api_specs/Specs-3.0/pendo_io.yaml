openapi: 3.0.1
info:
  title: Pendo Feedback API
  description: |-
    ## Who is this for?

    This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.

    ## Authentication

    API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.

    ## Endpoint

    API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.

    ## Notes

    API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.

    ## Generating client code

    This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
  contact:
    name: Feedback Support
    email: support@receptive.io
  version: 1.0.0
  x-apisguru-categories:
  - ecommerce
  x-logo:
    url: https://twitter.com/receptiveio/profile_image?size=original
  x-origin:
  - format: swagger
    url: http://apidoc.receptive.io/receptive.swagger.json
    version: "2.0"
  x-providerName: pendo.io
servers:
- url: https://api.feedback.eu.pendo.io/
security:
- userApiKey (request header): []
- userApiKey (query parameter): []
paths:
  /accounts:
    get:
      tags:
      - account
      summary: Query accounts
      parameters:
      - name: limit
        in: query
        description: Limit the number of records returned
        schema:
          minimum: 0
          type: number
      - name: start
        in: query
        description: Offset to start at
        schema:
          minimum: 0
          type: number
      - name: order_dir
        in: query
        description: The sort direction
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: order_by
        in: query
        description: The field to use for sort
        schema:
          type: string
          enum:
          - churned
          - last_seen
          - name
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
  /accounts/{id}:
    get:
      tags:
      - account
      summary: Get an Account
      parameters:
      - name: id
        in: path
        description: Account ID (generated by Feedback)
        required: true
        schema:
          type: number
      responses:
        "200":
          description: an Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "410":
          description: Resource has been deleted
          headers:
            status:
              schema:
                type: integer
          content: {}
    put:
      tags:
      - account
      summary: Update an Account
      parameters:
      - name: id
        in: path
        description: Account ID (generated by Feedback)
        required: true
        schema:
          type: number
      requestBody:
        description: Updated Account values
        content:
          '*/*':
            schema:
              type: object
              properties:
                monthly_value:
                  type: number
                  format: float
                name:
                  type: string
                status:
                  type: string
                  enum:
                  - paying
                  - prospect
                  - not_paying
        required: false
      responses:
        "200":
          description: Success
          content: {}
      x-codegen-request-body-name: account
    delete:
      tags:
      - account
      summary: Delete an Account
      description: This removes most traces of an Accounts existence from the system.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: number
      responses:
        "200":
          description: the deleted Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  /accounts/{id}/tags:
    get:
      tags:
      - account
      summary: Get custom Account tags
      parameters:
      - name: id
        in: path
        description: Account ID (generated by Feedback)
        required: true
        schema:
          type: number
      responses:
        "200":
          description: |-
            Returns an array of maps specifying tags under each tag group, for example:

            [

            {'impacts' => ['sales']},

            {'resources' => ['dev', 'test', 'support']}

            ]
          content: {}
        "404":
          description: Account not found
          content: {}
    post:
      tags:
      - account
      summary: Overwrite current custom Account tags with the given tags
      parameters:
      - name: id
        in: path
        description: Account ID (generated by Feedback)
        required: true
        schema:
          type: number
      requestBody:
        description: |-
          An array of maps specifying tags under each tag group, for example:

          [

          {'impacts' => ['sales']},

          {'resources' => ['dev', 'test', 'support']}

          ]
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tags'
        required: true
      responses:
        "200":
          description: Updated Account tags
          content: {}
        "404":
          description: Account not found
          content: {}
      x-codegen-request-body-name: tags
    delete:
      tags:
      - account
      summary: Delete custom Account tags
      description: Removes all custom tags associated with the Account
      parameters:
      - name: id
        in: path
        description: Account ID (generated by Feedback)
        required: true
        schema:
          type: number
      responses:
        "200":
          description: success
          content: {}
  /comments:
    get:
      tags:
      - comment
      summary: fetch Comment records
      description: get a list of Comment records
      parameters:
      - name: case_id
        in: query
        description: case_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Comment records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  /features:
    get:
      tags:
      - feature
      summary: Query features
      parameters:
      - name: limit
        in: query
        description: Limit the number of records returned
        schema:
          minimum: 0
          type: number
      - name: start
        in: query
        description: Offset to start at
        schema:
          minimum: 0
          type: number
      - name: order_dir
        in: query
        description: The sort direction
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: is_private
        in: query
        description: "Filter by whether the features are shown/hidden from customer,\
          \ if supplied."
        schema:
          type: boolean
      - name: wanted_by
        in: query
        description: "Filter by User ID, if supplied."
        schema:
          type: integer
      - name: order_by
        in: query
        description: The field to use for sort
        schema:
          type: string
          enum:
          - title
          - created_at
          - updated_at
          - declined_at
          - developing_at
          - planned_at
          - released_at
          - waiting_at
          - deleted_at
      - name: tags
        in: query
        description: "Tags to limit results by. Multiple tags can be provided via\
          \ comma delimeted string. Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\"\
          ."
        schema:
          type: string
      - name: products
        in: query
        description: "Products to limit results by. Comma delimeted string of either\
          \ ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\"\
          ."
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /features/{id}:
    get:
      tags:
      - feature
      summary: Get a Feature by ID
      parameters:
      - name: id
        in: path
        description: ID of the feature
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
  /features/{id}/tags:
    get:
      tags:
      - feature
      summary: Get custom Feature tags
      parameters:
      - name: id
        in: path
        description: Account ID (generated by Feedback)
        required: true
        schema:
          type: number
      responses:
        "200":
          description: |-
            Returns an array of maps specifying tags under each tag group, for example:

            [

            {'impacts' => ['sales']},

            {'resources' => ['dev', 'test', 'support']}

            ]
          content: {}
        "404":
          description: Feature not found
          content: {}
    post:
      tags:
      - feature
      summary: Overwrite current custom Feature tags with the given tags
      parameters:
      - name: id
        in: path
        description: Feedback's Feature ID
        required: true
        schema:
          type: number
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tags'
        required: true
      responses:
        "200":
          description: Updated Feature tags
          content: {}
        "404":
          description: Feature not found
          content: {}
      x-codegen-request-body-name: tags
    delete:
      tags:
      - feature
      summary: Delete custom Feature tags
      description: Removes all custom tags associated with the Feature
      parameters:
      - name: id
        in: path
        description: Feedback's Feature ID
        required: true
        schema:
          type: number
      responses:
        "200":
          description: success
          content: {}
  /health-check/ping:
    get:
      tags:
      - system
      summary: Health check for API
      description: Provides a response for automatic checks that the API and load
        balancers are healthy
      responses:
        "200":
          description: API is healthy
          content: {}
        "503":
          description: Load balancers cannot route a request to a healthy API server
          content: {}
      security: []
  /hooks:
    post:
      tags:
      - hooks
      summary: Subscribe to webhooks
      description: Use this endpoint to subscribe to webhooks.
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                event:
                  type: string
                  description: |-
                    The event field can contain one of the following values-
                    1) 'feature_created' - When a new feature is created a webhook will be triggered with the details of the feature. Feature details can be found in the model section under Feature object
                    2) 'feature_status_changed' - When a feature status is updated a webhook will be triggered with the updated Feature details. Feature details can be found in the model section under Feature object.
                    3) 'feature_comment_created' - When a commment is created on a feature, a webhook will be triggered with the details about the Feature and the new comment. Feature and Comment details can be found in the model section under Feature object and Comment object.
                target_url:
                  type: string
                  description: The target URL where the events will be sent to.
        required: true
      responses:
        "200":
          description: Successfully subscribed to the weebhooks
          content: {}
      x-codegen-request-body-name: data
  /hooks/unsubscribe:
    post:
      tags:
      - hooks
      summary: Unsubscribe from webhooks
      description: Use this endpoint to unsubscribe from a webhook
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                target_url:
                  type: string
        required: true
      responses:
        "200":
          description: Successfully unsubscribed from the weebhooks
          content: {}
      x-codegen-request-body-name: data
  /search:
    get:
      tags:
      - feature
      summary: Search features
      parameters:
      - name: scope
        in: query
        description: Specifies the type of entity being searched for. Must be set
          to 'feature'
        required: true
        schema:
          type: string
          enum:
          - feature
      - name: q
        in: query
        description: The search term.
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: "A comma seperated list of status values to filter by, if required.\
          \ Valid values: 'new', 'waiting', 'planned', 'developing', 'released', 'declined'."
        schema:
          type: string
          enum:
          - new
          - waiting
          - planned
          - developing
          - released
          - declined
      - name: tags
        in: query
        description: "Tags to limit results by - only applies when scope is 'case'\
          \ or 'feature'. Multiple tags can be provided via comma delimeted string.\
          \ Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\"\
          ."
        schema:
          type: string
      - name: products
        in: query
        description: "Products to limit results by. Comma delimeted string of either\
          \ ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\"\
          ."
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /users:
    get:
      tags:
      - user
      summary: fetch User records
      description: get a list of User records
      parameters:
      - name: role
        in: query
        description: role
        required: true
        schema:
          type: string
          enum:
          - endUser
          - vendorUser
      - name: account
        in: query
        description: "Filter by Account ID, if supplied. Only useful if role param\
          \ is endUser"
        schema:
          type: integer
      - name: start
        in: query
        description: Offset to start at
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: limit
        in: query
        description: Limit the number of records returned. Max value can be 300. If
          limit is set to more than 300 the api will return an error
        schema:
          type: integer
          default: 300
      - name: order_by
        in: query
        description: The field to use for sort
        schema:
          type: string
      - name: order_dir
        in: query
        description: The sort direction
        schema:
          type: string
          enum:
          - asc
          - desc
      responses:
        "200":
          description: User records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - user
      summary: Ping to create or update an EndUser and Account in one call
      description: "Replicates much of the functionality of the widget ping, allowing\
        \ callers to create or update User records for End Users. If you call this\
        \ with a new User and/or Account, the record will be created. If you call\
        \ for an existing User/Account, the record will be updated. You can also call\
        \ this at EndUser login time, or more frequently, to notify Feedback that\
        \ the EndUser has been seen. This keeps Feedback's 'last seen' data fresh\
        \ and updates your reporting. This endpoint is used by our Zapier integration.\
        \ The only value allowed in user.roles is 'endUser'. The id you supply here\
        \ for the User and Account should be your own unique id, which Feedback calls\
        \ external_id. This probably isn't the same as Feedback's id seen elsewhere\
        \ in the API."
      requestBody:
        description: the account and user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndUserPing'
        required: true
      responses:
        "200":
          description: Success
          content: {}
      x-codegen-request-body-name: data
  /users/invite_end_user:
    post:
      tags:
      - user
      summary: Invite an EndUser (customer)
      requestBody:
        content:
          '*/*':
            schema:
              required:
              - account_status
              type: object
              properties:
                account_external_id:
                  type: string
                account_name:
                  type: string
                account_status:
                  type: string
                  enum:
                  - prospect
                  - not_paying
                  - paying
                email:
                  type: string
                full_name:
                  type: string
                monthly_value:
                  type: number
                  format: float
                send_invite:
                  type: boolean
                user_external_id:
                  type: string
        required: true
      responses:
        "200":
          description: success
          content: {}
      x-codegen-request-body-name: data
  /users/invite_vendor_user:
    post:
      tags:
      - user
      - team
      summary: Invite a VendorUser (Team member)
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - full_name
              type: object
              properties:
                email:
                  type: string
                external_id:
                  type: string
                full_name:
                  type: string
                permission_group_id:
                  type: number
                  format: integer
                team:
                  type: string
        required: true
      responses:
        "200":
          description: success
          content: {}
      x-codegen-request-body-name: data
  /users/search:
    get:
      tags:
      - user
      summary: Find a User with a query
      parameters:
      - name: external_id
        in: query
        description: "Find using your external ID, rather than the ID generated by\
          \ Feedback"
        schema:
          type: string
      - name: email
        in: query
        description: Find user by their email address. Role param must be specified
          when using this option
        schema:
          type: string
      - name: role
        in: query
        description: Users role ('vendorUser' or 'endUser'). Only useful when finding
          a user by their email address
        schema:
          type: string
          enum:
          - endUser
          - vendorUser
      responses:
        "200":
          description: the User record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "410":
          description: User has been deleted
          content: {}
  /users/{id}:
    get:
      tags:
      - user
      summary: Get a User record
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: number
      responses:
        "200":
          description: the User record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "410":
          description: User has been deleted
          content: {}
    put:
      tags:
      - user
      summary: Update a User
      parameters:
      - name: id
        in: path
        description: Feedback's User ID
        required: true
        schema:
          type: number
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                email:
                  type: string
                external_id:
                  type: string
                name:
                  type: string
                permission_group_id:
                  type: number
                  description: only valid for users with role 'vendorUser'
                  format: integer
        required: false
      responses:
        "200":
          description: updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-codegen-request-body-name: user
    delete:
      tags:
      - user
      summary: Delete a User
      description: This removes most traces of a User's existence from the system.
        For an EndUser you might want to consider just letting them churn after a
        period of inactivity.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: number
      responses:
        "200":
          description: the deleted User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/tags:
    get:
      tags:
      - user
      summary: Get custom User tags
      parameters:
      - name: id
        in: path
        description: Feedback's User ID
        required: true
        schema:
          type: number
      responses:
        "200":
          description: |-
            Returns an array of maps specifying tags under each tag group, for example:

            [

            {'impacts' => ['sales']},

            {'resources' => ['dev', 'test', 'support']}

            ]
          content: {}
        "404":
          description: User not found
          content: {}
    post:
      tags:
      - user
      summary: Overwrite current custom User tags with the given tags
      parameters:
      - name: id
        in: path
        description: Feedback's User ID
        required: true
        schema:
          type: number
      requestBody:
        description: |-
          An array of maps specifying tags under each tag group, for example:

          [

          {'impacts' => ['sales']},

          {'resources' => ['dev', 'test', 'support']}

          ]
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tags'
        required: true
      responses:
        "200":
          description: Updated User tags
          content: {}
        "404":
          description: User not found
          content: {}
      x-codegen-request-body-name: tags
    delete:
      tags:
      - user
      summary: Delete custom User tags
      description: Removes all custom tags associated with the User
      parameters:
      - name: id
        in: path
        description: Feedback's User ID
        required: true
        schema:
          type: number
      responses:
        "200":
          description: success
          content: {}
  /vendor_users:
    post:
      tags:
      - user
      - team
      summary: Create or update a team member by their external_id
      description: "the POST /vendor_users is very similar to the POST /users/invite_vendor_user\
        \ but /vendor_users is intended for consumers to refresh team member data\
        \ periodically, rather than just a one-off user creation."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                external_id:
                  type: string
                full_name:
                  type: string
                permission_group_id:
                  type: number
                  format: integer
                team:
                  type: string
                  description: A comma seperated list of teams the user belongs to
        required: true
      responses:
        "200":
          description: success
          content: {}
      x-codegen-request-body-name: data
  /votes:
    get:
      tags:
      - votes
      parameters:
      - name: user_id
        in: query
        description: Include only votes by User that voted on a feature.
        schema:
          type: integer
      - name: feature_id
        in: query
        description: Include only votes for Feature with this Feature ID
        schema:
          type: integer
      - name: positive
        in: query
        description: Include only votes that are positive
        schema:
          type: boolean
      - name: negative
        in: query
        description: Include only votes that are negative
        schema:
          type: boolean
      - name: offset
        in: query
        description: Offset to start at
        schema:
          minimum: 0
          type: number
      - name: limit
        in: query
        description: Limit the number of records returned
        schema:
          minimum: 0
          type: number
      responses:
        "200":
          description: Vote records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
    post:
      tags:
      - votes
      summary: update specified votes for a User
      description: Automatically subscribes/unsubscribes the User to the specifed
        feature depending on the quantity value
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                user_id:
                  type: string
                votes:
                  type: array
                  items:
                    $ref: '#/components/schemas/FeatureVote'
        required: true
      responses:
        "200":
          description: Updated votes
          content: {}
      x-codegen-request-body-name: data
components:
  schemas:
    Account:
      type: object
      properties:
        created_at:
          type: string
          format: dateTime
        external_id:
          type: string
          description: "ID for the Account, provided by the Feedback Customer"
        id:
          type: string
        is_paying:
          type: boolean
        monthly_value:
          type: number
          format: float
        name:
          type: string
        status:
          type: string
    AccountWithTags:
      type: object
      properties:
        created_at:
          type: string
          format: dateTime
        id:
          type: string
        is_paying:
          type: boolean
        monthly_value:
          type: number
          format: float
        name:
          type: string
        status:
          type: string
        tags:
          $ref: '#/components/schemas/Tags'
    Comment:
      type: object
      properties:
        created_at:
          type: string
          format: dateTime
        feature_id:
          type: integer
        is_private:
          type: boolean
          description: Is this Comment hidden from EndUsers?
        text:
          type: string
        updated_at:
          type: string
          format: dateTime
        user_id:
          type: integer
    EndUserPing:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountWithTags'
        return_url:
          type: string
        user:
          type: object
          properties:
            allowed_products:
              $ref: '#/components/schemas/Products'
            created_at:
              type: string
              format: dateTime
            email:
              type: string
            full_name:
              type: string
            id:
              type: string
            roles:
              type: string
              enum:
              - endUser
            tags:
              $ref: '#/components/schemas/Tags'
    Feature:
      type: object
      properties:
        app_url:
          type: string
          description: URL for this Feature
        created_at:
          type: string
        created_by_user_id:
          type: integer
        declined_at:
          type: string
        description:
          type: string
        developing_at:
          type: string
        effort:
          type: integer
          description: How much Effort is assigned to the development of this Feature.
            Not visible to EndUsers
        form_entry:
          type: string
          description: a JSON serialized version of the Form containing the description
            and other fields for this Feature.
        id:
          type: number
        is_private:
          type: boolean
          description: Is this Feature hidden from EndUsers?
        merged_to_feature_id:
          type: integer
          description: "If this Feature was merged into another, the ID of the preserved\
            \ Feature"
        planned_at:
          type: string
        products:
          type: array
          items:
            type: string
            description: Products associated with this Feature
        released_at:
          type: string
        resolution:
          type: string
          description: The latest Resolution set by the VendorUser
        resolved_by_user_id:
          type: integer
        status:
          type: string
          enum:
          - new
          - waiting
          - planned
          - developing
          - released
          - declined
        status_changed_at:
          type: string
        tags:
          $ref: '#/components/schemas/Tags'
        title:
          type: string
        updated_at:
          type: string
        updated_by_user_id:
          type: integer
        uploads:
          type: array
          items:
            type: string
        vendor_id:
          type: integer
        view_count:
          type: integer
          description: "How many times has this Feature been viewed. May only be visible\
            \ to VendorUsers, depending on config"
        waiting_at:
          type: string
    FeatureVote:
      type: object
      properties:
        feature_id:
          type: string
        quantity:
          type: integer
          description: Value between -1 and 1000000. -1 indicates that the User is
            "Not Interested" in the feature.
    Products:
      type: array
      description: "Supplied as an array of maps where each map describes an existing\
        \ or new product e.g [{id:exising_product_id, name:existing name}, {id:new_product_id,\
        \ name: new product name}]. \nExisting product id/names held in your account\
        \ can be referenced at https://feedback.pendo.io/app/#/vendor/products"
      items:
        type: string
    Tags:
      type: object
      description: "Tags can contain simple tags or categorised tags. Simple tags\
        \ are supplied as an array of Strings\nSimple Tag Example:\n['Foo', 'Bar'].\
        \ \nTo put the tags in categories replace the Strings with maps of using tag\
        \ category as the key and tag value as the value where value can be array\
        \ of strings, e.g\nCategorised Tag Example:\n[\n{'Color':['Red', 'Yellow']},\
        \ \n{'Flavor':['Cherry']}\n] \nSimple and categorised tags can be mixed in\
        \ the same array.\nBelow validations are done on the tag values of both simple\
        \ and categorised tags:\n1. Tag values must be strings\n2. Tags must be at\
        \ least 2 characters in length\n3. Invalid characters (we dont accept following\
        \ characters in tag value)  , | { } : < > "
    User:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/UserAccount'
        created_at:
          type: string
          format: dateTime
        email:
          type: string
        external_id:
          type: string
        id:
          type: string
        name:
          type: string
        roles:
          type: string
          enum:
          - endUser
    UserAccount:
      type: object
      properties:
        id:
          type: string
        monthly_value:
          type: number
          format: float
        name:
          type: string
        status:
          type: string
          enum:
          - paying
          - prospect
          - not_paying
    Vote:
      type: object
      properties:
        created_at:
          type: string
        feature_id:
          type: integer
        quantity:
          type: integer
          description: A negative number indicates that the User has indicated "Not
            Interested" in a Features. Between 0 and 1000000 is the User's current
            prioritization of the Feature.
        updated_at:
          type: string
        user_id:
          type: integer
  responses:
    "410":
      description: Resource has been deleted
      headers:
        status:
          schema:
            type: integer
      content: {}
  parameters:
    accountIdInPath:
      name: id
      in: path
      description: Account ID (generated by Feedback)
      required: true
      schema:
        type: number
    limit:
      name: limit
      in: query
      description: Limit the number of records returned
      schema:
        minimum: 0
        type: number
    order_by:
      name: order_by
      in: query
      description: The field to use for sort
      schema:
        type: string
    order_dir:
      name: order_dir
      in: query
      description: The sort direction
      schema:
        type: string
        enum:
        - asc
        - desc
    start:
      name: start
      in: query
      description: Offset to start at
      schema:
        minimum: 0
        type: number
  securitySchemes:
    userApiKey (query parameter):
      type: apiKey
      description: Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate.
        This key should then be added to every request URL as a query parameter.
      name: auth-token
      in: query
    userApiKey (request header):
      type: apiKey
      description: Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate.
        This key should then be added to every request as a request header.
      name: auth-token
      in: header
x-original-swagger-version: "2.0"
